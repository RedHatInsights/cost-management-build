{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/common/chartUtils.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/charts/common/chart.styles.ts","webpack:///./src/utils/computedReport/getComputedReportItems.ts","webpack:///./src/utils/computedReport/getItemLabel.ts","webpack:///./src/testIds.ts","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/reports/reportSummary/reportSummary.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummary.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryAlt.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryDetails.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItem.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryItem.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryItems.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.styles.ts","webpack:///./src/components/reports/reportSummary/reportSummaryCost.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryTrend.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/reportSummary/reportSummaryUsage.tsx","webpack:///./src/components/reports/reportSummary/index.ts","webpack:///./src/utils/sort.ts","webpack:///./src/utils/pathname.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/pages/dashboard/components/dashboardBase.tsx","webpack:///./src/pages/dashboard/components/dashboardWidget.styles.ts","webpack:///./src/pages/dashboard/components/dashboardWidgetBase.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboard.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboard.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/perspective.styles.ts","webpack:///./src/pages/overview/perspective.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","value","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformReport","getDateRange","getMaxValue","getTooltipContent","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","n","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_computedReport_getComputedReportItems__WEBPACK_IMPORTED_MODULE_6__","utils_formatValue__WEBPACK_IMPORTED_MODULE_7__","report","type","key","reportItem","reportItemValue","items","idKey","sortKey","sortDirection","computedItems","Object","padComputedReportItems","map","i","createDatum","reduce","acc","prevValue","length","y","computedItem","xVal","id","label","yVal","Number","isFloat","parseFloat","toFixed","isInt","x","name","units","undefined","datums","result","firstDate","Date","lastDate","padDate","getDate","setDate","push","firstOfMonth","lastOfMonth","offset","start","end","today","setMonth","getMonth","getDatumDateRange","max","forEach","datum","t","count","endDate","month","startDate","year","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","chartOverride","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_0__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_2__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_3__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_4__","_patternfly_react_tokens__WEBPACK_IMPORTED_MODULE_5__","emotion__WEBPACK_IMPORTED_MODULE_6__","getComputedReportItems","labelKey","sort","getUnsortedComputedReportItems","direction","itemMap","Map","visitDataPoint","dataPoint","values","cluster_alias","clusters","cluster","capacity","cost","total","deltaPercent","delta_percent","deltaValue","delta_value","source_uuid","supplementary","infrastructure","idSuffix","itemLabelKey","String","meta","group_by","keys","indexOf","query","tagPrefixKey","hasOwnProperty","getItemLabel","account_alias","limit","request","usage","item","get","set","Array","data","from","getTestProps","testIds","data-testid","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","styles","container","display","justifyContent","height","marginTop","ErrorState","es","error","icon","error_circle_o_icon","title","subTitle","response","status","lock_icon","react_default","a","createElement","EmptyState","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","LoadingState","binoculars_icon","Spinner","fontSize","EmptyValueState","minus_icon","chartSkeleton","marginBottom","global_spacer_md","legendSkeleton","reportSummary","subtitle","global_FontSize_xs","color","global_Color_200","var","ReportSummary","children","detailsLink","Card","CardTitle","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","reportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","global_spacer_lg","ReportSummaryAlt","tabs","Grid","hasGutter","GridItem","lg","xl","reportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","global_spacer_sm","lineHeight","global_LineHeight_sm","paddingLeft","global_spacer_xs","whiteSpace","global_Color_100","global_FontSize_4xl","valueContainer","width","wordWrap","ReportSummaryDetails","chartType","computedReportItem","computedReportItemValue","costLabel","formatOptions","requestFormatOptions","requestLabel","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","supplementaryCost","infrastructureCost","hasTotal","hasCost","hasCount","hasSupplementaryCost","hasInfrastructureCost","hasRequest","hasUsage","getCostLayout","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","reportSummaryItem","index_esm","ReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","className","Progress","defaultProps","v","ReportSummaryItem","reportSummaryItems_styles_styles","skeleton","ReportSummaryItems","Component","[object Object]","nextProps","this","props","otherIndex","findIndex","toString","includes","slice","getItems","chartStyles","currentColorScale","chart_color_green_100","chart_color_green_200","chart_color_green_300","chart_color_green_400","chart_color_green_500","currentCostData","fill","currentInfrastructureCostData","strokeDasharray","itemsPerRow","labels","fontFamily","global_FontFamily_sans_serif","minWidth","previousCostData","previousInfrastructureCostData","previousColorScale","global_disabled_color_200","yAxis","axisLabel","grid","stroke","ticks","tickLabels","xAxis","costChart_CostChart","super","arguments","containerRef","createRef","state","hiddenSeries","Set","initDatum","costKey","setState","series","childName","legendItem","chartUtils","symbol","handleNavToggle","setTimeout","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","gutter","responsive","getTooltipLabel","formatDatumValue","formatDatumOptions","formatter","dist_es","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","getChartNames","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","getLegendData","window","addEventListener","navToggle","insights","chrome","on","prevProps","removeEventListener","domain","maxCurrentInfrastructure","maxCurrentUsage","maxPreviousInfrastructure","maxPreviousUsage","maxValue","Math","ceil","currentInfrastructureDate","get_date_default","currentUsageDate","previousInfrastructureDate","previousUsageDate","adjustContainerHeight","containerHeight","CursorVoronoiContainer","chart_container","getDomain","getEndDate","midDate","floor","legendData","adjustedContainerHeight","chart_styles","ref","Chart","containerComponent","cursorDimension","labelComponent","ChartLegendTooltip","mouseFollowTooltips","voronoiDimension","events","legendComponent","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","reportSummaryTrend_styles_styles","ReportSummaryCost","trendChart_styles_chartStyles","currentMonthData","previousMonthData","trendChart_TrendChart","currentData","previousData","showSupplementaryLabel","showUsageLegendLabel","orientation","maxCurrent","maxPrevious","previousDate","currentDate","ReportSummaryTrend","usageChart_styles_chartStyles","chartContainer","currentRequestData","currentUsageData","legendColorScale","previousRequestData","previousUsageData","usageChart_UsageChart","maxCurrentRequest","maxPreviousRequest","currentRequestDate","previousRequestDate","ReportSummaryUsage","getValueForItem","array","b","aVal","bVal","getReleasePath","pathName","location","pathname","split","shift","release","viewSources","NoProvidersState","react_redux_es","getViewSources","href","dollar_sign_icon","DashboardBase","DashboardWidget","selectWidgets","widgets","widgetId","widget","showHorizontal","xl2","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","global_spacer_2xl","tabItems","global_spacer_xl","dashboardWidgetBase_DashboardWidgetBase","activeTabKey","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","awsQuery","order_by","getCostChart","getTrendChart","getUsageChart","currentReport","previousReport","trend","getUnits","titleKey","currentInfrastructureData","previousInfrastructureData","getDetails","getDetailsLabel","requestKey","usageKey","getDetailsLink","Link","to","onClick","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","getSubTitle","getTabs","getTitle","get_month_default","format_default","start_of_month_default","getTab","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","getTabItem","availableTabs","topItems","activeTab","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","appNavId","appNavClick","secondaryNav","event","tabIndex","updateTab","fetchReports","awsCloudDashboardWidget_getIdKeyForTab","mapStateToProps","common","awsCloudDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","reports","selectReport","reportPathsType","reportType","selectReportFetchStatus","mapDispatchToProps","fetchWidgetReports","changeWidgetTab","AwsCloudDashboardWidget","awsCloudDashboard_mapStateToProps","selectCurrentWidgets","awsCloudDashboard_awsCloudDashboard","awsDashboardWidget_getIdKeyForTab","awsDashboardWidget_mapStateToProps","awsDashboard","awsDashboardWidget_mapDispatchToProps","AwsDashboardWidget","awsDashboard_mapStateToProps","awsDashboard_awsDashboard","azureCloudDashboardWidget_getIdKeyForTab","azureCloudDashboardWidget_mapStateToProps","azureCloudDashboard","azureCloudDashboardWidget_mapDispatchToProps","AzureCloudDashboardWidget","azureCloudDashboard_mapStateToProps","azureCloudDashboard_azureCloudDashboard","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpCloudDashboardWidget_getIdKeyForTab","ocpCloudDashboardWidget_mapStateToProps","ocpCloudDashboard","ocpCloudDashboardWidget_mapDispatchToProps","OcpCloudDashboardWidget","ocpCloudDashboard_mapStateToProps","ocpCloudDashboard_ocpCloudDashboard","ocpDashboardWidget_styles_chartStyles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpSupplementaryDashboardWidget_getIdKeyForTab","ocpSupplementaryDashboardWidget_mapStateToProps","ocpSupplementaryDashboard","ocpSupplementaryDashboardWidget_mapDispatchToProps","OcpSupplementaryDashboardWidget","ocpSupplementaryDashboard_mapStateToProps","ocpSupplementaryDashboard_ocpSupplementaryDashboard","ocpUsageDashboardWidget_getIdKeyForTab","ocpUsageDashboardWidget_mapStateToProps","ocpUsageDashboard","ocpUsageDashboardWidget_mapDispatchToProps","OcpUsageDashboardWidget","ocpUsageDashboard_mapStateToProps","ocpUsageDashboard_ocpUsageDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","global_FontSize_md","infoTitle","fontWeight","perspective","headerOverride","perspective_styles_styles","perspectiveSelector","perspectiveLabel","Perspective","defaultState","isPerspectiveOpen","getDropDownItems","option","DropdownItem","component","handleClick","getCurrentLabel","currentItem","onItemClicked","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","overview_getIdKeyForTab","ocpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAzureOptions","infrastructureOcpOptions","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","overview","showPopover","getAvailableTabs","isAwsAvailable","isAzureAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","getCurrentTab","getDefaultInfrastructurePerspective","getDefaultOcpPerspective","getPerspective","currentInfrastructurePerspective","currentOcpPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","val","TabContent","emptyTab","handlePopoverClick","show","prevState","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState"],"mappings":"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","file":"da9db9df654489f6896f.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { unitLookupKey, } from 'utils/formatValue';\nexport function transformReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost', reportItemValue = 'total') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        idKey: key,\n        report,\n        reportItemValue,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedReportItems(items);\n    if (type === 1 /* daily */ || type === 2 /* monthly */) {\n        return padComputedReportItems(computedItems.map(i => createDatum(i[reportItem], i, key, reportItem)));\n    }\n    return padComputedReportItems(computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [\n            ...acc,\n            createDatum(prevValue + d[reportItem], d, key, reportItem),\n        ];\n    }, []));\n}\nexport function createDatum(value, computedItem, idKey = 'date', reportItem = 'cost') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: value === null ? null : yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units ? computedItem.units[reportItem] : undefined,\n    };\n}\n// This pads computed report items with null datum objects, representing missing data at the begining and end of the\n// data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n// message in the tooltip, which helps distinguish between zero values and when there is no data available.\nexport function padComputedReportItems(datums) {\n    const result = [];\n    if (!datums || datums.length === 0) {\n        return result;\n    }\n    const firstDate = new Date(datums[0].key + 'T00:00:00');\n    const lastDate = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    // Pad start for missing data\n    let padDate = startOfMonth(firstDate);\n    for (let i = padDate.getDate(); i < firstDate.getDate(); i++) {\n        padDate.setDate(i);\n        const id = formatDate(padDate, 'YYYY-MM-DD');\n        result.push(createDatum(null, { id }, 'date', null));\n    }\n    // Fill middle with existing data\n    result.push(...datums);\n    // Pad end for missing data\n    padDate = new Date(lastDate);\n    for (let i = padDate.getDate() + 1; i <= endOfMonth(lastDate).getDate(); i++) {\n        padDate.setDate(i);\n        const id = formatDate(padDate, 'YYYY-MM-DD');\n        result.push(createDatum(null, { id }, 'date', null));\n    }\n    return result;\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { global_Color_dark_100, global_Color_light_100, global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const chartStyles = {\n    padding: 8,\n    group: {\n        data: { strokeWidth: 2, fillOpacity: 0.4 },\n    },\n    tooltipText: {\n        fontSize: '14px',\n        fill: global_Color_light_100.value,\n    },\n    tooltipFlyout: { fill: global_Color_dark_100.value },\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const chartOverride = css `\n  :not(foo) svg {\n    overflow: visible;\n  }\n`;\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedReportItems({ idKey, labelKey = idKey, report, reportItemValue = 'total', sortDirection = 0 /* asc */, sortKey = 'cost', }) {\n    return sort(getUnsortedComputedReportItems({\n        idKey,\n        labelKey,\n        report,\n        reportItemValue,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedReportItems({ report, idKey, labelKey = idKey, reportItemValue = 'total', }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint && dataPoint.values) {\n            dataPoint.values.forEach((value) => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const clusters = value.clusters ? value.clusters : [];\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost && value.cost.total ? value.cost.total.value : 0;\n                const deltaPercent = value.delta_percent ? value.delta_percent : 0;\n                const deltaValue = value.delta_value ? value.delta_value : 0;\n                const source_uuid = value.source_uuid ? value.source_uuid : [];\n                const supplementary = value.supplementary && value.supplementary.total\n                    ? value.supplementary.total.value\n                    : 0;\n                const infrastructure = value.infrastructure && value.infrastructure[reportItemValue]\n                    ? value.infrastructure[reportItemValue].value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (value.capacity && { capacity: value.capacity.units })), { cost: value.cost && value.cost.total ? value.cost.total.units : 'USD' }), (value.limit && { limit: value.limit.units })), (value.infrastructure &&\n                    value.infrastructure.total && {\n                    infrastructure: value.infrastructure.total.units,\n                })), (value.request && { request: value.request.units })), (value.supplementary &&\n                    value.supplementary.total && {\n                    supplementary: value.supplementary.total.units,\n                })), (value.usage && { usage: value.usage.units }));\n                const item = itemMap.get(id);\n                if (item) {\n                    itemMap.set(id, Object.assign(Object.assign({}, item), { capacity: item.capacity + capacity, cost: item.cost + cost, supplementary: item.supplementary + supplementary, infrastructure: item.infrastructure + infrastructure, limit: item.limit + limit, request: item.request + request, usage: item.usage + usage }));\n                }\n                else {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters,\n                        cost,\n                        deltaPercent,\n                        deltaValue,\n                        source_uuid,\n                        supplementary,\n                        id,\n                        infrastructure,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                }\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\n","import { tagKeyPrefix } from 'api/queries/query';\nexport function getItemLabel({ report, labelKey, value }) {\n    let itemLabelKey = String(labelKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagKeyPrefix)) {\n                const tagPrefixKey = tagKeyPrefix + labelKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","export const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n};\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { ErrorCircleOIcon } from '@patternfly/react-icons/dist/js/icons/error-circle-o-icon';\nimport { LockIcon } from '@patternfly/react-icons/dist/js/icons/lock-icon';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error &&\n        error.response &&\n        (error.response.status === 401 || error.response.status === 403)) {\n        icon = LockIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { style: styles.container },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","export const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '150px',\n    },\n};\n","import { EmptyState, EmptyStateBody, Spinner, Title, } from '@patternfly/react-core';\nimport { BinocularsIcon } from '@patternfly/react-icons/dist/js/icons/binoculars-icon';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { style: styles.container },\n        React.createElement(EmptyState, null,\n            React.createElement(Spinner, { size: \"lg\" }),\n            React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = {\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n};\n","import { MinusIcon } from '@patternfly/react-icons/dist/js/icons/minus-icon';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { style: styles.container },\n        React.createElement(MinusIcon, null)));\n};\n","import { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = {\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n};\n","import { Card, CardBody, CardFooter, CardTitle, Title, } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummary.styles';\nconst ReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { style: styles.reportSummary },\n    React.createElement(CardTitle, null,\n        React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { style: styles.subtitle }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { style: styles.chartSkeleton, size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { style: styles.legendSkeleton, size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst ReportSummary = translate()(ReportSummaryBase);\nexport { ReportSummary };\n","import { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = {\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { Card, CardBody, CardFooter, CardTitle, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './reportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { style: styles.reportSummary },\n    React.createElement(Grid, { hasGutter: true },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { style: styles.cost },\n                React.createElement(CardTitle, null,\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, title),\n                    Boolean(subTitle) && React.createElement(\"p\", { style: styles.subtitle }, subTitle)),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { style: styles.chartSkeleton, size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { style: styles.legendSkeleton, size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { style: styles.container },\n                React.createElement(\"div\", { style: styles.tops }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst ReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { ReportSummaryAlt };\n","import { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = {\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: global_spacer_sm.value,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    units: {\n        paddingLeft: global_spacer_xs.value,\n        paddingBottom: global_spacer_sm.value,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n        whiteSpace: 'nowrap',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './reportSummaryDetails.styles';\nconst ReportSummaryDetailsBase = ({ chartType, computedReportItem = 'cost', computedReportItemValue = 'total', costLabel, formatValue, formatOptions, report, requestFormatOptions, requestLabel, showTooltip = false, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let supplementaryCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const hasTotal = report && report.meta && report.meta.total;\n    const hasCost = hasTotal && report.meta.total.cost && report.meta.total.cost.total;\n    const hasCount = hasTotal && report.meta.total.count;\n    const hasSupplementaryCost = hasTotal &&\n        report.meta.total.supplementary &&\n        report.meta.total.supplementary.total &&\n        report.meta.total.supplementary.total.value;\n    const hasInfrastructureCost = hasTotal &&\n        report.meta.total.infrastructure &&\n        report.meta.total.infrastructure[computedReportItemValue] &&\n        report.meta.total.infrastructure[computedReportItemValue].value;\n    const hasRequest = hasTotal && report.meta.total.request;\n    const hasUsage = hasTotal && report.meta.total.usage;\n    if (hasTotal) {\n        cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD', formatOptions);\n        supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost\n            ? report.meta.total.supplementary.total.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(hasInfrastructureCost\n            ? report.meta.total.infrastructure[computedReportItemValue].value\n            : 0, hasInfrastructureCost\n            ? report.meta.total.infrastructure[computedReportItemValue].units\n            : 'USD', formatOptions);\n        request = formatValue(hasRequest ? report.meta.total.request.value : 0, hasRequest ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        if (hasUsage && report.meta.total.usage.value >= 0) {\n            usage = formatValue(hasUsage ? report.meta.total.usage.value : 0, hasUsage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Workaround for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(hasUsage ? report.meta.total.usage : 0, hasCount ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => {\n        let value = cost;\n        if (computedReportItem === \"infrastructure\" /* infrastructure */) {\n            value = infrastructureCost;\n        }\n        else if (computedReportItem === \"supplementary\" /* supplementary */) {\n            value = supplementaryCost;\n        }\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            Boolean(showTooltip) ? (React.createElement(Tooltip, { content: t('dashboard.total_cost_tooltip', {\n                    infrastructureCost,\n                    supplementaryCost,\n                }), enableFlip: true },\n                React.createElement(\"div\", { style: styles.value }, value))) : (React.createElement(\"div\", { style: styles.value }, value)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, costLabel))));\n    };\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasRequest\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            React.createElement(\"div\", { style: styles.value },\n                request,\n                Boolean(showUnits &&\n                    (units || (hasRequest && report.meta.total.request.value >= 0))) && React.createElement(\"span\", { style: styles.units }, unitsLabel)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = hasUsage ? report.meta.total.usage.units : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { style: styles.valueContainer },\n            React.createElement(\"div\", { style: styles.value },\n                usage,\n                Boolean(showUnits &&\n                    (units || (hasUsage && report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { style: styles.units }, unitsLabel)),\n            React.createElement(\"div\", { style: styles.text },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (chartType === \"cost\" /* cost */ ||\n        chartType === \"supplementary\" /* supplementary */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (chartType === \"trend\" /* trend */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else if (chartType === \"usage\" /* usage */) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n    else {\n        return null;\n    }\n};\nconst ReportSummaryDetails = translate()(ReportSummaryDetailsBase);\nexport { ReportSummaryDetails };\n","import { global_spacer_md } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const reportSummaryItem = css `\n  :not(:last-child) {\n    margin-bottom: ${global_spacer_md.value};\n  }\n`;\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { reportSummaryItem } from './reportSummaryItem.styles';\nconst ReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: reportSummaryItem },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst ReportSummaryItem = translate()(ReportSummaryItemBase);\nexport { ReportSummaryItem };\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n};\n","import { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedReportItems, } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './reportSummaryItems.styles';\nclass ReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { computedReportItemValue = 'total', idKey, labelKey, report, } = this.props;\n        const computedItems = getComputedReportItems({\n            report,\n            idKey,\n            labelKey,\n            reportItemValue: computedReportItemValue,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, style: styles.skeleton })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst ReportSummaryItems = translate()(ReportSummaryItemsBase);\nexport { ReportSummaryItems, };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentCostData: {\n        fill: 'none',\n    },\n    currentInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        fill: 'none',\n    },\n    previousInfrastructureCostData: {\n        fill: 'none',\n        strokeDasharray: '3,3',\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                fill: chartStyles.previousColorScale[0],\n                                type: 'minus',\n                            },\n                        },\n                        style: {\n                            data: Object.assign(Object.assign({}, chartStyles.previousCostData), { stroke: chartStyles.previousColorScale[0] }),\n                        },\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                fill: chartStyles.currentColorScale[0],\n                                type: 'minus',\n                            },\n                        },\n                        style: {\n                            data: Object.assign(Object.assign({}, chartStyles.currentCostData), { stroke: chartStyles.currentColorScale[0] }),\n                        },\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                fill: chartStyles.previousColorScale[1],\n                                type: 'dash',\n                            },\n                        },\n                        style: {\n                            data: Object.assign(Object.assign({}, chartStyles.previousInfrastructureCostData), { stroke: chartStyles.previousColorScale[1] }),\n                        },\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                fill: chartStyles.currentColorScale[1],\n                                type: 'dash',\n                            },\n                        },\n                        style: {\n                            data: Object.assign(Object.assign({}, chartStyles.currentInfrastructureCostData), { stroke: chartStyles.currentColorScale[1] }),\n                        },\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const formatter = getTooltipContent(formatDatumValue);\n            return datum.y !== null\n                ? formatter(datum.y, datum.units, formatDatumOptions)\n                : i18next.t('chart.no_data');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({ childName: s.childName }, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n            return undefined;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        // Note: Container order is important\n        const CursorVoronoiContainer = createContainer('cursor', 'voronoi');\n        const isDataAvailable = this.isDataAvailable();\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendData = this.getLegendData();\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: !isDataAvailable ? this.getTooltipLabel : undefined, labelComponent: React.createElement(ChartLegendTooltip, { legendData: legendData }), mouseFollowTooltips: true, voronoiDimension: \"x\" }), domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: legendData, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { CostChart };\n","import { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = {\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n};\n","import { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryCost = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { ReportSummaryCost };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentMonthData: {\n        fill: 'none',\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    previousMonthData: {\n        fill: 'none',\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showSupplementaryLabel = false, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : showSupplementaryLabel\n                    ? 'chart.cost_supplementary_legend_label'\n                    : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                fill: chartStyles.previousColorScale[0],\n                                type: 'minus',\n                            },\n                        },\n                        style: {\n                            data: Object.assign(Object.assign({}, chartStyles.previousMonthData), { stroke: chartStyles.previousColorScale[0] }),\n                        },\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                fill: chartStyles.currentColorScale[0],\n                                type: 'minus',\n                            },\n                        },\n                        style: {\n                            data: Object.assign(Object.assign({}, chartStyles.currentMonthData), { stroke: chartStyles.currentColorScale[0] }),\n                        },\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            const formatter = getTooltipContent(formatDatumValue);\n            return datum.y !== null\n                ? formatter(datum.y, units || datum.units, formatDatumOptions)\n                : i18next.t('chart.no_data');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            // Todo: Leave one legend item visible at all times?\n            // const { hiddenSeries, series } = this.state;\n            // const leaveVisible = hiddenSeries.size === series.length - 1;\n            // if (leaveVisible && !this.isSeriesHidden(props.index)) {\n            //   return;\n            // }\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({ childName: s.childName }, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        // Note: Container order is important\n        const CursorVoronoiContainer = createContainer('cursor', 'voronoi');\n        const isDataAvailable = this.isDataAvailable();\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendData = this.getLegendData();\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: !isDataAvailable ? this.getTooltipLabel : undefined, labelComponent: React.createElement(ChartLegendTooltip, { legendData: legendData }), mouseFollowTooltips: true, voronoiDimension: \"x\" }), domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: legendData, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { TrendChart };\n","import { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryTrend = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { ReportSummaryTrend };\n","import { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartContainer: {\n        marginTop: global_spacer_lg.value,\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartLegendTooltip, createContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { chartOverride } from 'components/charts/common/chart.styles';\nimport { getDateRange, getMaxValue, getTooltipContent, getUsageRangeString, } from 'components/charts/common/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                fill: chartStyles.legendColorScale[0],\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                fill: chartStyles.legendColorScale[1],\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                fill: chartStyles.legendColorScale[2],\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                fill: chartStyles.legendColorScale[3],\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const formatter = getTooltipContent(formatDatumValue);\n            return datum.y !== null\n                ? formatter(datum.y, datum.units, formatDatumOptions)\n                : i18next.t('chart.no_data');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign(Object.assign({ childName: s.childName }, s.legendItem), getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n            this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        // Note: Container order is important\n        const CursorVoronoiContainer = createContainer('cursor', 'voronoi');\n        const isDataAvailable = this.isDataAvailable();\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendData = this.getLegendData();\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: chartOverride, ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            title,\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: !isDataAvailable ? this.getTooltipLabel : undefined, labelComponent: React.createElement(ChartLegendTooltip, { legendData: legendData }), mouseFollowTooltips: true, voronoiDimension: \"x\" }), domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: legendData, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis })))));\n    }\n}\nexport { UsageChart };\n","import { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './reportSummaryTrend.styles';\nconst ReportSummaryUsage = props => (React.createElement(\"div\", { style: styles.chart },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { ReportSummaryUsage };\n","export { ReportSummary } from './reportSummary';\nexport { ReportSummaryAlt } from './reportSummaryAlt';\nexport { ReportSummaryDetails } from './reportSummaryDetails';\nexport { ReportSummaryItem } from './reportSummaryItem';\nexport { ReportSummaryItems } from './reportSummaryItems';\nexport { ReportSummaryCost } from './reportSummaryCost';\nexport { ReportSummaryTrend } from './reportSummaryTrend';\nexport { ReportSummaryUsage } from './reportSummaryUsage';\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const getReleasePath = () => {\n    const pathName = window.location.pathname.split('/');\n    pathName.shift();\n    let release = '';\n    if (pathName[0] === 'beta') {\n        release = `/beta`;\n    }\n    return release;\n};\n","import { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = {\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n};\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons/dist/js/icons/dollar-sign-icon';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { getReleasePath } from 'utils/pathname';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            const release = getReleasePath();\n            return (React.createElement(\"a\", Object.assign({ href: `${release}/settings/sources` }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { style: styles.container },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { style: styles.viewSources }, this.getViewSources()))));\n    }\n}\nconst NoProvidersState = translate()(connect()(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.details.showHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 100,\n    containerAltHeight: 200,\n    containerTrendHeight: 170,\n    containerUsageHeight: 200,\n};\nexport const styles = {\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformReport, } from 'components/charts/common/chartUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType } = this.props;\n            if (chartType === \"cost\" /* cost */) {\n                return this.getCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"supplementary\" /* supplementary */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, true);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height);\n            }\n            else {\n                return null;\n            }\n        };\n        // This chart displays cost and infrastructure cost\n        this.getCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, trend.type, 'date', 'infrastructure', computedReportItemValue);\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(ReportSummaryCost, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title }));\n        };\n        // This chart displays cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            // Data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: details.units, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus, trend, } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { computedReportItemValue: computedReportItemValue, idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue =\n                        tabsReport.meta.total[computedReportItem][computedReportItemValue]\n                            .value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem] }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage\n                    ? unitLookupKey(currentReport.meta.total.usage.units)\n                    : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                units = hasCost\n                    ? unitLookupKey(currentReport.meta.total[computedReportItem][computedReportItemValue].units)\n                    : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { style: styles.tabs }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavId) {\n                insights.chrome.appNavClick({\n                    id: details.appNavId,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase, };\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/dashboard/awsDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/dashboard/azureDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 180,\n    containerAltHeight: 275,\n};\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/dashboard/ocpDashboard';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = {\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginBottom: global_spacer_lg.value,\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = event => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = translate()(PerspectiveBase);\nexport { Perspective };\n","import { Popover, Tab, TabContent, Tabs, TabTitleText, Title, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons/dist/js/icons/info-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsCloudDashboard from 'pages/dashboard/awsCloudDashboard/awsCloudDashboard';\nimport AwsDashboard from 'pages/dashboard/awsDashboard/awsDashboard';\nimport AzureCloudDashboard from 'pages/dashboard/azureCloudDashboard/azureCloudDashboard';\nimport AzureDashboard from 'pages/dashboard/azureDashboard/azureDashboard';\nimport OcpCloudDashboard from 'pages/dashboard/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/dashboard/ocpDashboard/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/dashboard/ocpUsageDashboard/ocpUsageDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nimport { Perspective } from './perspective';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure all cloud options\nconst infrastructureAllCloudOptions = [\n    { label: 'overview.perspective.all_cloud', value: 'all_cloud' },\n];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [\n    { label: 'overview.perspective.aws', value: 'aws' },\n    { label: 'overview.perspective.aws_cloud', value: 'aws_cloud' },\n];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [\n    { label: 'overview.perspective.azure', value: 'azure' },\n    { label: 'overview.perspective.azure_cloud', value: 'azure_cloud' },\n];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [\n    { label: 'overview.perspective.ocp_usage', value: 'ocp_usage' },\n];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            const isOcpCloudAvailable = this.isOcpCloudAvailable();\n            const showOcpOnly = isOcpAvailable &&\n                !(isAwsAvailable || isAzureAvailable || isOcpCloudAvailable);\n            const showInfrastructureOnly = !isOcpAvailable &&\n                (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all_cloud\" /* allCloud */;\n            }\n            if (isAwsAvailable) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable) {\n                return \"azure\" /* azure */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const isOcpAvailable = this.isOcpAvailable();\n            if (isOcpAvailable) {\n                return \"all\" /* all */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            const isAwsAvailable = this.isAwsAvailable();\n            const isAzureAvailable = this.isAzureAvailable();\n            const isOcpAvailable = this.isOcpAvailable();\n            if (!(isAwsAvailable || isAzureAvailable || isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (isOcpAvailable) {\n                    options.push(...infrastructureAllCloudOptions);\n                }\n                if (isAwsAvailable) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (isAzureAvailable) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (isOcpAvailable) {\n                    options.push(...infrastructureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */\n                ? currentInfrastructurePerspective\n                : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return React.createElement(OcpCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return React.createElement(AwsDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"aws_cloud\" /* awsFiltered */) {\n                    return React.createElement(AwsCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return React.createElement(AzureDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"azure_cloud\" /* azureCloud */) {\n                    return React.createElement(AzureCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return React.createElement(OcpUsageDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpCloudDashboard, null); // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return React.createElement(OcpDashboard, null);\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return React.createElement(OcpSupplementaryDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpDashboard, null); // default\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders } = this.props;\n            return (awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders } = this.props;\n            return (azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders } = this.props;\n            return (ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { awsProviders, azureProviders, ocpProviders } = this.props;\n        if (prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersError, awsProvidersFetchStatus, azureProvidersError, azureProvidersFetchStatus, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = !this.isAwsAvailable() &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { headingLevel: \"h2\", size: \"xl\" },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { style: styles.info, onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                    React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n"],"sourceRoot":""}