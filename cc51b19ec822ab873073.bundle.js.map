{"version":3,"sources":["webpack:///./src/pages/overview/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummary.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryAlt.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryDetails.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItem.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryItems.tsx","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.styles.ts","webpack:///./src/components/reports/azureReportSummary/azureReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.styles.ts","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/azureDashboard/azureDashboardWidget.styles.ts","webpack:///./src/pages/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/ocpCloudDashboard/ocpCloudDashboardWidget.styles.ts","webpack:///./src/pages/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/overview.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_overview__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","display","justifyContent","height","marginTop","LoadingState","es","icon","binoculars_icon","title","subTitle","EmptyState","Spinner","size","Title","EmptyStateBody","ErrorState","error","error_circle_o_icon","response","status","ban_icon","EmptyStateIcon","viewSources","mapStateToProps","common","state","NoProvidersState","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","dollar_sign_icon","chartStyles","colorScale","esm","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","showUsageLegendLabel","legendData","chartUtils","push","symbol","setState","chartDatum","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","eventHandlers","target","mutation","ChartLegend","events","gutter","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendColorScale","handleLegendClick","legendItemsPerRow","responsive","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitleTooltip","Card","CardHeader","Tooltip","content","enableFlip","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","AzureReportSummary","azureReportSummaryAlt_styles_styles","AzureReportSummaryAlt","azureReportSummaryDetails_styles_styles","AzureReportSummaryDetails","_units","azureReportSummaryItem_styles_styles","AzureReportSummaryItemBase","AzureReportSummaryItem","azureReportSummaryItems_styles_styles","AzureReportSummaryItems","azureReportSummaryTrend_styles_styles","AzureReportSummaryTrend","OcpCloudReportSummary","ocpCloudReportSummaryAlt_styles_styles","OcpCloudReportSummaryAlt","ocpCloudReportSummaryDetails_styles_styles","OcpCloudReportSummaryDetails","requestFormatOptions","requestLabel","cloudReportType","getRequestLayout","ocpCloudReportSummaryItem_styles_styles","OcpCloudReportSummaryItemBase","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","OcpCloudReportSummaryItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","OcpCloudReportSummaryUsage","usageChart","OcpReportSummary","ocpReportSummaryAlt_styles_styles","OcpReportSummaryAlt","ocpReportSummaryDetails_styles_styles","OcpReportSummaryDetails","ocpReportSummaryItem_styles_styles","OcpReportSummaryItemBase","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","OcpReportSummaryItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","costKey","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","tabItems","getIdKeyForTab","tab","widgetId","widget","awsDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","currentReport","awsReports","selectReport","currentReportFetchStatus","selectReportFetchStatus","previousReport","tabsReport","tabsReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","activeTabKey","buildDetailsLink","currentTab","awsQuery","group_by","order_by","trend","getUnits","awsReportSummary","titleKey","getDetails","isUsageFirst","getDetailsLabel","usageKey","getDetailsLink","isDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","getHorizontalLayout","getSubTitle","getTabs","getTitle","get_month_default","format_default","start_of_month_default","getTab","Tab","eventKey","getTabTitle","getTabItem","availableTabs","topItems","activeTab","isCostReport","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","insights","chrome","appNavClick","secondaryNav","event","tabIndex","isHorizontal","awsDashboard_mapStateToProps","selectWidgets","widgets","selectCurrentWidgets","awsDashboard_awsDashboard","xl2","azureDashboardWidget_styles_chartStyles","azureDashboardWidget_styles_styles","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureReports","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureQuery","azureReportSummary","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpCloudDashboardWidget_styles_chartStyles","containerUsageHeight","ocpCloudDashboardWidget_styles_styles","ocpCloudDashboardWidget_getIdKeyForTab","ocpCloudDashboardWidget_mapStateToProps","ocpCloudDashboard","ocpCloudReports","ocpCloudDashboardWidget_mapDispatchToProps","OcpCloudDashboardWidget","ocpCloudQuery","ocpCloudReportSummary","requestKey","ocpCloudDashboard_mapStateToProps","ocpCloudDashboard_ocpCloudDashboard","ocpDashboardWidget_styles_chartStyles","ocpDashboardWidget_styles_styles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpQuery","currentInfrastructureData","previousInfrastructureData","ocpReportSummary","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","infoTitle","fontWeight","headerOverride","index_esm","overview_getIdKeyForTab","overview_mapStateToProps","awsProvidersQueryString","providersQuery","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","Overview","showPopover","getAvailableTabs","contentRef","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","sizes","Popover","aria-label","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState"],"mappings":"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","file":"cc51b19ec822ab873073.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, Title } from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/esm/experimental';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(Spinner, { size: \"lg\" }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { BanIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error && error.response && error.response.status === 401) {\n        icon = BanIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            if (previousData) {\n                const label = getCostRangeString(previousData, key, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            if (currentData) {\n                const label = getCostRangeString(currentData, key, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            if (previousUsageData) {\n                const label = getUsageRangeString(previousUsageData, usageKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const label = getUsageRangeString(currentUsageData, usageKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const label = getUsageRangeString(previousRequestData, requestKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const label = getUsageRangeString(currentRequestData, requestKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, responsive: true, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummary.styles';\nconst AzureReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AzureReportSummary = translate()(AzureReportSummaryBase);\nexport { AzureReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './azureReportSummaryAlt.styles';\nconst AzureReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AzureReportSummaryAlt = translate()(AzureReportSummaryAltBase);\nexport { AzureReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryDetails.styles';\nconst AzureReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, units, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (report.meta.total.usage && report.meta.total.usage.value) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            // Work around for https://github.com/project-koku/koku-ui/issues/1058\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage : 0, report.meta.total.count ? report.meta.total.count.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        // added as a work-around for azure #1079\n        const _units = unitLookupKey(units ? units : usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    (units ||\n                        (report &&\n                            report.meta &&\n                            report.meta.total.usage &&\n                            report.meta.total.usage.value >= 0))) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AzureReportSummaryDetails = translate()(AzureReportSummaryDetailsBase);\nexport { AzureReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './azureReportSummaryItem.styles';\nconst AzureReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAzureReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AzureReportSummaryItem = translate()(AzureReportSummaryItemBase);\nexport { AzureReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { styles } from './azureReportSummaryItems.styles';\nclass AzureReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAzureReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AzureReportSummaryItems = translate()(AzureReportSummaryItemsBase);\nexport { AzureReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './azureReportSummaryTrend.styles';\nconst AzureReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AzureReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            if (previousCostData) {\n                const label = getCostRangeString(previousCostData, costKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentCostData) {\n                const label = getCostRangeString(currentCostData, costKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'minus',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousInfrastructureCostData) {\n                const label = getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentInfrastructureCostData) {\n                const label = getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false);\n                legendData.push({\n                    name: label,\n                    symbol: {\n                        type: 'dash',\n                    },\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousCostData,\n                            name: 'previousCost',\n                            show: true,\n                            style: chartStyles.previousCostData,\n                        },\n                        {\n                            data: currentCostData,\n                            name: 'currentCost',\n                            show: true,\n                            style: chartStyles.currentCostData,\n                        },\n                        {\n                            data: previousInfrastructureCostData,\n                            name: 'previousInfrastructureCost',\n                            show: true,\n                            style: chartStyles.previousInfrastructureCostData,\n                        },\n                        {\n                            data: currentInfrastructureCostData,\n                            name: 'currentInfrastructureCost',\n                            show: true,\n                            style: chartStyles.currentInfrastructureCostData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: width > 400 ? containerHeight : containerHeight + 75 } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum && chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { transformAwsReport } from 'components/charts/commonChart/chartUtils';\nimport { AwsReportSummary, AwsReportSummaryAlt, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/reports/awsReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './awsDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/aws?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const currentData = transformAwsReport(currentReport, trend.type);\n            const previousData = transformAwsReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryTrend, { containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showUsageLegendLabel: details.showUsageLegendLabel, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AwsReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AwsReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AwsReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'aws', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/azureQuery';\nimport { transformAzureReport } from 'components/charts/commonChart/chartUtils';\nimport { AzureReportSummary, AzureReportSummaryAlt, AzureReportSummaryDetails, AzureReportSummaryItem, AzureReportSummaryItems, AzureReportSummaryTrend, } from 'components/reports/azureReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/azureDashboard';\nimport { azureReportsSelectors } from 'store/azureReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './azureDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AzureDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/azure?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const currentData = transformAzureReport(currentReport, trend.type);\n            const previousData = transformAzureReport(previousReport, trend.type);\n            const units = this.getUnits();\n            return (React.createElement(AzureReportSummaryTrend, { containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showUsageLegendLabel: details.showUsageLegendLabel, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }), units: units }));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(AzureReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, units: units, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(AzureReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('azure_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(AzureReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, reportType, tabsReport, topItems, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(AzureReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value\n                            ? tabsReport.meta.total.usage.value\n                            : tabsReport.meta.total.usage, units: details.units ? details.units : reportItem.units, value: reportItem.cost }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, reportType } = this.props;\n            if (details.units) {\n                return details.units;\n            }\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(AzureReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'azure', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AzureDashboardWidgetBase));\nexport { AzureDashboardWidget, AzureDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureDashboardSelectors } from 'store/azureDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst AzureDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(AzureDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(AzureDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(AzureDashboardBase));\nexport default AzureDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { transformOcpCloudReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpCloudReportSummary, OcpCloudReportSummaryAlt, OcpCloudReportSummaryDetails, OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, OcpCloudReportSummaryTrend, OcpCloudReportSummaryUsage, } from 'components/reports/ocpCloudReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/ocpCloudDashboard';\nimport { ocpCloudReportsSelectors } from 'store/ocpCloudReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpCloudDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpCloudDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp-on-aws?${getQuery({\n                // Todo: replace ocp-on-aws with ocp-cloud\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, details, previousReport, reportType, t, trend, } = this.props;\n            const costReportType = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            const reportItem = costReportType ? 'infrastructureCost' : 'usage';\n            const currentUsageData = transformOcpCloudReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpCloudReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpCloudReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpCloudReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const units = this.getUnits();\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"instance_type\" /* instanceType */ ||\n                reportType === \"network\" /* network */ ||\n                reportType === \"storage\" /* storage */) ? (React.createElement(OcpCloudReportSummaryTrend, { containerHeight: containerHeight, currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousUsageData, showUsageLegendLabel: details.showUsageLegendLabel, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) })) : (React.createElement(OcpCloudReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: t(trend.titleKey, {\n                    units: t(`units.${units}`),\n                }) }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpCloudReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestFormatOptions: details.requestFormatOptions, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpCloudReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('ocp_cloud_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpCloudReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const isCostReport = reportType === \"cost\" /* cost */ ||\n                reportType === \"database\" /* database */ ||\n                reportType === \"network\" /* network */;\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpCloudReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: isCostReport\n                        ? tabsReport.meta.total.infrastructure_cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: isCostReport ? reportItem.infrastructureCost : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */ ||\n                    reportType === \"database\" /* database */ ||\n                    reportType === \"network\" /* network */) {\n                    units = currentReport.meta.total.infrastructure_cost\n                        ? unitLookupKey(currentReport.meta.total.infrastructure_cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpCloudReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp-on-aws', secondaryNav: true }); // Todo: replace ocp-on-aws with ocp-cloud\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDashboardWidgetBase));\nexport { OcpCloudDashboardWidget, OcpCloudDashboardWidgetBase, };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst OcpCloudDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpCloudDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpCloudDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = translate()(connect(mapStateToProps, {})(OcpCloudDashboardBase));\nexport default OcpCloudDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 275,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = StyleSheet.create({\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { transformOcpReport } from 'components/charts/commonChart/chartUtils';\nimport { OcpReportSummary, OcpReportSummaryAlt, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/reports/ocpReportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const currentTab = getIdKeyForTab(tab);\n            return `/ocp?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height) => {\n            const { currentReport, previousReport, reportType, t, trend } = this.props;\n            const reportItem = reportType === \"cost\" /* cost */ ? 'cost' : 'usage';\n            const currentUsageData = transformOcpReport(currentReport, trend.type, 'date', reportItem);\n            const previousUsageData = transformOcpReport(previousReport, trend.type, 'date', reportItem);\n            const currentRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'request')\n                : undefined;\n            const previousRequestData = reportType !== \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'request')\n                : undefined;\n            const currentInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(currentReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const previousInfrastructureData = reportType === \"cost\" /* cost */\n                ? transformOcpReport(previousReport, trend.type, 'date', 'infrastructureCost')\n                : undefined;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            return (React.createElement(React.Fragment, null, Boolean(reportType === \"cost\" /* cost */) ? (React.createElement(OcpReportSummaryTrend, { containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title })) : (React.createElement(OcpReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }))));\n        };\n        this.getDetails = () => {\n            const { currentReport, details, isUsageFirst, reportType } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(OcpReportSummaryDetails, { costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, reportType: reportType, requestFormatOptions: details.requestFormatOptions, requestLabel: this.getDetailsLabel(details.requestKey, units), showUnits: details.showUnits, showUsageFirst: isUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, isDetailsLink } = this.props;\n            return (isDetailsLink && (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab))));\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerAltHeight, chartStyles.chartAltHeight)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('ocp_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { className: css(styles.tabItems) },\n                    React.createElement(OcpReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, reportType, tabsReport, topItems } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            if (activeTab === currentTab) {\n                return (React.createElement(OcpReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                        ? tabsReport.meta.total.cost.value\n                        : tabsReport.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */\n                        ? reportItem.cost\n                        : reportItem.usage }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, reportType } = this.props;\n            let units = '';\n            if (currentReport && currentReport.meta && currentReport.meta.total) {\n                if (reportType === \"cost\" /* cost */) {\n                    units = currentReport.meta.total.cost\n                        ? unitLookupKey(currentReport.meta.total.cost.units)\n                        : '';\n                }\n                else {\n                    units = currentReport.meta.total.usage\n                        ? unitLookupKey(currentReport.meta.total.usage.units)\n                        : '';\n                }\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(OcpReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            insights.chrome.appNavClick({ id: 'ocp', secondaryNav: true });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id } = this.props;\n            const tab = availableTabs[tabIndex];\n            this.props.updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, widgetId } = this.props;\n        this.props.updateTab(id, availableTabs[0]);\n        fetchReports(widgetId);\n    }\n    render() {\n        const { isHorizontal = false } = this.props;\n        return Boolean(isHorizontal)\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ selectWidgets, t, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.isHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n});\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsDashboard from 'pages/awsDashboard/awsDashboard';\nimport AzureDashboard from 'pages/azureDashboard/azureDashboard';\nimport OcpCloudDashboard from 'pages/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/ocpDashboard/ocpDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n        case \"ocpCloud\" /* ocpCloud */:\n            return 'ocpCloud';\n    }\n};\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            showPopover: false,\n        };\n        this.getAvailableTabs = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            if (awsProviders &&\n                awsProviders.meta &&\n                awsProviders.meta.count &&\n                (ocpProviders && ocpProviders.meta && ocpProviders.meta.count)) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocpCloud\" /* ocpCloud */,\n                });\n            }\n            if (ocpProviders && ocpProviders.meta && ocpProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (awsProviders && awsProviders.meta && awsProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"aws\" /* aws */,\n                });\n            }\n            if (azureProviders && azureProviders.meta && azureProviders.meta.count) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"azure\" /* azure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"ocpCloud\" /* ocpCloud */) {\n                return activeTabKey === index ? React.createElement(OcpCloudDashboard, null) : null;\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                return activeTabKey === index ? React.createElement(OcpDashboard, null) : null;\n            }\n            else if (currentTab === \"aws\" /* aws */) {\n                return activeTabKey === index ? React.createElement(AwsDashboard, null) : null;\n            }\n            else if (currentTab === \"azure\" /* azure */) {\n                return activeTabKey === index ? React.createElement(AzureDashboard, null) : null;\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"azure\" /* azure */) {\n                return t('overview.azure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n            else if (tab === \"ocpCloud\" /* ocpCloud */) {\n                return t('overview.ocp_cloud');\n            }\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, azureProviders, azureProvidersError, azureProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = azureProviders !== undefined &&\n            azureProviders.meta !== undefined &&\n            azureProviders.meta.count === 0 &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(\"div\", { className: css(styles.tabs) }, this.getTabs(availableTabs)))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(OverviewBase));\nexport default Overview;\n"],"sourceRoot":""}