{"version":3,"file":"fc91163f9e06346c1528.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx","webpack://koku-ui/./src/pages/views/explorer/index.ts","webpack://koku-ui/./src/pages/views/explorer/explorerWrapper.tsx","webpack://koku-ui/./node_modules/victory-stack/es/helper-methods.js","webpack://koku-ui/./node_modules/victory-stack/es/victory-stack.js"],"sourcesContent":["import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.AzureDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.AzureDetailsTitle)),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.AzureDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== 1 /* inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReportFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.AzureDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.gcp_project) {\n        return 'gcp_project';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrencyAbbreviation } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 40,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues(), fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nconst CostExplorerChart = injectIntl(CostExplorerChartBase);\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: messages.ExplorerDateRange, value: 'current_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'previous_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'last_thirty_days' },\n    { label: messages.ExplorerDateRange, value: 'last_sixty_days' },\n];\n// Todo: Show in-progress features in beta environment only\nif (isBetaFeature()) {\n    dateRangeOptions.push({ label: messages.ExplorerDateRange, value: 'last_ninety_days' });\n}\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nexport const infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nexport const infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OpenShift options\nexport const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"total\" /* total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_ninety_days\" /* lastNinetyDays */:\n            dateRange = getLast90DaysDate();\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, queryFromRoute, userAccess, }) => {\n    let result = queryFromRoute.perspective;\n    if (result) {\n        return result;\n    }\n    const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n        azureProvidersFetchStatus === 1 /* inProgress */ ||\n        gcpProvidersFetchStatus === 1 /* inProgress */ ||\n        ibmProvidersFetchStatus === 1 /* inProgress */ ||\n        ocpProvidersFetchStatus === 1 /* inProgress */;\n    if (!isLoading) {\n        if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n            result = \"ocp\" /* ocp */;\n        }\n        else if (isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus)) {\n            result = \"aws\" /* aws */;\n        }\n        else if (isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus)) {\n            result = \"azure\" /* azure */;\n        }\n        else if (isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus)) {\n            result = \"gcp\" /* gcp */;\n        }\n        else if (isIbmAvailable(userAccess, ibmProviders, ibmProvidersFetchStatus)) {\n            result = \"ibm\" /* ibm */;\n        }\n    }\n    return result;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            result = \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            result = \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n        case \"ibm\" /* ibm */:\n            return \"ibm\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { isFloat, isInt, } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { intl } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = intl.formatMessage(messages.ExplorerChartDate, {\n                date: getDate(computedItemDate),\n                month: getMonth(computedItemDate),\n            });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return Object.assign(Object.assign({ x: xVal, y: value === null ? null : yVal }, (value === null && { _y: 0 })), { date: computedItem.date, key: computedItem.id, name: computedItem.label ? computedItem.label : computedItem.id, units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined });\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, intl } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.ExplorerChartTitle, { value: perspective }))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = injectIntl(withRouter(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { currentItem, isDisabled } = this.props;\n            const { isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"dateRangeSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst DateRange = injectIntl(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, intl, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: option.label }),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            this.setState({ currentDateRange: value }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport, tagReportPathsType, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Fetch tags with largest date range available\n    const { start_date, end_date } = getLast60DaysDate();\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery({\n        start_date,\n        end_date,\n        key_only: true,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = injectIntl(withRouter(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { CostType } from 'pages/views/components/costType';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport { hasCloudProvider } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { getCostType } from 'utils/localStorage';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getRouteForQuery, getTagReportPathsType, infrastructureAwsOcpOptions, infrastructureAwsOptions, infrastructureAzureOcpOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureIbmOptions, infrastructureOcpCloudOptions, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { currentPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            const hasAwsProvider = hasCloudProvider(awsProviders, ocpProviders);\n            const hasAzureProvider = hasCloudProvider(azureProviders, ocpProviders);\n            const hasGcpProvider = hasCloudProvider(gcpProviders, ocpProviders);\n            const hasIbmProvider = hasCloudProvider(ibmProviders, ocpProviders);\n            // Dynamically show options if providers are available\n            const options = [];\n            if (ocp) {\n                options.push(...ocpOptions);\n            }\n            if (hasAwsProvider || hasAzureProvider || hasGcpProvider || hasIbmProvider) {\n                options.push(...infrastructureOcpCloudOptions);\n            }\n            if (aws) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (hasAwsProvider) {\n                options.push(...infrastructureAwsOcpOptions);\n            }\n            if (gcp) {\n                options.push(...infrastructureGcpOptions);\n            }\n            // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n            //\n            // if (hasGcpProvider) {\n            //   options.push(...infrastructureGcpOcpOptions);\n            // }\n            if (ibm) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (azure) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (hasAzureProvider) {\n                options.push(...infrastructureAzureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value }), (value === \"aws\" /* aws */ && { cost_type: getCostType() }));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Need param to restore cost type upon page refresh\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n            history.replace(getRouteForQuery(history, newQuery, false)); // Don't reset pagination\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { perspective } = this.props;\n        if (prevProps.perspective !== perspective) {\n            this.setState({\n                currentPerspective: this.props.perspective,\n            });\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, ibmProvidersFetchStatus, ibmUserAccess, groupBy, gcpProvidersFetchStatus, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupBySelected, perspective, query, intl, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        // Fetch tags with largest date range available\n        const { start_date, end_date } = getLast60DaysDate();\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ExplorerTitle)),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.perspectiveContainer },\n                this.getPerspective(noProviders),\n                React.createElement(\"div\", { style: styles.groupBy },\n                    React.createElement(GroupBy, { endDate: end_date, getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, startDate: start_date, tagReportPathsType: tagReportPathsType })),\n                perspective === \"aws\" /* aws */ && (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { onSelect: this.handleCostTypeSelected })))),\n            React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType })));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, order_by: queryFromRoute.order_by, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = injectIntl(withRouter(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, intl, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.Names, { count: 2 })\n                            : intl.formatMessage(messages.TagNames),\n                    },\n                ]\n                : [\n                    Object.assign({ cellTransforms: [nowrap], date: undefined, orderBy: groupById === 'account' && perspective === \"aws\" /* aws */ ? 'account_alias' : groupById, title: intl.formatMessage(messages.GroupByValueNames, { groupBy: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                ];\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                let isSortable = computedItems.length > 0;\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        isSortable = false;\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push(Object.assign({ cellTransforms: [nowrap], title: intl.formatMessage(messages.ExplorerChartDate, { date, month }) }, (isSortable && {\n                    date: mapId,\n                    orderBy: 'cost',\n                    transforms: [sortable],\n                })));\n            }\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[reportItem] && item[reportItem][reportItemValue]\n                            ? formatCurrency(item[reportItem][reportItemValue].value, item[reportItem][reportItemValue].units)\n                            : intl.formatMessage(messages.ChartNoData),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key && !column.date) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        else if (column.date === query.order_by[key]) {\n                            direction = query.order_by.cost === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const column = columns[index - 1];\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(column.orderBy, column.date, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.ExplorerTableAriaLabel), canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = injectIntl(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTagReportPathsType } from './explorerUtils';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, perspective, selectedItems, } = this.props;\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = injectIntl(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getComputedReportItemValueType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { perspective, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), perspective: perspective, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(getRouteForQuery(history, newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, date, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            if (date) {\n                newQuery.order_by.date = date;\n            }\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange,\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, perspective, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newPerspective = prevProps.perspective !== perspective;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newPerspective || newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ibmUserAccess, ibmUserAccessFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, intl, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */ ||\n            ibmUserAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = intl.formatMessage(messages.ExplorerTitle);\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupBySelected: this.handleGroupBySelected, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        awsProvidersFetchStatus,\n        azureProviders,\n        azureProvidersFetchStatus,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        queryFromRoute,\n        userAccess,\n    });\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = Object.assign({ filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), filter_by: queryFromRoute.filter_by || baseQuery.filter_by, group_by: groupBy, order_by: queryFromRoute.order_by, perspective,\n        dateRange,\n        start_date,\n        end_date }, (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","import ExplorerWrapper from './explorerWrapper';\nexport default ExplorerWrapper;\n","import { CostTypeWrapper } from 'pages/views/components/costType';\nimport React from 'react';\nimport Explorer from './explorer';\nconst ExplorerWrapper = props => {\n    return (React.createElement(CostTypeWrapper, null,\n        React.createElement(Explorer, Object.assign({}, props))));\n};\nexport default ExplorerWrapper;\n","import _orderBy from \"lodash/orderBy\";\nimport _keys from \"lodash/keys\";\nimport _assign from \"lodash/assign\";\nimport React from \"react\";\nimport { Helpers, Scale, Wrapper } from \"victory-core\";\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50\n}; // Assumes data in `datasets` is sorted by `Data.getData`.\n\nfunction fillData(props, datasets) {\n  var fillInMissingData = props.fillInMissingData;\n  var xMap = datasets.reduce(function (prev, dataset) {\n    dataset.forEach(function (datum) {\n      prev[datum._x instanceof Date ? datum._x.getTime() : datum._x] = true;\n    });\n    return prev;\n  }, {});\n\n  var xKeys = _keys(xMap).map(function (k) {\n    return +k;\n  });\n\n  var xArr = _orderBy(xKeys);\n\n  return datasets.map(function (dataset) {\n    var indexOffset = 0;\n    var isDate = dataset[0] && dataset[0]._x instanceof Date;\n    var filledInData = xArr.map(function (x, index) {\n      x = +x;\n      var datum = dataset[index - indexOffset];\n\n      if (datum) {\n        var x1 = isDate ? datum._x.getTime() : datum._x;\n\n        if (x1 === x) {\n          return datum;\n        } else {\n          indexOffset++;\n          var y = fillInMissingData ? 0 : null;\n          x = isDate ? new Date(x) : x;\n          return {\n            x: x,\n            y: y,\n            _x: x,\n            _y: y\n          };\n        }\n      } else {\n        var _y = fillInMissingData ? 0 : null;\n\n        x = isDate ? new Date(x) : x;\n        return {\n          x: x,\n          y: _y,\n          _x: x,\n          _y: _y\n        };\n      }\n    });\n    return filledInData;\n  });\n}\n\nfunction getY0(datum, index, datasets) {\n  if (datum.y0) {\n    return datum.y0;\n  }\n\n  var y = datum._y;\n  var group = datum._group;\n  var firstDatasetBaseline = datasets[0].map(function (d) {\n    return d.y0;\n  });\n  var previousDatasets = datasets.slice(0, index);\n  var previousPoints = previousDatasets.reduce(function (prev, dataset) {\n    return prev.concat(dataset.filter(function (previousDatum) {\n      return datum._x instanceof Date ? previousDatum._x.getTime() === datum._x.getTime() : previousDatum._x === datum._x;\n    }).map(function (previousDatum) {\n      return previousDatum._y || 0;\n    }));\n  }, []);\n  var y0 = previousPoints.length && previousPoints.reduce(function (memo, value) {\n    var sameSign = y < 0 && value < 0 || y >= 0 && value >= 0;\n    return sameSign ? +value + memo : memo;\n  }, firstDatasetBaseline[group] || 0);\n  return previousPoints.some(function (point) {\n    return point instanceof Date;\n  }) ? new Date(y0) : y0;\n}\n/* eslint-disable no-nested-ternary */\n\n\nfunction addLayoutData(props, datasets, index) {\n  var xOffset = props.xOffset || 0;\n  return datasets[index].map(function (datum) {\n    var yOffset = getY0(datum, index, datasets) || 0;\n    return _assign({}, datum, {\n      _y0: !(datum._y instanceof Date) ? yOffset : yOffset ? new Date(yOffset) : datum._y,\n      _y1: datum._y === null ? null : datum._y instanceof Date ? new Date(+datum._y + +yOffset) : datum._y + yOffset,\n      _x1: datum._x === null ? null : datum._x instanceof Date ? new Date(+datum._x + +xOffset) : datum._x + xOffset\n    });\n  });\n}\n/* eslint-enable no-nested-ternary */\n\n\nfunction stackData(props, childComponents) {\n  var dataFromChildren = Wrapper.getDataFromChildren(props, childComponents);\n  var filterNullChildData = dataFromChildren.map(function (dataset) {\n    return dataset.filter(function (datum) {\n      return datum._x !== null && datum._y !== null;\n    });\n  });\n  var datasets = fillData(props, filterNullChildData);\n  return datasets.map(function (d, i) {\n    return addLayoutData(props, datasets, i);\n  });\n}\n\nexport function getCalculatedProps(props, childComponents) {\n  childComponents = childComponents || React.Children.toArray(props.children);\n  var role = \"stack\";\n  props = Helpers.modifyProps(props, fallbackProps, role);\n  var style = Wrapper.getStyle(props.theme, props.style, role);\n  var categories = props.categories || Wrapper.getCategories(props, childComponents);\n  var datasets = props.datasets || stackData(props, childComponents);\n  var children = childComponents.map(function (c, i) {\n    return React.cloneElement(c, {\n      data: datasets[i]\n    });\n  });\n  var domain = {\n    x: Wrapper.getDomain(_assign({}, props, {\n      categories: categories\n    }), \"x\", children),\n    y: Wrapper.getDomain(_assign({}, props, {\n      categories: categories\n    }), \"y\", children)\n  };\n  var range = props.range || {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var baseScale = {\n    x: Scale.getScaleFromProps(props, \"x\") || Wrapper.getScale(props, \"x\"),\n    y: Scale.getScaleFromProps(props, \"y\") || Wrapper.getScale(props, \"y\")\n  };\n  var scale = {\n    x: baseScale.x.domain(domain.x).range(props.horizontal ? range.y : range.x),\n    y: baseScale.y.domain(domain.y).range(props.horizontal ? range.x : range.y)\n  };\n  var _props = props,\n      colorScale = _props.colorScale,\n      horizontal = _props.horizontal;\n  return {\n    datasets: datasets,\n    categories: categories,\n    range: range,\n    domain: domain,\n    horizontal: horizontal,\n    scale: scale,\n    style: style,\n    colorScale: colorScale,\n    role: role\n  };\n}\n\nfunction getLabels(props, datasets, index) {\n  if (!props.labels) {\n    return undefined;\n  }\n\n  return datasets.length === index + 1 ? props.labels : undefined;\n}\n\nexport function getChildProps(props, calculatedProps) {\n  var categories = calculatedProps.categories,\n      domain = calculatedProps.domain,\n      range = calculatedProps.range,\n      scale = calculatedProps.scale,\n      horizontal = calculatedProps.horizontal;\n  return {\n    height: props.height,\n    width: props.width,\n    padding: Helpers.getPadding(props),\n    standalone: false,\n    theme: props.theme,\n    categories: categories,\n    domain: domain,\n    range: range,\n    scale: scale,\n    horizontal: horizontal\n  };\n}\n\nfunction getColorScale(props, child) {\n  var role = child.type && child.type.role;\n  var colorScaleOptions = child.props.colorScale || props.colorScale;\n\n  if (role !== \"group\" && role !== \"stack\") {\n    return undefined;\n  }\n\n  return props.theme ? colorScaleOptions || props.theme.props.colorScale : colorScaleOptions;\n}\n\nexport function getChildren(props, childComponents, calculatedProps) {\n  props = Helpers.modifyProps(props, fallbackProps, \"stack\");\n  childComponents = childComponents || React.Children.toArray(props.children);\n  calculatedProps = calculatedProps || getCalculatedProps(props, childComponents);\n  var _calculatedProps = calculatedProps,\n      datasets = _calculatedProps.datasets;\n  var childProps = getChildProps(props, calculatedProps);\n  var parentName = props.name || \"stack\";\n  return childComponents.map(function (child, index) {\n    var role = child.type && child.type.role;\n    var data = datasets[index];\n    var style = Wrapper.getChildStyle(child, index, calculatedProps);\n    var labels = props.labels ? getLabels(props, datasets, index) : child.props.labels;\n    var name = child.props.name || \"\".concat(parentName, \"-\").concat(role, \"-\").concat(index);\n    return React.cloneElement(child, _assign({\n      key: \"\".concat(name, \"-key-\").concat(index),\n      labels: labels,\n      name: name,\n      domainPadding: child.props.domainPadding || props.domainPadding,\n      theme: props.theme,\n      labelComponent: props.labelComponent || child.props.labelComponent,\n      style: style,\n      colorScale: getColorScale(props, child),\n      data: data,\n      polar: props.polar\n    }, childProps));\n  });\n}","import _isEmpty from \"lodash/isEmpty\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Helpers, VictoryContainer, VictoryTheme, CommonProps, Wrapper, PropTypes as CustomPropTypes } from \"victory-core\";\nimport { VictorySharedEvents } from \"victory-shared-events\";\nimport { getChildren, getCalculatedProps } from \"./helper-methods\";\nimport isEqual from \"react-fast-compare\";\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50\n};\n\nvar VictoryStack =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VictoryStack, _React$Component);\n\n  function VictoryStack(props) {\n    var _this;\n\n    _classCallCheck(this, VictoryStack);\n\n    _this = _possibleConstructorReturn(this, (VictoryStack.__proto__ || Object.getPrototypeOf(VictoryStack)).call(this, props));\n\n    if (props.animate) {\n      _this.state = {\n        nodesShouldLoad: false,\n        nodesDoneLoad: false,\n        animating: true\n      };\n      _this.setAnimationState = Wrapper.setAnimationState.bind(_assertThisInitialized(_this));\n    }\n\n    return _this;\n  }\n\n  _createClass(VictoryStack, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      if (this.props.animate) {\n        if (!isEqual(this.props, nextProps)) {\n          this.setAnimationState(this.props, nextProps);\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getNewChildren\",\n    value: function getNewChildren(props, childComponents, calculatedProps) {\n      var children = getChildren(props, childComponents, calculatedProps);\n      var getAnimationProps = Wrapper.getAnimationProps.bind(this);\n      var newChildren = children.map(function (child, index) {\n        var childProps = _assign({\n          animate: getAnimationProps(props, child, index)\n        }, child.props);\n\n        return React.cloneElement(child, childProps);\n      });\n      /*\n        reverse render order for children of `VictoryStack` so that higher children in the stack\n        are rendered behind lower children. This looks nicer for stacked bars with cornerRadius, and\n        areas with strokes\n      */\n\n      return newChildren.reverse();\n    }\n  }, {\n    key: \"renderContainer\",\n    value: function renderContainer(containerComponent, props) {\n      var containerProps = _defaults({}, containerComponent.props, props);\n\n      return React.cloneElement(containerComponent, containerProps);\n    }\n  }, {\n    key: \"getContainerProps\",\n    value: function getContainerProps(props, calculatedProps) {\n      var width = props.width,\n          height = props.height,\n          standalone = props.standalone,\n          theme = props.theme,\n          polar = props.polar,\n          horizontal = props.horizontal,\n          name = props.name;\n      var domain = calculatedProps.domain,\n          scale = calculatedProps.scale,\n          style = calculatedProps.style,\n          origin = calculatedProps.origin;\n      return {\n        domain: domain,\n        scale: scale,\n        width: width,\n        height: height,\n        standalone: standalone,\n        theme: theme,\n        style: style.parent,\n        horizontal: horizontal,\n        polar: polar,\n        origin: origin,\n        name: name\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var role = this.constructor.role;\n      var props = this.state && this.state.nodesWillExit ? this.state.oldProps || this.props : this.props;\n      var modifiedProps = Helpers.modifyProps(props, fallbackProps, role);\n      var eventKey = modifiedProps.eventKey,\n          containerComponent = modifiedProps.containerComponent,\n          standalone = modifiedProps.standalone,\n          groupComponent = modifiedProps.groupComponent,\n          externalEventMutations = modifiedProps.externalEventMutations;\n      var childComponents = React.Children.toArray(modifiedProps.children);\n      var calculatedProps = getCalculatedProps(modifiedProps, childComponents);\n      var newChildren = this.getNewChildren(modifiedProps, childComponents, calculatedProps);\n      var containerProps = standalone ? this.getContainerProps(modifiedProps, calculatedProps) : {};\n      var container = standalone ? this.renderContainer(containerComponent, containerProps) : groupComponent;\n      var events = Wrapper.getAllEvents(props);\n\n      if (!_isEmpty(events)) {\n        return React.createElement(VictorySharedEvents, {\n          container: container,\n          eventKey: eventKey,\n          events: events,\n          externalEventMutations: externalEventMutations\n        }, newChildren);\n      }\n\n      return React.cloneElement(container, container.props, newChildren);\n    }\n  }]);\n\n  return VictoryStack;\n}(React.Component);\n\nObject.defineProperty(VictoryStack, \"displayName\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: \"VictoryStack\"\n});\nObject.defineProperty(VictoryStack, \"role\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: \"stack\"\n});\nObject.defineProperty(VictoryStack, \"propTypes\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: _objectSpread({}, CommonProps.baseProps, {\n    bins: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([CustomPropTypes.nonNegative, PropTypes.instanceOf(Date)])), CustomPropTypes.nonNegative]),\n    categories: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.shape({\n      x: PropTypes.arrayOf(PropTypes.string),\n      y: PropTypes.arrayOf(PropTypes.string)\n    })]),\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n    colorScale: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.oneOf([\"grayscale\", \"qualitative\", \"heatmap\", \"warm\", \"cool\", \"red\", \"green\", \"blue\"])]),\n    fillInMissingData: PropTypes.bool,\n    horizontal: PropTypes.bool,\n    labelComponent: PropTypes.element,\n    labels: PropTypes.oneOfType([PropTypes.func, PropTypes.array]),\n    style: PropTypes.shape({\n      parent: PropTypes.object,\n      data: PropTypes.object,\n      labels: PropTypes.object\n    }),\n    xOffset: PropTypes.number\n  })\n});\nObject.defineProperty(VictoryStack, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    containerComponent: React.createElement(VictoryContainer, null),\n    groupComponent: React.createElement(\"g\", null),\n    standalone: true,\n    theme: VictoryTheme.grayscale,\n    fillInMissingData: true\n  }\n});\nObject.defineProperty(VictoryStack, \"expectedComponents\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: [\"groupComponent\", \"containerComponent\", \"labelComponent\"]\n});\nObject.defineProperty(VictoryStack, \"getChildren\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: getChildren\n});\nexport { VictoryStack as default };"],"names":["styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","intl","options","props","selections","map","option","push","toString","formatMessage","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","variant","SelectVariant","SelectOption","key","event","onSelected","setState","render","Title","headingLevel","size","messages","Perspective","injectIntl","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","costValue","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","headerContent","justifyContent","headerContentLeft","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupBySelected","providersError","showContent","meta","count","hasCost","total","cost","TitleSizes","showTags","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","transforms","sortable","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","selectable","desc","cells","disableSelection","selected","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui","account","cluster","gcp_project","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChartBase","containerRef","observer","noop","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","getUnits","datum","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","sectionWidth","getChart","barWidth","has","y","ChartBar","formatter","formatOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","max","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","modVal","i","str","substr","maxChars","getTickValue","t","handleResize","clientWidth","current","componentWillUnmount","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","CostExplorerChart","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpCloudOptions","ocpOptions","getComputedReportItemType","perspective","result","getComputedReportItemValueType","getDateRange","dateRangeType","endDate","Date","startDate","dateRange","setDate","setMonth","getMonth","end_date","start_date","getDateRangeDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","getDate","month","yVal","parseFloat","_y","getChartDatums","computedReportItemType","computedReportItemValueType","chartDatums","datums","Map","Array","from","padChartDatums","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","skeleton","padDate","chartDatum","cost_type","ExplorerChartConnect","ExplorerChart","DateRangeBase","onItemClicked","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgQueryString","orgReportPathsType","tagQueryString","orgReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","costLabel","costLabelDate","global_Color_200","costType","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getPerspective","awsProviders","azureProviders","gcpProviders","ibmProviders","ocpProviders","currentPerspective","aws","isAwsAvailable","azure","isAzureAvailable","gcp","isGcpAvailable","ibm","isIbmAvailable","ocp","isOcpAvailable","hasAwsProvider","hasAzureProvider","hasGcpProvider","hasIbmProvider","handlePerspectiveSelected","onPerspectiveClicked","handleCostTypeSelected","awsProvidersFetchStatus","userAccess","azureProvidersFetchStatus","gcpProvidersFetchStatus","ibmProvidersFetchStatus","ibmUserAccess","ocpProvidersFetchStatus","noProviders","getResourcePathsType","showOrgs","userAccessQueryString","userAccessError","userAccessFetchStatus","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","isSortable","rowItem","get","set","mapIdDate","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","showTimeScope","slice","handlePerspectiveClick","newPerspective","getPerspectiveDefault","fallbackProps","stackData","childComponents","filterNullChildData","dataset","_x","datasets","fillInMissingData","xMap","reduce","prev","getTime","xKeys","k","xArr","indexOffset","isDate","fillData","d","xOffset","yOffset","y0","group","_group","firstDatasetBaseline","previousPoints","concat","previousDatum","memo","some","point","getY0","_y0","_y1","_x1","addLayoutData","getCalculatedProps","children","role","categories","range","baseScale","scale","horizontal","_props","getColorScale","child","type","colorScaleOptions","getChildren","calculatedProps","childProps","standalone","getChildProps","parentName","getLabels","polar","_defineProperty","obj","defineProperty","enumerable","configurable","writable","_defineProperties","target","descriptor","_assertThisInitialized","self","ReferenceError","VictoryStack","_React$Component","_this","instance","Constructor","TypeError","_classCallCheck","call","_possibleConstructorReturn","__proto__","getPrototypeOf","animate","nodesShouldLoad","nodesDoneLoad","animating","setAnimationState","protoProps","subClass","superClass","prototype","create","setPrototypeOf","_inherits","nextProps","getAnimationProps","reverse","containerProps","origin","parent","nodesWillExit","oldProps","modifiedProps","eventKey","groupComponent","externalEventMutations","newChildren","getNewChildren","getContainerProps","renderContainer","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","_objectSpread","bins"],"sourceRoot":""}