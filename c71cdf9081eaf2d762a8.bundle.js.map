{"version":3,"sources":["webpack:///./src/pages/ocpDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsTagView.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpDetails/exportModal.styles.ts","webpack:///./src/pages/ocpDetails/exportModal.tsx","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/pages/ocpDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpDetails/historicalChart.tsx","webpack:///./src/pages/ocpDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpDetails/historicalModal.tsx","webpack:///./src/pages/ocpDetails/noRatesState.styles.ts","webpack:///./src/pages/ocpDetails/noRatesState.tsx","webpack:///./src/pages/ocpDetails/priceListTable.tsx","webpack:///./src/pages/ocpDetails/priceListModal.tsx","webpack:///./src/pages/ocpDetails/detailsActions.tsx","webpack:///./src/pages/ocpDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.tsx","webpack:///./src/pages/ocpDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidget.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpDetails/detailsTable.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.styles.ts","webpack:///./src/pages/ocpDetails/ocpDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","isEqual","obj1","obj2","JSON","stringify","split","join","getNoDataForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getForDateRangeString","getSinceDateRangeString","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","defaultFilters","tag","DetailsDataToolbar","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","indexOf","api_query","getActiveFilters","query","filter_by","keys","isArray","substring","onDelete","filterType","setState","prevState","filter","s","_filterType","onFilterRemoved","onCategoryClick","currentCategory","onCategorySelect","event","currentTagKey","undefined","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","width","checked","target","prevSelections","getExportButton","isExportDisabled","DataToolbarItem","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","prevProps","equal","index","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","Set","val","pagination","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","breakpointMods","modifier","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","itemsPerRow","labels","fontFamily","esm","minWidth","legendColorScale","previousRequestData","previousUsageData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","usageChart_UsageChart","containerRef","createRef","hiddenSeries","initDatum","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","ChartArea","has","interpolation","getLegend","legendItemsPerRow","ChartLegend","colorScale","getLegendData","gutter","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","OcpReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","OcpReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","Tooltip","content","enableFlip","getCostLayout","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","skeleton","OcpReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","costKey","responsive","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","xAxisLabel","yAxisLabel","costValue","costLabelUnit","costLabelDate","header","info","verticalAlign","infoIcon","infoTitle","fontWeight","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","ocpQuery","resolution","time_scope_units","time_scope_value","ocpReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","ocpReportSummary","_item","DetailsWidgetModal","parentGroupBy","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_mapStateToProps","error","ocpExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","historicalCostChart_styles_styles","historicalCostChart_HistoricalCostChart","historicalChart_styles_chartStyles","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpReportsActions","HistoricalChart","getSkeleton","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpDashboard","selectCurrentWidgets","HistoricalModal","noRatesState_styles_styles","NoRatesState","money_check_alt_icon","metric","priceListTable","rates","notAvailableText","Table","cells","rows","range_unit","value_unit","range_value","period","Header","Body","priceListModal","priceListProvider","find","p","providerUuid","uuid","priceList","store_priceList","ratesPerProvider","priceListError","priceListStatus","fetch","fetchPriceList","errorState","priceListRates","close","renderContent","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isPriceListModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getPriceListModal","handlePriceListModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handlePriceListModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","freeSpace","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","getCpuChart","cpuDatum","getChartDatumWithCapacity","getChartDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","getItemsPerRow","maxDomain","isDatumEmpty","minDomain","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","ranges","qualitativeRangeLegendData","titlePosition","getFreeSpace","getMemoryChart","memoryDatum","hasRange","range","hasUsage","hasTotal","hasLimit","trunc","limitUnits","hasRequest","requestUnits","hasCapacity","capacityUnits","unusedRequestCapacity","unusedUsageCapacity","unusedRequestCapacityPercentage","unusedUsageCapacityPercentage","TextContent","TextList","dl","TextListItem","dt","dd","percentage","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","summary","viewAllContainer","detailsWidget_reportType","detailsWidget_mapStateToProps","detailsWidget_mapDispatchToProps","DetailsWidget","isDetailsChartModalOpen","currentTab","getSummary","getViewAll","handleDetailsChartModalOpen","button","handleDetailsChartModalClose","DetailsTableItem","DetailsTable","columns","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getDerivedCost","getTotalCost","getActions","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","showPercentage","showValue","iconOverride","getSortBy","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","exportText","detailsDataToolbar","ocpDetails_styles_styles","ocpDetails","paginationContainer","tableContainer","ocpDetails_reportType","ocpDetails_baseQuery","ocpDetails_mapStateToProps","ocpDetails_mapDispatchToProps","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","history","found","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","noProvidersState","loadingState"],"mappings":"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","file":"c71cdf9081eaf2d762a8.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpDetails from './ocpDetails';\nexport default hot(module)(OcpDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { tagKey } from 'api/query';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return undefined;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                let filterType = type.toLowerCase();\n                // Workaround for Azure IDs\n                if (filterType === 'account' && this.state.filters.subscription_guid) {\n                    filterType = 'subscription_guid';\n                }\n                else if (filterType === 'region' &&\n                    this.state.filters.resource_location) {\n                    filterType = 'resource_location';\n                }\n                else if (filterType === 'service' && this.state.filters.service_name) {\n                    filterType = 'service_name';\n                }\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: t(`filter_by.values.${categoryOption.label}`), chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if (event.key && event.key !== 'Enter') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            // Width prop is a workaround for https://github.com/patternfly/patternfly-react/issues/3574\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder'), width: 200 }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions, t } = this.props;\n        const { currentCategory, isCategoryDropdownOpen } = this.state;\n        const index = currentCategory ? currentCategory.indexOf('tag') : -1;\n        const label = index !== -1\n            ? t('filter_by.values.tag')\n            : t(`filter_by.values.${currentCategory}`);\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, t(`filter_by.values.${option.label}`)))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            categoryOptions &&\n                                categoryOptions\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        React.createElement(DataToolbarGroup, null, this.getExportButton())),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", responsive: false, style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        childName: 'previousLimit',\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        childName: 'currentLimit',\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { parseQuery } from 'api/ocpQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'project',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(tag => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${tag.key}`, onClick: () => this.handleGroupByClick(`${tagKey}${tag.key}`) }, t('group_by.tag_key', { value: tag.key }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let derivedCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            derivedCost = formatValue(report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_details.title')),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_details.total_cost_tooltip', {\n                            derivedCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_details.derived_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.derived_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetView } from './detailsWidgetView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.widget_modal_title', {\n                parentGroupBy,\n                name: item.label,\n                groupBy,\n            }) },\n            React.createElement(DetailsWidgetView, { groupBy: parentGroupBy, item: item })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpExportActions, ocpExportSelectors } from 'store/ocpExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpExportSelectors.selectExportError(state),\n        export: ocpExportSelectors.selectExport(state),\n        fetchStatus: ocpExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport { getCostRangeString, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n            const costKey = 'chart.cost_legend_label';\n            const costInfrastructureKey = 'chart.cost_infrastructure_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousCostData, costKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousCostData,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentCostData, costKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentCostData,\n                    },\n                    {\n                        childName: 'previousInfrastructureCost',\n                        data: previousInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(previousInfrastructureCostData, costInfrastructureKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousInfrastructureCostData,\n                    },\n                    {\n                        childName: 'currentInfrastructureCost',\n                        data: currentInfrastructureCostData,\n                        legendItem: {\n                            name: getCostRangeString(currentInfrastructureCostData, costInfrastructureKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentInfrastructureCostData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 700\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !==\n                this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxCurrentRequest = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxPreviousLimit = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxPreviousRequest = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxPreviousLimit, maxPreviousRequest);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData, } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0\n            ? Math.max(currentRequestDate, previousRequestDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalCostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpReportsActions from 'store/ocpReports/ocpReportsActions';\nimport * as ocpReportsSelectors from 'store/ocpReports/ocpReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { containerHeight: chartStyles.chartContainerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureCostData, title: t('ocp_details.historical.cost_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_details.historical.cpu_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_details.historical.memory_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '50vh',\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, TitleSize, } from '@patternfly/react-core';\nimport { MoneyCheckAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './noRatesState.styles';\nconst NoRatesStateBase = ({ t, cluster }) => {\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: MoneyCheckAltIcon }),\n            React.createElement(Title, { size: TitleSize.lg }, t('no_rates_state.title')),\n            React.createElement(EmptyStateBody, null, t('no_rates_state.desc', { cluster })))));\n};\nexport const NoRatesState = translate()(NoRatesStateBase);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nfunction getUsageRangeText(metric, t) {\n    return metric.range_value[0] === null && metric.range_value[1] === null\n        ? t('ocp_details.price_list.modal.no_range_set')\n        : `${metric.range_value[0] || ' '} - ${metric.range_value[2] || ' '} ${metric.range_unit}`;\n}\nconst PriceListTable = ({ rates, t }) => {\n    const notAvailableText = t('ocp_details.price_list.modal.not_available');\n    return (React.createElement(Table, { \"aria-label\": \"price-list-table\", cells: [\n            t('ocp_details.price_list.modal.metric'),\n            t('ocp_details.price_list.modal.value'),\n            t('ocp_details.price_list.modal.applied_usage_range'),\n            t('ocp_details.price_list.modal.applied_usage_date_range'),\n        ], rows: rates.map(metric => [\n            t(`ocp_details.price_list.modal.${metric.display}`, {\n                index: metric.index + 1,\n                unit: metric.range_unit,\n            }),\n            metric.value\n                ? formatCurrency(metric.value, metric.value_unit)\n                : notAvailableText,\n            getUsageRangeText(metric, t),\n            t(`ocp_details.price_list.modal.${metric.period}`),\n        ]) },\n        React.createElement(TableHeader, null),\n        React.createElement(TableBody, null)));\n};\nexport default PriceListTable;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { priceListActions, priceListSelectors } from 'store/priceList';\nimport { providersSelectors } from 'store/providers';\nimport { styles as chartStyles } from './historicalChart.styles';\nimport { modalOverride, styles } from './historicalModal.styles';\nimport { NoRatesState } from './noRatesState';\nimport PriceListTable from './priceListTable';\nclass PriceListModalBase extends React.Component {\n    componentDidUpdate() {\n        const { fetch, isOpen, providers, priceListStatus: status, name, } = this.props;\n        if (isOpen && status !== 1 /* inProgress */) {\n            const priceListProvider = providers.data.find(p => p.name === name);\n            fetch(priceListProvider ? priceListProvider.uuid : null);\n        }\n    }\n    renderContent() {\n        const { t, providers, name, priceListStatus, priceListError, priceList, } = this.props;\n        if (priceListStatus !== 2 /* complete */) {\n            return (React.createElement(Skeleton, { className: css(chartStyles.chartSkeleton), size: SkeletonSize.md }));\n        }\n        if (priceListError !== null) {\n            return React.createElement(ErrorState, { error: priceListError });\n        }\n        const priceListProvider = providers.data.find(p => p.name === name);\n        const priceListRates = priceListProvider && priceList[priceListProvider.uuid];\n        return priceListRates ? (React.createElement(PriceListTable, { t: t, rates: priceListRates })) : (React.createElement(NoRatesState, { cluster: name.toString() }));\n    }\n    render() {\n        const { t, isOpen, close, name } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: () => close(false), title: t('ocp_details.price_list.modal.title', { name }) }, this.renderContent()));\n    }\n}\nconst PriceListModal = connect(createMapStateToProps((state, props) => {\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, 'type=OCP');\n    const priceListProvider = providers.data.find(p => p.name === props.name);\n    const providerUuid = priceListProvider ? priceListProvider.uuid : null;\n    return {\n        priceList: priceListSelectors.ratesPerProvider(state, providerUuid),\n        priceListError: priceListSelectors.error(state, providerUuid),\n        priceListStatus: priceListSelectors.status(state, providerUuid),\n        providers,\n    };\n}), {\n    fetch: priceListActions.fetchPriceList,\n})(translate()(PriceListModalBase));\nexport default PriceListModal;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nimport PriceListModal from './priceListModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isPriceListModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getPriceListModal = () => {\n            const { item: { label }, } = this.props;\n            return (React.createElement(PriceListModal, { name: label, isOpen: this.state.isPriceListModalOpen, close: this.handlePriceListModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handlePriceListModalClose = (isOpen) => {\n            this.setState({ isPriceListModalOpen: isOpen });\n        };\n        this.handlePriceListModalOpen = () => {\n            this.setState({ isPriceListModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handlePriceListModalClose = this.handlePriceListModalClose.bind(this);\n        this.handlePriceListModalOpen = this.handlePriceListModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: groupBy.includes(tagKey), onClick: this.handlePriceListModalOpen }, t('ocp_details.actions.price_list')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal(),\n            this.getPriceListModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    freeSpace: {\n        marginBottom: global_spacer_lg.value,\n        marginLeft: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getCpuChart = () => {\n            const { cpuReportFetchStatus, cpuReport, groupBy, t } = this.props;\n            const { width } = this.state;\n            const cpuDatum = groupBy === 'cluster'\n                ? this.getChartDatumWithCapacity(cpuReport, 'cpu')\n                : this.getChartDatum(cpuReport, 'cpu');\n            if (!cpuReport || cpuDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                        ? [\n                            {\n                                tooltip: cpuDatum.limit.tooltip,\n                                y: cpuDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(cpuDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: cpuDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: cpuDatum.ranges[0].tooltip,\n                                y: cpuDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                        ? [{ name: cpuDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(cpuReport, 'cpu')))));\n        };\n        this.getItemsPerRow = () => {\n            const { width } = this.state;\n            return width > 600 ? 3 : width > 450 ? 2 : 1;\n        };\n        this.getMemoryChart = () => {\n            const { memoryReportFetchStatus, memoryReport, groupBy, t } = this.props;\n            const { width } = this.state;\n            const memoryDatum = groupBy === 'cluster'\n                ? this.getChartDatumWithCapacity(memoryReport, 'memory')\n                : this.getChartDatum(memoryReport, 'memory');\n            if (!memoryReport || memoryDatum.usage.length === 0) {\n                return null;\n            }\n            return (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                        ? [\n                            {\n                                tooltip: memoryDatum.limit.tooltip,\n                                y: memoryDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                        ? [{ name: memoryDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: this.getItemsPerRow(), maxDomain: this.isDatumEmpty(memoryDatum) ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: memoryDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: memoryDatum.ranges[0].tooltip,\n                                y: memoryDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                        ? [{ name: memoryDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(memoryReport, 'memory')))));\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n        this.isDatumEmpty = (datum) => {\n            let hasRange = false;\n            for (const range of datum.ranges) {\n                if (range.value) {\n                    hasRange = true;\n                    break;\n                }\n            }\n            let hasUsage = false;\n            for (const usage of datum.usage) {\n                if (usage.value) {\n                    hasUsage = true;\n                    break;\n                }\n            }\n            return !(datum.limit.value || hasRange || hasUsage);\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = t(`units.${unitLookupKey(hasCapacity ? report.meta.total.capacity.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace(report, labelKey) {\n        const { t } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        // Show negative values https://github.com/project-koku/koku-ui/issues/1214\n        const unusedRequestCapacity = capacity - request;\n        const unusedUsageCapacity = capacity - usage;\n        let unusedRequestCapacityPercentage = request > 0 ? (request / capacity) * 100 : 0;\n        if (unusedRequestCapacityPercentage > 100) {\n            unusedRequestCapacityPercentage = 100 - unusedRequestCapacityPercentage;\n        }\n        let unusedUsageCapacityPercentage = capacity > usage ? (usage / capacity) * 100 : 0;\n        if (unusedUsageCapacityPercentage > 100) {\n            unusedUsageCapacityPercentage = 100 - unusedUsageCapacityPercentage;\n        }\n        return (React.createElement(TextContent, { className: css(styles.freeSpace) },\n            React.createElement(TextList, { component: TextListVariants.dl },\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_details.bullet.${labelKey}_usage_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_details.bullet.${labelKey}_usage_unused`, {\n                    percentage: formatValue(unusedUsageCapacityPercentage, usageUnits),\n                    value: unusedUsageCapacity,\n                    units: usageUnits,\n                })),\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_details.bullet.${labelKey}_requests_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_details.bullet.${labelKey}_requests_unused`, {\n                    percentage: formatValue(unusedRequestCapacityPercentage, requestUnits),\n                    value: unusedRequestCapacity,\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            this.getCpuChart(),\n            this.getMemoryChart()));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    summary: {\n        paddingTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpReportItems } from 'utils/getComputedOcpReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isDetailsChartModalOpen: false,\n        };\n        this.getItems = (currentTab) => {\n            const { report } = this.props;\n            const computedItems = getComputedOcpReportItems({\n                report,\n                idKey: currentTab,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportFetchStatus, t } = this.props;\n            return (React.createElement(React.Fragment, null,\n                t('group_by.details', { groupBy: 'project' }),\n                React.createElement(\"div\", { className: css(styles.summary) },\n                    React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(OcpReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label.toString(), totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost })))),\n                    this.getViewAll())));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, t } = this.props;\n            const { isDetailsChartModalOpen } = this.state;\n            const currentTab = 'project';\n            const computedItems = this.getItems(currentTab);\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleDetailsChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_details.view_all', { value: currentTab })),\n                    React.createElement(DetailsWidgetModal, { groupBy: currentTab, isOpen: isDetailsChartModalOpen, item: item, onClose: this.handleDetailsChartModalClose, parentGroupBy: groupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleDetailsChartModalClose = (isOpen) => {\n            this.setState({ isDetailsChartModalOpen: isOpen });\n        };\n        this.handleDetailsChartModalOpen = event => {\n            this.setState({ isDetailsChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { reportFetchStatus } = this.props;\n        return (React.createElement(\"div\", null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (this.getSummary())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        Boolean(groupBy === 'cluster') && (React.createElement(DetailsWidget, { groupBy: groupBy, item: item })))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst DetailsTableItem = translate()(connect()(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpQuery';\nimport { tagKey } from 'api/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'derived_cost',\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const derivedCost = this.getDerivedCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, derivedCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getDerivedCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.derivedCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.derivedCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/ocpQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { isEqual } from 'utils/equal';\nconst categoryOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n    { label: 'tag', value: 'tag' },\n];\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { exportText, groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: categoryOptions, exportText: exportText, groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { tagKey } from 'api/query';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[filterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[filterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[filterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[filterType] = [\n                        newQuery.filter_by[filterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            if (filterType === null) {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (filterValue === null) {\n                newQuery.filter_by[filterType] = undefined; // Clear all values\n            }\n            else if (Array.isArray(newQuery.filter_by[filterType])) {\n                const index = newQuery.filter_by[filterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[filterType] = [\n                        ...query.filter_by[filterType].slice(0, index),\n                        ...query.filter_by[filterType].slice(index + 1),\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = undefined;\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"sourceRoot":""}