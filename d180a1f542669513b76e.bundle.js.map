{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/commonChart/chartUtils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/sort.ts","webpack:///./src/testIds.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/trendChart/trendChart.styles.ts","webpack:///./src/components/trendChart/trendChart.tsx","webpack:///./src/components/tabs/tabContent.tsx","webpack:///./src/components/tabs/tabItem.styles.ts","webpack:///./src/components/tabs/tabItem.tsx","webpack:///./src/components/tabs/tabNavigation.styles.ts","webpack:///./src/components/tabs/tabNavigation.tsx","webpack:///./src/components/tabs/tabs.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/usageChart/usageChart.styles.ts","webpack:///./src/components/usageChart/usageChart.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/link/link.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/overview/emptyState.styles.ts","webpack:///./src/pages/overview/emptyState.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/components/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/ocpDashboard/index.ts","webpack:///./src/pages/awsDashboard/index.ts","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","split","toLowerCase","formatValue","value","options","lookup","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","transformAwsReport","report","type","key","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_6__","map","i","createDatum","total","reduce","acc","d","prevValue","length","y","transformOcpReport","reportItem","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_7__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","id","label","Number","parseFloat","isInt","name","units","getDateRangeString","datums","firstOfMonth","lastOfMonth","start","end","today","Date","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","monthName","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","startDate","endDate","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_5__","i18next__WEBPACK_IMPORTED_MODULE_4__","t","getTooltipLabel","datum","formatOptions","toString","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","direction","itemMap","visitDataPoint","dataPoint","values","forEach","capacity","charge","cluster_alias","limit","request","usage","assign","app","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","getIdKeyForGroupBy","groupBy","project","cluster","node","getValueForItem","item","sort","array","a","b","aVal","bVal","__webpack_require__","__webpack_exports__","getTestProps","data-testid","testIds","details","historical_data_btn","tag_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","empty_state_add_btn","name_input","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","groups","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account_alias","group","account","instance_type","region","service","chartStyles","axis","axisLabel","padding","grid","stroke","ticks","tickLabels","fontSize","colorScale","esm","previousMonth","fill","currentMonth","styles","StyleSheet","create","reportSummaryTrend",":not(foo) svg","overflow","trendChart_TrendChart","react_default","Component","[object Object]","super","arguments","this","containerRef","createRef","state","width","initDatum","currentData","previousData","props","legendData","push","chartUtils","cost","charts","show","legend","onClick","handleCostLegendClick","setState","newDatum","index","handleResize","current","clientWidth","getChart","createElement","ChartArea","getLegend","title","victory_legend","events","target","eventHandlers","mutation","height","theme","ChartTheme","light","blue","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","container","ChartVoronoiContainer","labels","className","ref","Chart","containerComponent","Boolean","chart","victory_axis","dependentAxis","TabContent","content","role","tabItem","position","flexGrow","textAlign","cursor","marginBottom","marginTop","tabItemShrink","flexShrink","marginRight","selected","backgroundImage","tabItem_TabItem","handleClick","onSelect","isSelected","isShrink","aria-selected","tabIndex","tabNavigation_styles_styles","tabNavigation","display","alignItems","tabNavigation_TabNavigation","handleKeyDown","event","includes","tabs","onChange","modifier","newIndex","findIndex","onKeyDown","tab","Tabs","selectedTab","find","reportSummary","subtitle","color","var","OcpReportSummary","es","subTitle","detailsLink","children","status","Card","CardHeader","Title","size","CardBody","CardFooter","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","justifyContent","text","marginLeft","paddingBottom","lineHeight","OcpReportSummaryDetails","reportType","requestLabel","requestValue","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItem","totalValue","percentVal","percentLabel","Progress","sm","defaultProps","v","ocpReportSummaryItems_OcpReportSummaryItems","nextProps","otherIndex","slice","getItems","OcpReportSummaryTrend","trendChart","currentRequestData","currentUsageData","previousRequestData","previousUsageData","requestColorScale","usageColorScale","usageChart_styles_styles","usageChart_UsageChart","currentRequestLabel","currentUsageLabel","previousRequestLabel","previousUsageLabel","requestLegendData","handleRequestLegendClick","usageLegendData","gutter","handleUsageLegendClick","OcpReportSummaryUsage","CastedButton","Button","link_Link","component","Link","variant","getIdKeyForTab","mapStateToProps","common","widgetId","widget","ocpDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","ocpReports","selectReport","selectReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","OcpDashboardWidget","react_redux_es","getTabTitle","getDetailsLinkTitle","buildDetailsLink","ocpQuery","group_by","order_by","renderTab","tabData","topItems","currentTab","ocpReportSummary","handleTabChange","tabId","titleKey","trend","availableTabs","month","get_month_default","format_default","start_of_month_default","count","get_date_default","detailLabel","requestLabelKey","components_link","to","undefined","currentRequestLabelKey","date","currentUsageLabelKey","previousRequestLabelKey","components_tabs","ocpDashboard_mapStateToProps","widgets","selectCurrentWidgets","OcpDashboard","openProvidersModal","ui","Grid","GridItem","xl","lg","card","cardBody","primaryAction","EmptyState","md","dollar_sign_icon","store_providers","selectProviders","results","showAWSTab","showOCPTab","result","providersFetchStatus","selectProvidersFetchStatus","Overview","awsDashboard","addSourceBtn","secondary","AwsReportSummary","awsReportSummaryDetails_styles_styles","AwsReportSummaryDetails","awsReportSummaryItem_styles_styles","AwsReportSummaryItem","awsReportSummaryItems_AwsReportSummaryItems","AwsReportSummaryTrend","awsReports","AwsDashboardWidget","awsQuery","utils_formatValue","context","labelKeyContext","trendTitle","awsDashboard_mapStateToProps","AwsDashboard","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDashboard__WEBPACK_IMPORTED_MODULE_1__","_awsDashboard__WEBPACK_IMPORTED_MODULE_1__","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"0LAAA,MAAAA,EAAAC,OAAAC,MAAA,QAAAC,cAAA,GACAC,EAAA,CAAAC,EAAAJ,EAAAK,QACA,MAAAC,EAAAP,EAAAC,GACAO,EAAAH,GAAA,EACA,OAAAE,GACA,UACA,OAAAE,EAAAD,EAAAD,EAAAD,GACA,SACA,OAAAI,EAAAF,EAAAD,EAAAD,GACA,QACA,OAAAK,EAAAH,EAAAD,EAAAD,KAGAK,EAAA,CAAAN,EAAAO,GAA6CC,uBAC7CR,EAAAS,QAAAD,GAEAJ,EAAA,CAAAJ,EAAAO,GAA8CC,iBAAA,SAC9C,IAAAL,EAAAH,EAIA,OAHAA,IACAG,EAAA,GAEAA,EAAAO,eAAA,MACAC,MAAA,WACAC,SAAA,MACAC,sBAAAL,EACAM,sBAAAN,KAGAH,EAAA,CAAAL,EAAAO,GAA6CC,iBAAA,QAC7CR,EAAAS,QAAAD,oTCrBA,SAAAO,EAAAC,EAAAC,EAAA,EAAAC,EAAA,QACA,IAAAF,EACA,SAEA,MAAAG,GACAH,SACAI,MAAAF,EACAG,QAAA,KACAC,cAAA,GAEAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,GACA,WAAAF,EACAM,EAAAG,IAAAC,GAAAC,EAAAD,EAAAE,MAAAF,EAAAT,IAEA,IAAAD,EACAM,EAAAG,IAAAC,GAAAC,EAAAD,EAAAE,MAAAF,EAAAT,IAEAK,EAAAO,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAH,EAAAK,EAAAD,EAAAH,MAAAG,EAAAd,SAGA,SAAAkB,EAAApB,EAAAC,EAAA,EAAAC,EAAA,OAAAmB,EAAA,UACA,IAAArB,EACA,SAEA,MAAAG,GACAH,SACAI,MAAAF,EACAG,QAAA,KACAC,cAAA,GAEAC,EAAAC,OAAAc,EAAA,EAAAd,CAAAL,GACA,WAAAF,EACAM,EAAAG,IAAAC,GAAAC,EAAAD,EAAAU,GAAAV,EAAAT,IAEA,IAAAD,EACAM,EAAAG,IAAAC,GAAAC,EAAAD,EAAAU,GAAAV,EAAAT,IAEAK,EAAAO,OAAA,CAAAC,EAAAC,KACA,MAAAC,EAAAF,EAAAG,OAAAH,IAAAG,OAAA,GAAAC,EAAA,EACA,UAAAJ,EAAAH,EAAAK,EAAAD,EAAAK,GAAAL,EAAAd,SAGA,SAAAU,EAAA5B,EAAAuC,EAAAnB,EAAA,QAmEA,IAAAoB,EA5DA,OACAC,EAPA,SAAArB,EAAAsB,IAAAH,EAAAI,IAAAJ,EAAAK,MAQAT,GA0DAK,EAjEAxC,EAkEA6C,OAAAL,UAAA,KAjEAM,WAAA9C,EAAAS,QAAA,IA6DA,SAAA+B,GACA,OAAAK,OAAAL,UAAA,KA7DAO,CAAA/C,GACAA,EACA,GAIAkB,IAAAqB,EAAAI,GACAK,KAAAT,EAAAI,GACAM,MAAAV,EAAAU,OAaA,SAAAC,EAAAC,EAAAC,GAAA,EAAAC,GAAA,GACA,MAAAC,EAAAC,GAXA,SAAAJ,GACA,IAAAA,MAAAjB,OAAA,CACA,MAAAsB,EAAA,IAAAC,KAEA,OADAC,IAAAF,GACAA,GAIA,OAFA,IAAAC,KAAAN,EAAA,GAAAjC,IAAA,aACA,IAAAuC,KAAAN,IAAAjB,OAAA,GAAAhB,IAAA,cAIAyC,CAAAR,GAKA,GAHAC,GAAAE,EAAAM,SACAN,EAAAM,QAAA,GAEAP,GAAAC,EAAAM,QAAA,CACA,MAAAC,EAAAC,IAAAR,GAAAS,UACAR,EAAAK,QAAAC,GAEA,MAAAG,EAAAC,IAAAX,EAAA,OACAY,EAAAxB,IAAAY,GACAa,EAAAzB,IAAAa,GACA,SAAcS,KAAatB,IAAAY,KAAiBY,IAAAC,QAA8BA,IAAQ,KAElF,SAAAC,EAAArE,GACA,gBAAAC,EAAAJ,EAAA,KAAAK,MACA,MAAAC,EAAAsB,OAAA6C,EAAA,EAAA7C,CAAA5B,GACA,OAAAM,GACA,UACA,SACA,OAAAoE,EAAA,EAAAC,WAA0CrE,KAC1CF,SAA8BD,EAAAC,EAAAJ,EAAAK,OAE9B,QACA,SAA0BF,EAAAC,EAAAJ,EAAAK,OAI1B,SAAAuE,EAAAC,EAAA1E,EAAA2E,EAAAtD,EAAA,QACA,IAAAqD,EAAAvD,IACA,SAEA,YAAAE,EAAA,CAEA,SADA6C,IAAAQ,EAAAvD,IAAA,kBAC2BnB,EAAA0E,EAAAtC,EAAAsC,EAAAxB,MAAAyB,KAE3B,OAAAD,EAAAvD,IAAAyD,2JCjHA,SAAAC,GAAA5D,OAA2CA,EAAAI,QAAAyD,WAAAzD,EAAAC,UAAA,SAAAC,gBAAA,IAC3C,OAAAE,OAAAsD,EAAA,EAAAtD,CAAAuD,GACA/D,SACAI,QACAyD,WACAvD,gBACAD,aAEAH,IAAAG,EACA2D,UAAA1D,IAGA,SAAAyD,GAAA/D,OAAmDA,EAAAI,QAAAyD,WAAAzD,IACnD,IAAAJ,EACA,SAEA,MAAAiE,KACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAC,QAAArF,IACA,MAAAsF,EAAAtF,EAAAsF,SACAC,EAAAvF,EAAAuF,OACA5C,EAAA3C,EAAAoB,GACA,IAAAwB,EAAA5C,EAAA6E,GACA,YAAAA,GAAA7E,EAAAwF,gBACA5C,EAAA5C,EAAAwF,eAEA,MAAAC,EAAAzF,EAAAyF,MACAC,EAAA1F,EAAA0F,QACAC,EAAA3F,EAAA2F,MACAV,EAAAtC,GAgBAsC,EAAAtC,GAAAnB,OAAAoE,UAA8CX,EAAAtC,IAAgB2C,SAAAL,EAAAtC,GAAA2C,WAAAC,OAAAN,EAAAtC,GAAA4C,SAAAE,MAAAR,EAAAtC,GAAA8C,QAAAC,QAAAT,EAAAtC,GAAA+C,UAAAC,MAAAV,EAAAtC,GAAAgD,UAf9DV,EAAAtC,IACAkD,IAAA7F,EAAA6F,IACAP,WACAC,SACAO,aAAA9F,EAAA+F,cACAC,WAAAhG,EAAAiG,YACAtD,KACAC,QACA6C,QACAC,UACAzC,MAAAjD,EAAAiD,OAAA0C,EAAA,WACAA,WAOA,UAAAzE,KAAAiE,EACA,GAAAA,EAAAjE,aAAAgF,MACA,OAAAf,EAAAjE,GAAAmE,QAAAH,IAOA,OAHAlE,KAAAmF,MACAnF,EAAAmF,KAAAd,QAAAH,GAEA1D,OAAA4D,OAAAH,GAEA,SAAAmB,EAAAC,MACA,OAAAA,EAAAC,QACA,UAEAD,EAAAE,QACA,UAEAF,EAAAG,KACA,OAEA,0CCvEA,SAAAC,EAAAC,EAAAzG,GACA,oBAAAyG,EACA,OAAAA,EAGA,OAAAA,EADAzG,EAAAiB,KAGA,SAAAyF,EAAAC,EAAA3G,GACA,MAAA+E,UAAWA,EAAA,GAA0B/E,MACrC,UAAA2G,GAAAD,KAAA,CAAAE,EAAAC,KACA,MAAAC,EACAN,EADA,IAAAzB,EACA6B,EACAC,EADA7G,GAEA+G,EACAP,EADA,IAAAzB,EACA8B,EACAD,EADA5G,GAEA,OAAA8G,EAAAC,GACA,EAEAD,EAAAC,EACA,EAEA,IAtBAC,EAAAjF,EAAAkF,EAAA,sBAAAP,sGCAA,MACAQ,EAAAxE,KAAsCyE,cAAAzE,IACtC0E,GACAC,SACAC,oBAAA,sBACAC,QAAA,WAEAC,QACAC,WAAA,aACAC,WAAA,cAEAC,OACAC,MAAA,QACAC,KAAA,aACAC,eAAA,iBACAC,eAAA,iBACAC,OAAA,UAEAC,UACAA,SAAA,WACAC,SAAA,WACAC,cAAA,iBACAC,OAAA,UAEAC,WACAC,QAAA,UACAC,aAAA,eACAd,WAAA,aACAe,oBAAA,sBACAC,WAAA,sBACAC,oBAAA,+BACAC,iBAAA,4BACAjB,WAAA,aACAkB,WAAA,uBAEAC,SACAC,IAAA,eACAC,KAAA,oBACAC,SAAA,oKCrCA,MAAAC,GAAA,kDACA,SAAAC,GAAAnI,OAA2CA,EAAAI,QAAAyD,WAAAzD,EAAAC,UAAA,QAAAC,gBAAA,IAC3C,OAAAE,OAAAsD,EAAA,EAAAtD,CAAA4H,GACApI,SACAI,QACAyD,WACAvD,gBACAD,aAEAH,IAAAG,EACA2D,UAAA1D,IAGA,SAAA8H,GAAApI,OAAmDA,EAAAI,QAAAyD,WAAAzD,IACnD,IAAAJ,EACA,SAEA,MAAAiE,KACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAC,QAAArF,IACA,MAAA6B,EAAA7B,EAAA6B,MACAc,EAAA3C,EAAAoB,GACA,IAAAwB,EAAA5C,EAAA6E,GACA,YAAAA,GAAA7E,EAAAqJ,gBACAzG,EAAA5C,EAAAqJ,eAEApE,EAAAtC,GAWAsC,EAAAtC,GAAAnB,OAAAoE,UAA8CX,EAAAtC,IAAgBd,MAAAoD,EAAAtC,GAAAd,UAV9DoD,EAAAtC,IACAmD,aAAA9F,EAAA+F,cACAC,WAAAhG,EAAAiG,YACAtD,KACAd,QACAe,QACAK,MAAAjD,EAAAiD,SAOAiG,EAAA7D,QAAAiE,IACA,GAAAnE,EAAAmE,GACA,OAAAnE,EAAAmE,GAAAjE,QAAAH,MAOA,OAHAlE,KAAAmF,MACAnF,EAAAmF,KAAAd,QAAAH,GAEA1D,OAAA4D,OAAAH,GAEA,SAAAmB,EAAAC,MACA,OAAAA,EAAAkD,QACA,UAEAlD,EAAAmD,cACA,gBAEAnD,EAAAoD,OACA,SAEApD,EAAAqD,QACA,UAEA,yIChEA,MAAAC,GACAC,MACAC,WACAC,QAAA,IAEAC,MACAC,OAAA,QAEAC,OACAD,OAAA,QAEAE,YACAC,SAAA,IAGAC,YAAAC,EAAA,EAAArK,MAAAqK,EAAA,EAAArK,OACAsK,eACAnE,MACAoE,KAAAF,EAAA,EAAArK,MACAgK,OAAAK,EAAA,EAAArK,QAGAwK,cACArE,MACAoE,KAAAF,EAAA,EAAArK,MACAgK,OAAAK,EAAA,EAAArK,SAIAyK,EAAAC,EAAA,EAAAC,QACAC,oBACAC,iBACAC,SAAA,oBC1BAC,UAAAC,EAAAnE,EAAAoE,UACAC,cACAC,SAAAC,WACAC,KAAAC,aAAAN,EAAAnE,EAAA0E,YACAF,KAAAG,OACAC,MAAA,GAEAJ,KAAAK,UAAA,MACA,MAAAC,YAAmBA,EAAAC,gBAA4BP,KAAAQ,MAC/CC,KACAF,KAAA1J,QACA4J,EAAAC,MACA/I,KAAAxB,OAAAwK,EAAA,EAAAxK,CAAAoK,GAAA,QAGAD,KAAAzJ,QACA4J,EAAAC,MACA/I,KAAAxB,OAAAwK,EAAA,EAAAxK,CAAAmK,KAGA,MAAAM,GACAC,SAEA/F,KAAAyF,EACAO,MAAA,EACAxL,MAAAgJ,EAAAW,gBAGAnE,KAAAwF,EACAQ,MAAA,EACAxL,MAAAgJ,EAAAa,eAGA4B,QACAhC,WAAAT,EAAAS,WACAjE,KAAA2F,EACAO,QAAAhB,KAAAiB,wBAGAjB,KAAAkB,UACA9H,OACAwH,YAIAZ,KAAAiB,sBAAAT,KACA,MAAApH,MAAmBA,GAAQ4G,KAAAG,MAC3BgB,EAAAhL,OAAAoE,UAA6CnB,GAC7CoH,EAAAY,OAAA,GAAAD,EAAAP,KAAAC,OAAAhK,SACAsK,EAAAP,KAAAC,OAAAL,EAAAY,OAAAN,MAAAK,EAAAP,KAAAC,OAAAL,EAAAY,OAAAN,KACAd,KAAAkB,UAA+B9H,MAAA+H,OAG/BnB,KAAAqB,aAAA,MACArB,KAAAkB,UAA2Bd,MAAAJ,KAAAC,aAAAqB,QAAAC,gBAE3BvB,KAAAwB,SAAA,EAAApI,EAAAgI,IACAhI,EAAA0B,MAAA1B,EAAA0B,KAAAjE,QAAAuC,EAAA0H,KACAnB,EAAAnE,EAAAiG,cAAAC,EAAA,GAAwD5G,KAAA1B,EAAA0B,KAAAjF,mBAAuCuL,IAAM9L,MAAA8D,EAAA9D,QAGrG,MAGA0K,KAAA2B,UAAA,EAAAvI,EAAAgH,KACA,MAAAwB,MAAmBA,GAAQ5B,KAAAQ,MAC3B,OAAApH,KAAA0B,MAAA1B,EAAA0B,KAAAjE,OACA8I,EAAAnE,EAAAiG,cAAAI,EAAA,GAA4D9C,WAAA3F,EAAA2F,WAAAjE,KAAA1B,EAAA0B,KAAAgH,SAE5DC,OAAA,OACAC,eACAhB,QAAA,MAGAe,OAAA,OACAE,SAAAzB,IACApH,EAAA4H,QAAAR,GACA,WAOA0B,OAAA,GAAAC,MAAAC,EAAA,EAAAC,MAAAC,KAAAV,QAAAxB,UAGA,OAGAJ,KAAA7G,gBAAA,CAAAC,IACA,MAAAmJ,iBAAmBA,EAAAC,sBAAuCxC,KAAAQ,MAC1D,OAAArK,OAAAwK,EAAA,EAAAxK,CAAAiD,EAAAjD,OAAAwK,EAAA,EAAAxK,CAAAoM,GAAAC,EAAA,UAGA3C,oBACA4C,WAAA,KACAzC,KAAAC,aAAAqB,SACAtB,KAAAkB,UAA+Bd,MAAAJ,KAAAC,aAAAqB,QAAAC,cAE/BmB,OAAAC,iBAAA,SAAA3C,KAAAqB,gBAEArB,KAAAK,YAEAR,mBAAA+C,GACAA,EAAAtC,cAAAN,KAAAQ,MAAAF,aACAsC,EAAArC,eAAAP,KAAAQ,MAAAD,cACAP,KAAAK,YAGAR,uBACA6C,OAAAG,oBAAA,SAAA7C,KAAAqB,cAEAxB,SACA,MAAAqC,OAAeA,GAASlC,KAAAQ,OACxBpH,MAAeA,EAAAgH,SAAeJ,KAAAG,MAC9B2C,EAAAnD,EAAAnE,EAAAiG,cAAAsB,EAAA,GAAsEC,OAAAhD,KAAA7G,kBACtE,OAAAwG,EAAAnE,EAAAiG,cAAA,OAA4CwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAAG,oBAAA2D,IAAAlD,KAAAC,cAC5CN,EAAAnE,EAAAiG,cAAA,WACA9B,EAAAnE,EAAAiG,cAAA0B,EAAA,GAA4CC,mBAAAN,EAAAZ,SAAA9B,SAC5CiD,QAAAjK,KAAAwH,OACAxH,EAAAwH,KAAAC,OAAAxK,IAAA,CAAAiN,EAAAlC,IACApB,KAAAwB,SAAA8B,EAAAlC,IAEAzB,EAAAnE,EAAAiG,cAAA8B,EAAA,GAAsDjO,MAAAgJ,EAAAC,OACtDoB,EAAAnE,EAAAiG,cAAA8B,EAAA,GAAsDC,eAAA,EAAAlO,MAAAgJ,EAAAC,SACtDyB,KAAA2B,UAAAvI,KAAAwH,KAAAxH,EAAAwH,KAAAG,UAAuEX,2FCrIvE,MAAAqD,EAAA,EAA4B3I,WAC5B,MAAA4I,EAAA,mBAAA5I,EAAA4I,QAAA5I,EAAA4I,QAAA5I,KAAA4I,QACA,OAAA/D,EAAAnE,EAAAiG,cAAA,OAAuCkC,KAAA,YAAmBD,0BCD1D,MAAAtE,EAAAC,EAAA,EAAAC,QACAsE,SACAC,SAAA,WACAC,SAAA,EACAC,UAAA,SACAjF,SAAAE,EAAA,EAAArK,MACA8J,QAAAO,EAAA,EAAArK,MACAqP,OAAA,UACAC,aAAAjF,EAAA,EAAArK,MACAuP,UAAAlF,EAAA,EAAArK,OAEAwP,eACAL,SAAA,IACAM,WAAA,IACAC,YAAA,QAEAC,UACAC,2CAAoDvF,EAAA,EAAArK,uCChBpD6P,UAAA7E,EAAAnE,EAAAoE,UACAC,cACAC,SAAAC,WACAC,KAAAyE,YAAA,MACA,MAAAC,SAAmBA,EAAA5J,QAAiBkF,KAAAQ,MACpCkE,EAAA5J,EAAAxD,MAGAuI,SACA,MAAA/E,KAAeA,EAAA6J,aAAAC,YAA6B5E,KAAAQ,MAC5C,OAAAb,EAAAnE,EAAAiG,cAAA,OAA4CkC,KAAA,MAAA3C,QAAAhB,KAAAyE,YAAAI,gBAAAF,EAAAG,SAAAH,EAAA,KAAA1B,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAAwE,QAAAe,GAAAvF,EAAAkF,SAAAM,GAAAxF,EAAA+E,gBAAsMrJ,EAAAvD,QCXlP,MAAAwN,EAAA1F,EAAA,EAAAC,QACA0F,eACAC,QAAA,OACAC,WAAA,WACAjB,aAAAjF,EAAA,EAAArK,eCFAwQ,UAAAxF,EAAAnE,EAAAoE,UACAC,cACAC,SAAAC,WACAC,KAAAoF,cAAA,CAAAC,IACA,+BAAAC,SAAAD,EAAAxP,KACA,OAEA,MAAAyO,SAAmBA,EAAAiB,OAAAC,YAA2BxF,KAAAQ,MAC9CiF,EAAA,eAAAJ,EAAAxP,IAAA,KAEA6P,EADAH,EAAAI,UAAAzM,KAAA5B,KAAAgN,EAAAhN,IACAmO,EACAC,EAAA,GAAAA,EAAAH,EAAA1O,OAAA,GAGA2O,EAAAD,EAAAG,GAAApO,MAGAuI,SACA,MAAA+E,SAAeA,EAAAW,OAAAjB,WAAAkB,YAAqCxF,KAAAQ,MACpD,OAAAb,EAAAnE,EAAAiG,cAAA,OAA4CkC,KAAA,UAAAV,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAA4O,EAAAC,eAAAY,UAAA5F,KAAAoF,eAAuFG,EAAAlP,IAAAwP,GAAAlG,EAAAnE,EAAAiG,cAAA+C,GAAiDI,WAAAF,SAAAc,EAAA3P,IAAAgQ,EAAAvO,GAAAwD,KAAA+K,EAAAlB,WAAAkB,EAAAvO,KAAAgN,EAAAhN,QCpBpL,MAAAwO,EAAA,EAAelB,WAAAN,WAAAiB,OAAAC,eACf,OAAAD,EAAA1O,OACA,OAAA8I,EAAAnE,EAAAiG,cAAA,gCAEA,MAAAsE,EAAAR,EAAAS,KAAAH,KAAAvO,KAAAgN,GACA,OAAA3E,EAAAnE,EAAAiG,cAAA,WACA9B,EAAAnE,EAAAiG,cAAA0D,GAA4CP,WAAAW,OAAAjB,SAAAyB,GAAAR,EAAA,GAAAC,aAC5C7F,EAAAnE,EAAAiG,cAAAgC,GAAyC3I,KAAAiL,GAAAR,EAAA,gKCRzC,MAAAnG,EAAAC,EAAA,EAAAC,QACA2G,eACA/D,OAAA,QAEAgE,UACApH,SAAAE,EAAA,EAAArK,MACAwR,MAAAnH,EAAA,EAAAoH,IACAnC,aAAA,OCEAoC,EAAAlQ,OAAAmQ,EAAA,EAAAnQ,GANA,EAA+ByL,QAAA2E,WAAAC,cAAAC,WAAAC,SAAAxN,OAAqDyG,EAAAnE,EAAAiG,cAAAkF,EAAA,GAAiC1D,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAA6G,gBACrHtG,EAAAnE,EAAAiG,cAAAmF,EAAA,OACAjH,EAAAnE,EAAAiG,cAAAoF,EAAA,GAAoCC,KAAA,MAAalF,GACjDyB,QAAAkD,IAAA5G,EAAAnE,EAAAiG,cAAA,KAAuDwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAA8G,WAAkCK,IACzF5G,EAAAnE,EAAAiG,cAAAsF,EAAA,WAAAL,KAA2ExN,EAAA,gBAAauN,GACxFpD,QAAAmD,IAAA7G,EAAAnE,EAAAiG,cAAAuF,EAAA,OAAAR,KCRAS,EAAA5H,EAAA,EAAAC,QACA4H,sBACAjC,QAAA,OACAkC,eAAA,gBACAlD,aAAAjF,EAAA,EAAArK,OAEAA,OACAsQ,QAAA,OACAkB,MAAAnH,EAAA,EAAAoH,IACAtH,SAAAE,EAAA,EAAArK,MACA0P,YAAArF,EAAA,EAAArK,OAEAyS,MACAnC,QAAA,OACAC,WAAA,WACAmC,WAAArI,EAAA,EAAArK,MACA2S,cAAA,GACAC,WAAAvI,EAAA,EAAArK,MACAmK,SAAAE,EAAA,EAAArK,SCjBA6S,EAAA,EAAkCjQ,QAAA7C,cAAA2E,gBAAA1D,SAAA8R,aAAA,SAAAC,mBAClC,IAAA/S,EAAA,OACAgT,EAAA,OACA,GAAAhS,KAAAa,MACA,cAAAiR,EAAA,CACA,MAAA7P,EAAAjC,EAAAa,MAAAoB,MAAAjC,EAAAa,MAAAoB,MAAA,MACAjD,EAAAD,EAAAiB,EAAAa,MAAA0D,OAAAtC,EAAAyB,OAEA,CACA,MAAAzB,EAAAjC,EAAAa,MAAAoB,MAAAjC,EAAAa,MAAAoB,MAAA,KACAjD,EAAAD,EAAAiB,EAAAa,MAAA8D,MAAA1C,EAAAyB,GACAsO,EAAAjT,EAAAiB,EAAAa,MAAA6D,QAAAzC,EAAAyB,GAGA,OAAAsG,EAAAnE,EAAAiG,cAAA,OAAwCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAA8Q,EAAAC,uBACxCvH,EAAAnE,EAAAiG,cAAA,OAAoCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAA8Q,EAAAtS,QACpCA,EACAgL,EAAAnE,EAAAiG,cAAA,OAAwCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAA8Q,EAAAG,OACxCzH,EAAAnE,EAAAiG,cAAA,WAAAlK,KACA8L,QAAA,WAAAoE,IAAA9H,EAAAnE,EAAAiG,cAAA,OAAsFwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAA8Q,EAAAtS,QACtFgT,EACAhI,EAAAnE,EAAAiG,cAAA,OAAwCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAA8Q,EAAAG,OAA8BM,kBCtBtE,MAAAE,EAAAvI,EAAA,EAAAC,QACAuI,mBACAC,qBACA7D,aAAAjF,EAAA,EAAArK,QAGAoT,MACAvI,iBACAC,SAAA,cCNAuI,EAAA,EAA+BzQ,QAAA5C,QAAAsT,aAAAvT,cAAAkD,QAAAyB,oBAC/B,MACA6O,EAAA1Q,QADAyQ,EAAAtT,EAAAsT,EAAA,OACA7S,QAAA,IACA+S,KAA4BzT,EAAAC,EAAAiD,EAAAyB,OAA6C6O,MACzE,OAAAvI,EAAAnE,EAAAiG,cAAA,MAAuCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAyR,EAAAC,oBACvClI,EAAAnE,EAAAiG,cAAA2G,EAAA,GAAuC7Q,MAAA4Q,EAAAxT,MAAAuT,EAAAtG,MAAArK,EAAAuP,KAAAsB,EAAA,EAAAC,OAEvCL,EAAAM,cACA5T,YAAA6T,yBCVAC,UAAA7I,EAAAnE,EAAAoE,UACAC,sBAAA4I,GACA,OAAAA,EAAA9S,SAAAqK,KAAAQ,MAAA7K,OAEAkK,WACA,MAAAlK,OAAeA,EAAAI,QAAAyD,YAA0BwG,KAAAQ,MACzCtK,EAAAC,OAAAoD,EAAA,EAAApD,EACAR,SACAI,QACAyD,aAEAkP,EAAAxS,EAAAyP,UAAArP,GAAA,UAAAA,EAAAgB,IACA,WAAAoR,MAEAxS,EAAAyS,MAAA,EAAAD,MACAxS,EAAAyS,MAAAD,EAAA,GACAxS,EAAAwS,IAGAxS,EAEA2J,SACA,MAAAlK,OAAeA,EAAA8Q,YAAmBzG,KAAAQ,MAClC,IAAA7K,EACA,YAEA,MAAAG,EAAAkK,KAAA4I,WACA,OAAAjJ,EAAAnE,EAAAiG,cAAA,UAAAgF,GAAyD3Q,yBC3BzD,MAAA+S,EAAArI,GAAAb,EAAAnE,EAAAiG,cAAA,OAAoEnM,OAAS2O,aAAA,KAC7EtE,EAAAnE,EAAAiG,cAAAqH,EAAA,EAAA3S,OAAAoE,QAAmD2H,OAAA,IAAa1B,kECDhE,MAAAlC,GACAC,MACAC,WACAC,QAAA,IAEAC,MACAC,OAAA,QAEAC,OACAD,OAAA,QAEAE,YACAC,SAAA,IAGAiK,oBACAjO,MACAoE,KAAA,OACAP,OAAAK,EAAA,EAAArK,QAGAqU,kBACAlO,MACAoE,KAAA,OACAP,OAAAK,EAAA,EAAArK,QAGAsU,qBACAnO,MACAoE,KAAA,OACAP,OAAAK,EAAA,EAAArK,QAGAuU,mBACApO,MACAoE,KAAA,OACAP,OAAAK,EAAA,EAAArK,QAGAwU,mBACAnK,EAAA,EAAArK,MACAqK,EAAA,EAAArK,OAEAyU,iBACApK,EAAA,EAAArK,MACAqK,EAAA,EAAArK,QAGA0U,EAAAhK,EAAA,EAAAC,QACAC,oBACAC,iBACAC,SAAA,oBC7CA6J,UAAA3J,EAAAnE,EAAAoE,UACAC,cACAC,SAAAC,WACAC,KAAAC,aAAAN,EAAAnE,EAAA0E,YACAF,KAAAG,OACAC,MAAA,GAEAJ,KAAAK,UAAA,MACA,MAAA0I,mBAAmBA,EAAAQ,sBAAAP,mBAAAQ,oBAAAP,sBAAAQ,uBAAAP,oBAAAQ,sBAAkK1J,KAAAQ,MACrLmJ,KACAF,GACAE,EAAAjJ,MACA/I,KAAA8R,IAGAF,GACAI,EAAAjJ,MACA/I,KAAA4R,IAGA,MAAAlP,GACAwG,SAEA/F,KAAAmO,EACAnI,MAAA,EACAxL,MAAAgJ,EAAA2K,sBAGAnO,KAAAiO,EACAjI,MAAA,EACAxL,MAAAgJ,EAAAyK,qBAGAhI,QACAhC,WAAAT,EAAA6K,kBACArO,KAAA6O,EACA3I,QAAAhB,KAAA4J,2BAGAC,KACAH,GACAG,EAAAnJ,MACA/I,KAAA+R,IAGAF,GACAK,EAAAnJ,MACA/I,KAAA6R,IAGA,MAAAlP,GACAuG,SAEA/F,KAAAoO,EACApI,MAAA,EACAxL,MAAAgJ,EAAA4K,oBAGApO,KAAAkO,EACAlI,MAAA,EACAxL,MAAAgJ,EAAA0K,mBAGAjI,QACAhC,WAAAT,EAAA8K,gBACAtO,KAAA+O,EACAC,OAAA,GACA9I,QAAAhB,KAAA+J,yBAGA/J,KAAAkB,UACA9H,OACAiB,UACAC,aAIA0F,KAAA4J,yBAAApJ,KACA,MAAApH,MAAmBA,GAAQ4G,KAAAG,MAC3BgB,EAAAhL,OAAAoE,UAA6CnB,GAC7CoH,EAAAY,OAAA,GAAAD,EAAA9G,QAAAwG,OAAAhK,SACAsK,EAAA9G,QAAAwG,OAAAL,EAAAY,OAAAN,MAAAK,EAAA9G,QAAAwG,OAAAL,EAAAY,OAAAN,KACAd,KAAAkB,UAA+B9H,MAAA+H,OAG/BnB,KAAAqB,aAAA,MACArB,KAAAkB,UAA2Bd,MAAAJ,KAAAC,aAAAqB,QAAAC,gBAE3BvB,KAAA+J,uBAAAvJ,KACA,MAAApH,MAAmBA,GAAQ4G,KAAAG,MAC3BgB,EAAAhL,OAAAoE,UAA6CnB,GAC7CoH,EAAAY,OAAA,GAAAD,EAAA7G,MAAAuG,OAAAhK,SACAsK,EAAA7G,MAAAuG,OAAAL,EAAAY,OAAAN,MAAAK,EAAA7G,MAAAuG,OAAAL,EAAAY,OAAAN,KACAd,KAAAkB,UAA+B9H,MAAA+H,OAG/BnB,KAAAwB,SAAA,EAAApI,EAAAgI,IACAhI,EAAA0B,MAAA1B,EAAA0B,KAAAjE,QAAAuC,EAAA0H,KACAnB,EAAAnE,EAAAiG,cAAAC,EAAA,GAAwD5G,KAAA1B,EAAA0B,KAAAjF,mBAAuCuL,IAAM9L,MAAA8D,EAAA9D,QAGrG,MAGA0K,KAAA2B,UAAA,EAAAvI,EAAAgH,EAAA0J,EAAA,MACA,MAAAlI,MAAmBA,GAAQ5B,KAAAQ,MAC3B,OAAApH,KAAA0B,MAAA1B,EAAA0B,KAAAjE,OACA8I,EAAAnE,EAAAiG,cAAAI,EAAA,GAA4D9C,WAAA3F,EAAA2F,WAAAjE,KAAA1B,EAAA0B,KAAAgH,SAE5DC,OAAA,OACAC,eACAhB,QAAA,MAGAe,OAAA,OACAE,SAAAzB,IACApH,EAAA4H,QAAAR,GACA,WAOAsJ,SAAA5H,OAAA,GAAAC,MAAAC,EAAA,EAAAC,MAAAC,KAAAV,QAAAxB,UAGA,OAGAJ,KAAA7G,gBAAA,CAAAC,IACA,MAAAmJ,iBAAmBA,EAAAC,sBAAuCxC,KAAAQ,MAC1D,OAAArK,OAAAwK,EAAA,EAAAxK,CAAAiD,EAAAjD,OAAAwK,EAAA,EAAAxK,CAAAoM,GAAAC,EAAA,UAGA3C,oBACA4C,WAAA,KACAzC,KAAAC,aAAAqB,SACAtB,KAAAkB,UAA+Bd,MAAAJ,KAAAC,aAAAqB,QAAAC,cAE/BmB,OAAAC,iBAAA,SAAA3C,KAAAqB,gBAEArB,KAAAK,YAEAR,mBAAA+C,GACAA,EAAAmG,qBAAA/I,KAAAQ,MAAAuI,oBACAnG,EAAAoG,mBAAAhJ,KAAAQ,MAAAwI,kBACApG,EAAAqG,sBAAAjJ,KAAAQ,MAAAyI,qBACArG,EAAAsG,oBAAAlJ,KAAAQ,MAAA0I,mBACAlJ,KAAAK,YAGAR,uBACA6C,OAAAG,oBAAA,SAAA7C,KAAAqB,cAEAxB,SACA,MAAAqC,OAAeA,GAASlC,KAAAQ,OACxBpH,MAAeA,EAAAgH,SAAeJ,KAAAG,MAC9B2C,EAAAnD,EAAAnE,EAAAiG,cAAAsB,EAAA,GAAsEC,OAAAhD,KAAA7G,kBACtE,OAAAwG,EAAAnE,EAAAiG,cAAA,OAA4CwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAkT,EAAA9J,oBAAA2D,IAAAlD,KAAAC,cAC5CN,EAAAnE,EAAAiG,cAAA,WACA9B,EAAAnE,EAAAiG,cAAA0B,EAAA,GAA4CC,mBAAAN,EAAAZ,SAAA9B,SAC5CiD,QAAAjK,KAAAiB,UACAjB,EAAAiB,QAAAwG,OAAAxK,IAAA,CAAAiN,EAAAlC,IACApB,KAAAwB,SAAA8B,EAAAlC,IAEAiC,QAAAjK,KAAAkB,QACAlB,EAAAkB,MAAAuG,OAAAxK,IAAA,CAAAiN,EAAAlC,IACApB,KAAAwB,SAAA8B,EAAAlC,IAEAzB,EAAAnE,EAAAiG,cAAA8B,EAAA,GAAsDjO,MAAAgJ,EAAAC,OACtDoB,EAAAnE,EAAAiG,cAAA8B,EAAA,GAAsDC,eAAA,EAAAlO,MAAAgJ,EAAAC,SACtDyB,KAAA2B,UAAAvI,KAAAkB,MAAAlB,EAAAkB,MAAAyG,UAAyEX,EAAA,IACzEJ,KAAA2B,UAAAvI,KAAAiB,QAAAjB,EAAAiB,QAAA0G,UAA6EX,KCnL7E,MAAA4J,EAAAxJ,GAAAb,EAAAnE,EAAAiG,cAAA,OAAoEnM,OAAS2O,aAAA,KAC7EtE,EAAAnE,EAAAiG,cAAA6H,EAAAnT,OAAAoE,QAAmD2H,OAAA,IAAa1B,6QCAhE,MAAAyJ,EAAAC,EAAA,EACAC,EAAA3J,GAAAb,EAAAnE,EAAAiG,cAAAwI,EAAA9T,OAAAoE,QAAwE6P,UAAAC,EAAA,EAAAC,QAAA,QAAyC9J,uRCYjH,MAAA+J,EAAA1E,IACA,OAAAA,GACA,eACA,gBACA,YACA,aACA,eACA,kBAwFA,MAAA2E,EAAArU,OAAAsU,EAAA,EAAAtU,CAAA,CAAAgK,GAAuDuK,eACvD,MAAAC,EAAAC,EAAA,EAAAC,aAAA1K,EAAAuK,GACAI,EAAAF,EAAA,EAAAG,oBAAA5K,EAAAuK,GACA,OAAAvU,OAAAoE,UAA2BoQ,GAAWK,aAAAF,EAAAxJ,QAAA2J,cAAAH,EAAAI,SAAAC,UAAAL,EAAAvF,KAAAjE,QAAA8J,EAAA,EAAAC,aAAAlL,EAAAwK,EAAAlD,WAAAqD,EAAAxJ,SAAA4J,SAAAE,EAAA,EAAAC,aAAAlL,EAAAwK,EAAAlD,WAAAqD,EAAAI,UAAA3F,KAAA6F,EAAA,EAAAC,aAAAlL,EAAAwK,EAAAlD,WAAAqD,EAAAvF,MAAAmB,OAAA0E,EAAA,EAAAE,wBAAAnL,EAAAwK,EAAAlD,WAAAqD,EAAAxJ,aAEtCiK,GACAC,aAAAZ,EAAA,EAAAa,mBACAC,UAAAd,EAAA,EAAAe,iBAEAC,EAAAzV,OAAAmQ,EAAA,EAAAnQ,UAAA0V,EAAA,EAAA1V,CAAAqU,EAAAe,EAAApV,eA9FAwJ,EAAAnE,EAAAoE,UACAC,cACAC,SAAAC,WACAC,KAAA8L,YAAA,CAAAjG,IACA,MAAA3M,EAAmBA,GAAI8G,KAAAQ,MAEvB,OAAAtH,EAAA,gBAAsC8B,QADtCuP,EAAA1E,IAAA,OAGA7F,KAAA+L,oBAAA,CAAAlG,IACA,MAAA3M,EAAmBA,GAAI8G,KAAAQ,MAEvB,OAAAtH,EAAA,gBAAsC8B,QADtCuP,EAAA1E,IAAA,OAGA7F,KAAAgM,iBAAA,MACA,MAAAhB,aAAmBA,GAAehL,KAAAQ,MAClCxF,EAAA7E,OAAA8V,EAAA,EAAA9V,CAAA6U,GAAAkB,SACA,cAA2B/V,OAAA8V,EAAA,EAAA9V,EAC3B+V,SAAAlR,EACAmR,UAA2BjS,OAAA,cAG3B8F,KAAAoM,UAAA,CAAAC,IACA,MAAA5E,WAAmBA,EAAAlC,OAAA+G,YAA6BtM,KAAAQ,MAChD+L,EAAAF,EAAA/U,GACA,OAAAqI,EAAAnE,EAAAiG,cAAA+K,EAAA,GAAgEzW,MAAAwU,EAAAgC,GAAA5W,OAAA4P,GAAkD,EAAIzP,WAAQA,EAAAO,IAAAuN,GAAAjE,EAAAnE,EAAAiG,cAAA+K,EAAA,GAAsE3W,IAAA+N,EAAAtM,GAAA+B,cAAAiT,EAAAjT,cAAA3E,cAAA,EAAA6C,MAAAqM,EAAArM,MAAA+B,WAAA2O,WAAA,WAAAR,EACpMlC,EAAA/O,MAAA0D,OACAqL,EAAA/O,MAAA8D,MAAA1C,MAAAgM,EAAAhM,MAAAjD,MAAA,WAAA8S,EACA7D,EAAA1J,OACA0J,EAAAtJ,YAEA0F,KAAAyM,gBAAA,CAAAC,IACA1M,KAAAQ,MAAAkL,UAAA1L,KAAAQ,MAAAlJ,GAAAoV,KAGA7M,oBACA,MAAA2L,aAAeA,EAAAd,YAAyB1K,KAAAQ,MACxCgL,EAAAd,GAEA7K,SACA,MAAA3G,EAAeA,EAAAyT,WAAAC,QAAA3Q,UAAAqF,UAAA4J,WAAA2B,gBAAAN,aAAA9E,aAAAf,UAAiG1G,KAAAQ,MAChHrI,EAAA,IAAAC,KACA0U,EAAAC,IAAA5U,GACAW,EAAAkU,IAAA7U,EAAA,MACAU,EAAAmU,IAAAC,IAAA9U,GAAA,MACAyJ,EAAA1I,EAAAyT,GAAmC7T,UAAAgU,QAAAjU,cACnC0N,EAAArN,EAAA,iCACAJ,UACAgU,QACAjU,YACAqU,MAAAC,IAAAhV,KAEAiV,EAAAlU,EAAA+C,EAAAzC,UACAkO,EAAAxO,EAAA+C,EAAAoR,iBACA7G,EAAA,WAAAiB,GAAA9H,EAAAnE,EAAAiG,cAAA6L,EAAA,GAAgGC,GAAAvN,KAAAgM,oBAA8BhM,KAAA+L,oBAAAQ,IAC9HvV,EAAA,WAAAyQ,EAAA,iBACAuB,EAAA7S,OAAAwK,EAAA,EAAAxK,CAAAmL,EAAAsL,EAAAhX,KAAA,OAAAoB,GACAkS,EAAA/S,OAAAwK,EAAA,EAAAxK,CAAA+U,EAAA0B,EAAAhX,KAAA,OAAAoB,GACA+R,EAAA,WAAAtB,EACAtR,OAAAwK,EAAA,EAAAxK,CAAAmL,EAAAsL,EAAAhX,KAAA,uBACA4X,EACAvE,EAAA,WAAAxB,EACAtR,OAAAwK,EAAA,EAAAxK,CAAA+U,EAAA0B,EAAAhX,KAAA,uBACA4X,EACAjE,EAAArQ,EAAA0T,EAAAa,wBACAC,KAAAvX,OAAAwK,EAAA,EAAAxK,CAAA4S,KAEAS,EAAAtQ,EAAA0T,EAAAe,sBACAD,KAAAvX,OAAAwK,EAAA,EAAAxK,CAAA6S,KAEAS,EAAAvQ,EAAA0T,EAAAgB,yBACAF,KAAAvX,OAAAwK,EAAA,EAAAxK,CAAA8S,GAAA,QAEAS,EAAAxQ,EAAA0T,EAAAlD,oBACAgE,KAAAvX,OAAAwK,EAAA,EAAAxK,CAAA+S,GAAA,QAEA,OAAAvJ,EAAAnE,EAAAiG,cAAA+K,EAAA,GAAuD5K,QAAA2E,WAAAC,cAAAE,UACvD/G,EAAAnE,EAAAiG,cAAA+K,EAAA,GAA0D7W,OAAA2L,EAAAmG,aAAA/S,cAAA,EAAA6C,MAAA6V,EAAA/T,cAAA4C,EAAA5C,cAAAqO,iBAC1DrE,QAAA,WAAAoE,GAAA9H,EAAAnE,EAAAiG,cAAA+K,EAAA,GAAyG5K,MAAA1I,EAAA0T,EAAAD,UAAArM,YAAA0I,EAAAzG,iBAAA7N,EAAA,EAAA8N,mBAAAoK,EAAAvT,cAAAkH,aAAA2I,IAAmKvJ,EAAAnE,EAAAiG,cAAA+K,EAAA,GAAkDzD,qBAAAQ,sBAAAP,mBAAAQ,oBAAAjH,iBAAA7N,EAAA,EAAA8N,mBAAAoK,EAAAvT,cAAA4P,sBAAAQ,uBAAAP,oBAAAQ,uBAC9T/J,EAAAnE,EAAAiG,cAAAoM,EAAA,GAAuCtI,KAAAsH,EAAAxW,IAAAwP,KACvCvO,GAAAuO,EACAtO,MAAAyI,KAAA8L,YAAAjG,GACAnC,QAAA1D,KAAAoM,aACiB9H,SAAAiI,EAAA/G,SAAAxF,KAAAyM,uBC/FjBqB,EAAA3X,OAAAsU,EAAA,EAAAtU,CAAAgK,KAEA4N,QAAAnD,EAAA,EAAAoD,qBAAA7N,MAGA8N,EAAA9X,OAAAmQ,EAAA,EAAAnQ,UAAA0V,EAAA,EAAA1V,CAAA2X,GACAI,mBAAAC,EAAA,EAAAD,oBADA/X,CAVA,EAA2B+C,IAAAgV,qBAAAH,aAAkCpO,EAAAnE,EAAAiG,cAAA,WAC7D9B,EAAAnE,EAAAiG,cAAA2M,EAAA,GAA+BtE,OAAA,MAAeiE,EAAA1X,IAAAqU,GAC9C/K,EAAAnE,EAAAiG,cAAA4M,EAAA,GAA+CC,GAAA,EAAAC,GAAA,EAAA1Y,IAAA6U,GAC/C/K,EAAAnE,EAAAiG,cAAAmK,GAAqDlB,mBAUrD7O,EAAA,2MCnBA,MAAAuD,EAAAC,EAAA,EAAAC,QACAkP,MACAvJ,QAAA,OACAC,WAAA,SACAiC,eAAA,SACAjF,OAAA,OACAgC,UAAA,QAEAuK,UACA1K,UAAA,UAEA2K,eACAxK,UAAA,QAEAgC,UACAC,MAAAnH,EAAA,EAAAoH,IACAlC,UAAA,QAEAtC,OACAsC,UAAA,UChBAyK,EAAA,EAAqBD,gBAAAnI,WAAA3E,WAAkCjC,EAAAnE,EAAAiG,cAAA,WACvD9B,EAAAnE,EAAAiG,cAAAkF,EAAA,GAA+B1D,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAAoP,OAC/B7O,EAAAnE,EAAAiG,cAAA,OAAoCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAAqP,WACpC9O,EAAAnE,EAAAiG,cAAA2M,EAAA,GAAuCtE,OAAA,MACvCnK,EAAAnE,EAAAiG,cAAA4M,EAAA,GAA+CO,GAAA,EAAAL,GAAA,IAC/C5O,EAAAnE,EAAAiG,cAAA4M,EAAA,GAA+CO,GAAA,GAAAL,GAAA,GAC/C5O,EAAAnE,EAAAiG,cAAAoN,EAAA,GAAyD/H,KAAA,OACzDnH,EAAAnE,EAAAiG,cAAAoF,EAAA,GAAgD5D,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAAwC,OAAAkF,KAAA,MAA2ClF,GAC3FyB,QAAAkD,IAAA5G,EAAAnE,EAAAiG,cAAA,KAAoEwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAA8G,WAAkCK,GACtGlD,QAAAqL,IAAA/O,EAAAnE,EAAAiG,cAAA,OAA2EwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAAsP,gBAAuCA,IAClH/O,EAAAnE,EAAAiG,cAAA4M,EAAA,GAA+CO,GAAA,EAAAL,GAAA,QC4C/C,MAAA/D,EAAArU,OAAAsU,EAAA,EAAAtU,CAAAgK,IACA,MAAA0M,KACA5P,EAAA6R,EAAA,EAAAC,gBAAA5O,GACA,GAAAlD,KAAA+R,QAAA,CACA,IAAAC,GAAA,EACAC,GAAA,EACA,UAAAC,KAAAlS,EAAA+R,QACA,QAAAG,EAAAvZ,KACAqZ,GAAA,EAEA,QAAAE,EAAAvZ,OACAsZ,GAAA,GAGAD,GACApC,EAAAnM,KAAA,OAEAwO,GACArC,EAAAnM,KAAA,OAGA,OACAmM,gBACA5P,YACAmS,qBAAAN,EAAA,EAAAO,2BAAAlP,MAGAmP,EAAAnZ,OAAAmQ,EAAA,EAAAnQ,UAAA0V,EAAA,EAAA1V,CAAAqU,GACA0D,mBAAAC,EAAA,EAAAD,oBADA/X,eA1EAwJ,EAAAnE,EAAAoE,UACAC,cACAC,SAAAC,WACAC,KAAAG,OACAoM,WAAA,OAEAvM,KAAA8L,YAAA,CAAAjG,IACA,MAAA3M,EAAmBA,GAAI8G,KAAAQ,MACvB,cAAAqF,EACA3M,EAAA,gBAEA,QAAA2M,EACA3M,EAAA,qBADA,IAIA8G,KAAAoM,UAAA,CAAAC,GAEA,QADAA,EAAA/U,GAEAqI,EAAAnE,EAAAiG,cAAA8N,EAAA,QAGA5P,EAAAnE,EAAAiG,cAAAmJ,EAAA,SAGA5K,KAAAyM,gBAAA,CAAAC,IACA1M,KAAAkB,UAA2BqL,WAAAG,MAG3B7M,SACA,MAAAgN,cAAeA,EAAAqB,qBAAAjR,YAAAmS,uBAAAlW,KAAyE8G,KAAAQ,OACxF+L,WAAeA,GAAavM,KAAAG,MAC5BqP,EAAA7P,EAAAnE,EAAAiG,cAAAyI,EAAA,EAAA/T,OAAAoE,UAA0EpE,OAAA6F,EAAA,EAAA7F,CAAA6F,EAAA,EAAAiB,UAAAC,UAA4C8D,QAAAkN,EAAAtY,KAAAsU,EAAA,EAAAtN,OAAA0N,QAAAJ,EAAA,EAAAuF,YAAyFvW,EAAA,yBAC/M,OAAAyG,EAAAnE,EAAAiG,cAAA,OAA4CwB,UAAA,iDAC5CtD,EAAAnE,EAAAiG,cAAA,UAA2CwB,UAAA,gFAC3CtD,EAAAnE,EAAAiG,cAAAoF,EAAA,GAA4CC,KAAAD,EAAA,EAAA0H,IAAqBrV,EAAA,mBACjEsW,GACA7P,EAAAnE,EAAAiG,cAAA,WAAA4B,QAAApG,GACAA,EAAAiQ,MAAA,GACA,IAAAkC,GAAAzP,EAAAnE,EAAAiG,cAAA8D,EAAA,GAAyFX,SAAAvB,SAAA,GAAAkC,KAAAsH,EAAAxW,IAAAwP,KACzFvO,GAAAuO,EACAtO,MAAAyI,KAAA8L,YAAAjG,GACAnC,QAAA1D,KAAAoM,aACiB9H,SAAAiI,EAAA/G,SAAAxF,KAAAyM,kBAA0D9M,EAAAnE,EAAAiG,cAAA2M,EAAA,GAAiCtE,OAAA,MAC5GnK,EAAAnE,EAAAiG,cAAA4M,EAAA,OACA1O,EAAAnE,EAAAiG,cAAAkN,GAAqDD,cAAAc,EAAA5N,MAAA1I,EAAA,8BAAAqN,SAAArN,EAAA,uCAiCrD2C,EAAA,qLCvFA,MAAAuD,EAAAC,EAAA,EAAAC,QACA2G,eACA/D,OAAA,QAEAgE,UACApH,SAAAE,EAAA,EAAArK,MACAwR,MAAAnH,EAAA,EAAAoH,IACAnC,aAAA,OCEAyL,EAAAvZ,OAAAmQ,EAAA,EAAAnQ,GANA,EAA+ByL,QAAA2E,WAAAC,cAAAC,WAAAC,SAAAxN,OAAqDyG,EAAAnE,EAAAiG,cAAAkF,EAAA,GAAiC1D,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAA6G,gBACrHtG,EAAAnE,EAAAiG,cAAAmF,EAAA,OACAjH,EAAAnE,EAAAiG,cAAAoF,EAAA,GAAoCC,KAAA,MAAalF,GACjDyB,QAAAkD,IAAA5G,EAAAnE,EAAAiG,cAAA,KAAuDwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAiJ,EAAA8G,WAAkCK,IACzF5G,EAAAnE,EAAAiG,cAAAsF,EAAA,WAAAL,KAA2ExN,EAAA,gBAAauN,GACxFpD,QAAAmD,IAAA7G,EAAAnE,EAAAiG,cAAAuF,EAAA,OAAAR,KCRAmJ,EAAAtQ,EAAA,EAAAC,QACA4H,sBACAjD,aAAAjF,EAAA,EAAArK,MACAsQ,QAAA,OACAC,WAAA,YAEAvQ,OACAwR,MAAAnH,EAAA,EAAAoH,IACA/B,YAAArF,EAAA,EAAArK,MACAmK,SAAAE,EAAA,EAAArK,OAEAyS,MACAE,cAAA,GACAC,WAAAvI,EAAA,EAAArK,MACAmK,SAAAE,EAAA,EAAArK,SCbAib,EAAA,EAAkCrY,QAAA7C,cAAA2E,gBAAA1D,aAClC,IAAAhB,EAAA,OAMA,OALAgB,IACAhB,EAAAgB,EAAAa,MACA9B,EAAAiB,EAAAa,MAAA7B,MAAAgB,EAAAa,MAAAoB,MAAAyB,GACA,GAEAsG,EAAAnE,EAAAiG,cAAA,OAAwCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAwZ,EAAAzI,uBACxCvH,EAAAnE,EAAAiG,cAAA,OAAoCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAwZ,EAAAhb,QAA+BA,GACnEgL,EAAAnE,EAAAiG,cAAA,OAAoCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAAwZ,EAAAvI,OACpCzH,EAAAnE,EAAAiG,cAAA,WAAAlK,kBCXA,MAAAsY,EAAAxQ,EAAA,EAAAC,QACAuI,mBACAC,qBACA7D,aAAAjF,EAAA,EAAArK,QAGAoT,MACAvI,iBACAC,SAAA,cCNAqQ,EAAA,EAA+BvY,QAAA5C,QAAAsT,aAAAvT,cAAAkD,QAAAyB,oBAC/B,MACA6O,EAAA1Q,QADAyQ,EAAAtT,EAAAsT,EAAA,OACA7S,QAAA,IACA+S,KAA4BzT,EAAAC,EAAAiD,EAAAyB,OAA6C6O,MACzE,OAAAvI,EAAAnE,EAAAiG,cAAA,MAAuCwB,UAAA9M,OAAAkJ,EAAA,EAAAlJ,CAAA0Z,EAAAhI,oBACvClI,EAAAnE,EAAAiG,cAAA2G,EAAA,GAAuC7Q,MAAA4Q,EAAAxT,MAAAuT,EAAAtG,MAAArK,EAAAuP,KAAAsB,EAAA,EAAAC,OAEvCyH,EAAAxH,cACA5T,YAAA6T,yBCVAwH,UAAApQ,EAAAnE,EAAAoE,UACAC,sBAAA4I,GACA,OAAAA,EAAA9S,SAAAqK,KAAAQ,MAAA7K,OAEAkK,WACA,MAAAlK,OAAeA,EAAAI,QAAAyD,YAA0BwG,KAAAQ,MACzCtK,EAAAC,OAAA2H,EAAA,EAAA3H,EACAR,SACAI,QACAyD,aAEAkP,EAAAxS,EAAAyP,UAAArP,GAAA,UAAAA,EAAAgB,IACA,WAAAoR,MAEAxS,EAAAyS,MAAA,EAAAD,MACAxS,EAAAyS,MAAAD,EAAA,GACAxS,EAAAwS,IAGAxS,EAEA2J,SACA,MAAAlK,OAAeA,EAAA8Q,YAAmBzG,KAAAQ,MAClC,IAAA7K,EACA,YAEA,MAAAG,EAAAkK,KAAA4I,WACA,OAAAjJ,EAAAnE,EAAAiG,cAAA,UAAAgF,GAAyD3Q,yBC3BzD,MAAAka,EAAAxP,GAAAb,EAAAnE,EAAAiG,cAAA,OAAoEnM,OAAS2O,aAAA,KAC7EtE,EAAAnE,EAAAiG,cAAAqH,EAAA,EAAA3S,OAAAoE,QAAmD2H,OAAA,IAAa1B,6HCahE,MAAA+J,EAAA1E,IACA,OAAAA,GACA,eACA,gBACA,eACA,gBACA,cACA,eACA,oBACA,wBAmEA,MAAA2E,EAAArU,OAAAsU,EAAA,EAAAtU,CAAA,CAAAgK,GAAuDuK,eACvD,MAAAC,EAAA4E,EAAA,EAAA1E,aAAA1K,EAAAuK,GACAI,EAAAyE,EAAA,EAAAxE,oBAAA5K,EAAAuK,GACA,OAAAvU,OAAAoE,UAA2BoQ,GAAWK,aAAAF,EAAAxJ,QAAA2J,cAAAH,EAAAI,SAAAC,UAAAL,EAAAvF,KAAAjE,QAAA2O,EAAA,EAAA5E,aAAAlL,EAAAwK,EAAAlD,WAAAqD,EAAAxJ,SAAA4J,SAAA+E,EAAA,EAAA5E,aAAAlL,EAAAwK,EAAAlD,WAAAqD,EAAAI,UAAA3F,KAAA0K,EAAA,EAAA5E,aAAAlL,EAAAwK,EAAAlD,WAAAqD,EAAAvF,MAAAmB,OAAAuJ,EAAA,EAAA3E,wBAAAnL,EAAAwK,EAAAlD,WAAAqD,EAAAxJ,aAEtCiK,GACAC,aAAA+D,EAAA,EAAA9D,mBACAC,UAAA6D,EAAA,EAAA5D,iBAEAuE,EAAA/Z,OAAAmQ,EAAA,EAAAnQ,UAAA0V,EAAA,EAAA1V,CAAAqU,EAAAe,EAAApV,eAzEAwJ,EAAAnE,EAAAoE,UACAC,cACAC,SAAAC,WACAC,KAAA8L,YAAA,CAAAjG,IACA,MAAA3M,EAAmBA,GAAI8G,KAAAQ,MAEvB,OAAAtH,EAAA,gBAAsC8B,QADtCuP,EAAA1E,IAAA,OAGA7F,KAAA+L,oBAAA,CAAAlG,IACA,MAAA3M,EAAmBA,GAAI8G,KAAAQ,MAEvB,OAAAtH,EAAA,gBAAsC8B,QADtCuP,EAAA1E,IAAA,OAGA7F,KAAAgM,iBAAA,MACA,MAAAhB,aAAmBA,GAAehL,KAAAQ,MAClCxF,EAAA7E,OAAAga,EAAA,EAAAha,CAAA6U,GAAAkB,SACA,cAA2B/V,OAAAga,EAAA,EAAAha,EAC3B+V,SAAAlR,EACAmR,UAA2B3V,MAAA,cAG3BwJ,KAAAoM,UAAA,CAAAC,IACA,MAAA9G,KAAmBA,EAAA+G,YAAiBtM,KAAAQ,MACpC+L,EAAAF,EAAA/U,GACA,OAAAqI,EAAAnE,EAAAiG,cAAAsO,GAAgEha,MAAAwU,EAAAgC,GAAA5W,OAAA4P,GAAkD,EAAIzP,WAAQA,EAAAO,IAAAuN,GAAAjE,EAAAnE,EAAAiG,cAAAqO,GAAsEja,IAAA+N,EAAAtM,GAAA+B,cAAAiT,EAAAjT,cAAA3E,YAAA0b,EAAA,EAAA7Y,MAAAqM,EAAArM,MAAA+B,WAAA2O,WAAA1C,EAAA/O,MAAA7B,MAAAiD,MAAAgM,EAAAhM,MAAAjD,MAAAiP,EAAApN,YAEpMwJ,KAAAyM,gBAAA,CAAAC,IACA1M,KAAAQ,MAAAkL,UAAA1L,KAAAQ,MAAAlJ,GAAAoV,KAGA7M,oBACA,MAAA2L,aAAeA,EAAAd,YAAyB1K,KAAAQ,MACxCgL,EAAAd,GAEA7K,SACA,MAAA3G,EAAeA,EAAAyT,WAAAC,QAAA3Q,UAAAqF,UAAA4J,WAAA2B,gBAAAN,aAAA9E,aAAAf,UAAiG1G,KAAAQ,MAChHrI,EAAA,IAAAC,KACA0U,EAAAC,IAAA5U,GACAW,EAAAkU,IAAA7U,EAAA,MACAU,EAAAmU,IAAAC,IAAA9U,GAAA,MACAyJ,EAAA1I,EAAAyT,GAAmC7T,UAAAgU,QAAAjU,cACnC0N,EAAArN,EAAA,iCACAJ,UACAgU,QACAjU,YACAqU,MAAAC,IAAAhV,KAEAiV,EAAAlU,EAAA+C,EAAAzC,UACA6W,QAAApU,EAAAqU,kBAEA9J,EAAA,SAAAiB,GAAA9H,EAAAnE,EAAAiG,cAAA6L,EAAA,GAA4FC,GAAAvN,KAAAgM,oBAA8BhM,KAAA+L,oBAAAQ,IAC1HgE,EAAArX,EAAA0T,EAAAD,UACArM,EAAAnK,OAAAwK,EAAA,EAAAxK,CAAAmL,EAAAsL,EAAAhX,MACA2K,EAAApK,OAAAwK,EAAA,EAAAxK,CAAA+U,EAAA0B,EAAAhX,MACA,OAAA+J,EAAAnE,EAAAiG,cAAAiO,GAAuD9N,QAAA2E,WAAAC,cAAAE,UACvD/G,EAAAnE,EAAAiG,cAAAmO,GAA0Dja,OAAA2L,EAAA5M,YAAA0b,EAAA,EAAA7Y,MAAA6V,EAAA/T,cAAA4C,EAAA5C,gBAC1DsG,EAAAnE,EAAAiG,cAAAuO,GAAwDpO,MAAA2O,EAAAjQ,cAAAiC,iBAAA6N,EAAA,EAAA5N,mBAAAoK,EAAAvT,cAAAkH,iBACxDZ,EAAAnE,EAAAiG,cAAAoM,EAAA,GAAuCtI,KAAAsH,EAAAxW,IAAAwP,KACvCvO,GAAAuO,EACAtO,MAAAyI,KAAA8L,YAAAjG,GACAnC,QAAA1D,KAAAoM,aACiB9H,SAAAiI,EAAA/G,SAAAxF,KAAAyM,uBC5EjB+D,EAAAra,OAAAsU,EAAA,EAAAtU,CAAAgK,KAEA4N,QAAAwB,EAAA,EAAAvB,qBAAA7N,MAGAsQ,EAAAta,OAAAmQ,EAAA,EAAAnQ,UAAA0V,EAAA,EAAA1V,CAAAqa,GACAtC,mBAAAC,EAAA,EAAAD,oBADA/X,CAVA,EAA2B+C,IAAAgV,qBAAAH,aAAkCpO,EAAAnE,EAAAiG,cAAA,WAC7D9B,EAAAnE,EAAAiG,cAAA2M,EAAA,GAA+BtE,OAAA,MAAeiE,EAAA1X,IAAAqU,GAC9C/K,EAAAnE,EAAAiG,cAAA4M,EAAA,GAA+CC,GAAA,EAAAC,GAAA,EAAA1Y,IAAA6U,GAC/C/K,EAAAnE,EAAAiG,cAAAyO,GAAqDxF,mBAUrD7O,EAAA,wECnBAA,EAAA,EAAA1F,OAAAua,EAAA,IAAAva,CAAAwa,EAAA,CAAAC,EAAA,6FCAA/U,EAAA,EAAA1F,OAAAua,EAAA,IAAAva,CAAAwa,EAAA,CAAAE,EAAA,mGCAAhV,EAAA,QAAA1F,OAAAua,EAAA,IAAAva,CAAAwa,EAAA,CAAAG,EAAA","file":"d180a1f542669513b76e.bundle.js","sourcesContent":["export const unitLookupKey = unit => unit ? unit.split('-')[0].toLowerCase() : '';\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d.total, d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'charge') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = true, lastOfMonth = false) {\n    const [start, end] = getDatumDateRange(datums);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    const monthName = format(start, 'MMM');\n    const startDate = getDate(start);\n    const endDate = getDate(end);\n    return `${monthName} ${getDate(start)}${startDate !== endDate ? ` - ${endDate}` : ''}`;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'hrs':\n            case 'gb':\n                return i18next.t(`units.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'MMM D YYYY');\n        return `${date}: ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'charge', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity;\n                const charge = value.charge;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                const limit = value.limit;\n                const request = value.request;\n                const usage = value.usage;\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        app: value.app,\n                        capacity,\n                        charge,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        label,\n                        limit,\n                        request,\n                        units: value.units || usage ? 'GB' : 'USD',\n                        usage,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { capacity: itemMap[id].capacity + capacity, charge: itemMap[id].charge + charge, limit: itemMap[id].limit + limit, request: itemMap[id].request + request, usage: itemMap[id].usage + usage });\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_btn: 'tag-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import { sort } from './sort';\nconst groups = ['services', 'accounts', 'instance_types', 'regions'];\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'total', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const total = value.total;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        total,\n                        label,\n                        units: value.units,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { total: itemMap[id].total + total });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    axis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    colorScale: [global_success_color_100.value, global_primary_color_100.value],\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, \n// ChartLegend,\nChartTheme, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { getDateRangeString, getTooltipContent, getTooltipLabel, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { VictoryAxis, VictoryLegend } from 'victory';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            const legendData = [];\n            if (previousData && previousData.length) {\n                legendData.push({\n                    name: getDateRangeString(previousData, true, true),\n                });\n            }\n            if (currentData && currentData.length) {\n                legendData.push({\n                    name: getDateRangeString(currentData),\n                });\n            }\n            const cost = {\n                charts: [\n                    {\n                        data: previousData,\n                        show: true,\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        data: currentData,\n                        show: true,\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.colorScale,\n                    data: legendData,\n                    onClick: this.handleCostLegendClick,\n                },\n            };\n            this.setState({\n                datum: {\n                    cost,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.cost.charts.length) {\n                newDatum.cost.charts[props.index].show = !newDatum.cost.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, key: `trend-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width) => {\n            const { title } = this.props;\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(VictoryLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], height: 50, theme: ChartTheme.light.blue, title: title, width: width }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel });\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryTrend), ref: this.containerRef },\n            React.createElement(\"div\", null,\n                React.createElement(Chart, { containerComponent: container, height: height, width: width },\n                    Boolean(datum && datum.cost) &&\n                        datum.cost.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(VictoryAxis, { style: chartStyles.axis }),\n                    React.createElement(VictoryAxis, { dependentAxis: true, style: chartStyles.axis }))),\n            this.getLegend(datum && datum.cost ? datum.cost.legend : {}, width)));\n    }\n}\nexport { TrendChart };\n","import React from 'react';\nexport const TabContent = ({ data }) => {\n    const content = typeof data.content === 'function' ? data.content(data) : data.content;\n    return React.createElement(\"div\", { role: \"tabpanel\" }, content);\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_primary_color_100, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItem: {\n        position: 'relative',\n        flexGrow: 1,\n        textAlign: 'center',\n        fontSize: global_FontSize_md.value,\n        padding: global_spacer_sm.value,\n        cursor: 'pointer',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    tabItemShrink: {\n        flexGrow: '0',\n        flexShrink: '2',\n        marginRight: '20px',\n    },\n    selected: {\n        backgroundImage: `linear-gradient(to top, ${global_primary_color_100.value} 2px, transparent 2px)`,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './tabItem.styles';\nclass TabItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            const { onSelect, data } = this.props;\n            onSelect(data.id);\n        };\n    }\n    render() {\n        const { data, isSelected, isShrink } = this.props;\n        return (React.createElement(\"div\", { role: \"tab\", onClick: this.handleClick, \"aria-selected\": isSelected, tabIndex: isSelected ? 0 : -1, className: css(styles.tabItem, isSelected && styles.selected, isShrink && styles.tabItemShrink) }, data.label));\n    }\n}\nexport { TabItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '../../../node_modules/@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabNavigation: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginBottom: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { TabItem } from './tabItem';\nimport { styles } from './tabNavigation.styles';\nclass TabNavigation extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleKeyDown = (event) => {\n            if (!['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n                return;\n            }\n            const { selected, tabs, onChange } = this.props;\n            const modifier = event.key === 'ArrowRight' ? 1 : -1;\n            const selectedIndex = tabs.findIndex(t => t.id === selected.id);\n            const newIndex = selectedIndex + modifier;\n            if (newIndex < 0 || newIndex > tabs.length - 1) {\n                return;\n            }\n            onChange(tabs[newIndex].id);\n        };\n    }\n    render() {\n        const { isShrink, tabs, selected, onChange } = this.props;\n        return (React.createElement(\"div\", { role: \"tablist\", className: css(styles.tabNavigation), onKeyDown: this.handleKeyDown }, tabs.map(tab => (React.createElement(TabItem, { isShrink: isShrink, onSelect: onChange, key: tab.id, data: tab, isSelected: tab.id === selected.id })))));\n    }\n}\nexport { TabNavigation };\n","import React from 'react';\nimport { TabContent } from './tabContent';\nimport { TabNavigation } from './tabNavigation';\nconst Tabs = ({ isShrink, selected, tabs, onChange }) => {\n    if (tabs.length === 0) {\n        return React.createElement(\"div\", null, \"No data was found\");\n    }\n    const selectedTab = tabs.find(tab => tab.id === selected);\n    return (React.createElement(\"div\", null,\n        React.createElement(TabNavigation, { isShrink: isShrink, tabs: tabs, selected: selectedTab || tabs[0], onChange: onChange }),\n        React.createElement(TabContent, { data: selectedTab || tabs[0] })));\n};\nexport { Tabs };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: global_spacer_md.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n        marginRight: global_spacer_sm.value,\n    },\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetails = ({ label, formatValue, formatOptions, report, reportType = \"charge\" /* charge */, requestLabel, }) => {\n    let value = '----';\n    let requestValue = '----';\n    if (report && report.total) {\n        if (reportType === \"charge\" /* charge */) {\n            const units = report.total.units ? report.total.units : 'USD';\n            value = formatValue(report.total.charge, units, formatOptions);\n        }\n        else {\n            const units = report.total.units ? report.total.units : 'GB';\n            value = formatValue(report.total.usage, units, formatOptions);\n            requestValue = formatValue(report.total.request, units, formatOptions);\n        }\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) },\n            value,\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, label))),\n        Boolean(reportType !== \"charge\" /* charge */) && (React.createElement(\"div\", { className: css(styles.value) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n};\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = `${formatValue(value, units, formatOptions)} (${percentVal}%)`;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { OcpReportSummaryItem };\n","import React from 'react';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nclass OcpReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { OcpReportSummaryItems, };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { OcpReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_primary_color_100, global_success_color_100, global_warning_color_100, global_warning_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    axis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_warning_color_100.value,\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_primary_color_100.value,\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_warning_color_200.value,\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_success_color_100.value,\n        },\n    },\n    requestColorScale: [\n        global_warning_color_200.value,\n        global_warning_color_100.value,\n    ],\n    usageColorScale: [\n        global_success_color_100.value,\n        global_primary_color_100.value,\n    ],\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, \n// ChartLegend,\nChartTheme, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { getTooltipContent, getTooltipLabel, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { VictoryAxis, VictoryLegend } from 'victory';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentRequestLabel, currentUsageData, currentUsageLabel, previousRequestData, previousRequestLabel, previousUsageData, previousUsageLabel, } = this.props;\n            const requestLegendData = [];\n            if (previousRequestLabel) {\n                requestLegendData.push({\n                    name: previousRequestLabel,\n                });\n            }\n            if (currentRequestLabel) {\n                requestLegendData.push({\n                    name: currentRequestLabel,\n                });\n            }\n            const request = {\n                charts: [\n                    {\n                        data: previousRequestData,\n                        show: true,\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        data: currentRequestData,\n                        show: true,\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.requestColorScale,\n                    data: requestLegendData,\n                    onClick: this.handleRequestLegendClick,\n                },\n            };\n            const usageLegendData = [];\n            if (previousUsageLabel) {\n                usageLegendData.push({\n                    name: previousUsageLabel,\n                });\n            }\n            if (currentUsageLabel) {\n                usageLegendData.push({\n                    name: currentUsageLabel,\n                });\n            }\n            const usage = {\n                charts: [\n                    {\n                        data: previousUsageData,\n                        show: true,\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        data: currentUsageData,\n                        show: true,\n                        style: chartStyles.currentUsageData,\n                    },\n                ],\n                legend: {\n                    colorScale: chartStyles.usageColorScale,\n                    data: usageLegendData,\n                    gutter: 55,\n                    onClick: this.handleUsageLegendClick,\n                },\n            };\n            this.setState({\n                datum: {\n                    request,\n                    usage,\n                },\n            });\n        };\n        this.handleRequestLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.request.charts.length) {\n                newDatum.request.charts[props.index].show = !newDatum.request.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n        this.handleUsageLegendClick = props => {\n            const { datum } = this.state;\n            const newDatum = Object.assign({}, datum);\n            if (props.index >= 0 && newDatum.usage.charts.length) {\n                newDatum.usage.charts[props.index].show = !newDatum.usage.charts[props.index].show;\n                this.setState({ datum: newDatum });\n            }\n        };\n        this.getChart = (datum, index) => {\n            if (datum.data && datum.data.length && datum.show) {\n                return (React.createElement(ChartArea, { data: datum.data, key: `usage-chart-${index}`, style: datum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (datum, width, gutter = 20) => {\n            const { title } = this.props;\n            if (datum && datum.data && datum.data.length) {\n                return (React.createElement(VictoryLegend, { colorScale: datum.colorScale, data: datum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [\n                                        {\n                                            target: 'data',\n                                            mutation: props => {\n                                                datum.onClick(props);\n                                                return null;\n                                            },\n                                        },\n                                    ];\n                                },\n                            },\n                        },\n                    ], gutter: gutter, height: 25, theme: ChartTheme.light.blue, title: title, width: width }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { height } = this.props;\n        const { datum, width } = this.state;\n        const container = React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel });\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryTrend), ref: this.containerRef },\n            React.createElement(\"div\", null,\n                React.createElement(Chart, { containerComponent: container, height: height, width: width },\n                    Boolean(datum && datum.request) &&\n                        datum.request.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    Boolean(datum && datum.usage) &&\n                        datum.usage.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(VictoryAxis, { style: chartStyles.axis }),\n                    React.createElement(VictoryAxis, { dependentAxis: true, style: chartStyles.axis }))),\n            this.getLegend(datum && datum.usage ? datum.usage.legend : {}, width, 55),\n            this.getLegend(datum && datum.request ? datum.request.legend : {}, width)));\n    }\n}\nexport { UsageChart };\n","import React from 'react';\nimport { UsageChart } from '../usageChart';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(UsageChart, Object.assign({ height: 75 }, props))));\nexport { OcpReportSummaryUsage };\n","import { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nconst CastedButton = Button;\nconst Link = props => (React.createElement(CastedButton, Object.assign({ component: RouterLink, variant: \"link\" }, props)));\nexport { Link };\n","import { getQuery, parseQuery } from 'api/ocpQuery';\nimport { getDateRangeString, transformOcpReport, } from 'components/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { OcpReportSummary, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/ocpReportSummary';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/ocp?${getQuery({\n                group_by: groupBy,\n                order_by: { charge: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { reportType, tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(OcpReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(OcpReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label.toString(), totalValue: reportType === \"charge\" /* charge */\n                    ? tabs.total.charge\n                    : tabs.total.usage, units: tabItem.units, value: reportType === \"charge\" /* charge */\n                    ? tabItem.charge\n                    : tabItem.usage })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('ocp_dashboard.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey);\n        const requestLabel = t(details.requestLabelKey);\n        const detailsLink = reportType === \"charge\" /* charge */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const reportItem = reportType === \"charge\" /* charge */ ? 'charge' : 'usage';\n        const currentUsageData = transformOcpReport(current, trend.type, 'date', reportItem);\n        const previousUsageData = transformOcpReport(previous, trend.type, 'date', reportItem);\n        const currentRequestData = reportType !== \"charge\" /* charge */\n            ? transformOcpReport(current, trend.type, 'date', 'request')\n            : undefined;\n        const previousRequestData = reportType !== \"charge\" /* charge */\n            ? transformOcpReport(previous, trend.type, 'date', 'request')\n            : undefined;\n        const currentRequestLabel = t(trend.currentRequestLabelKey, {\n            date: getDateRangeString(currentRequestData),\n        });\n        const currentUsageLabel = t(trend.currentUsageLabelKey, {\n            date: getDateRangeString(currentUsageData),\n        });\n        const previousRequestLabel = t(trend.previousRequestLabelKey, {\n            date: getDateRangeString(previousRequestData, true, true),\n        });\n        const previousUsageLabel = t(trend.previousUsageLabel, {\n            date: getDateRangeString(previousUsageData, true, true),\n        });\n        return (React.createElement(OcpReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(OcpReportSummaryDetails, { report: current, reportType: reportType, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions, requestLabel: requestLabel }),\n            Boolean(reportType === \"charge\" /* charge */) ? (React.createElement(OcpReportSummaryTrend, { title: t(trend.titleKey), currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousData: previousUsageData })) : (React.createElement(OcpReportSummaryUsage, { currentRequestData: currentRequestData, currentRequestLabel: currentRequestLabel, currentUsageData: currentUsageData, currentUsageLabel: currentUsageLabel, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousRequestData: previousRequestData, previousRequestLabel: previousRequestLabel, previousUsageData: previousUsageData, previousUsageLabel: previousUsageLabel })),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), previous: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { uiActions } from 'store/ui';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ t, openProvidersModal, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200 } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    card: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '75vh',\n        marginTop: '30px',\n    },\n    cardBody: {\n        textAlign: 'center',\n    },\n    primaryAction: {\n        marginTop: '60px',\n    },\n    subtitle: {\n        color: global_Color_200.var,\n        marginTop: '30px',\n    },\n    title: {\n        marginTop: '30px',\n    },\n});\n","import { Card, Grid, GridItem, Title } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyState.styles';\nconst EmptyState = ({ primaryAction, subTitle, title, }) => (React.createElement(\"div\", null,\n    React.createElement(Card, { className: css(styles.card) },\n        React.createElement(\"div\", { className: css(styles.cardBody) },\n            React.createElement(Grid, { gutter: \"lg\" },\n                React.createElement(GridItem, { md: 1, lg: 2 }),\n                React.createElement(GridItem, { md: 10, lg: 8 },\n                    React.createElement(DollarSignIcon, { size: \"xl\" }),\n                    React.createElement(Title, { className: css(styles.title), size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n                    Boolean(primaryAction) && (React.createElement(\"div\", { className: css(styles.primaryAction) }, primaryAction))),\n                React.createElement(GridItem, { md: 1, lg: 2 }))))));\nexport { EmptyState };\n","import { Button, ButtonType, ButtonVariant, Grid, GridItem, Title, TitleSize, } from '@patternfly/react-core';\nimport { Tabs } from 'components/tabs';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport AwsDashboard from '../awsDashboard';\nimport OcpDashboard from '../ocpDashboard';\nimport { EmptyState } from './emptyState';\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            currentTab: \"aws\" /* aws */,\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.renderTab = (tabData) => {\n            const currentTab = tabData.id;\n            if (currentTab === \"aws\" /* aws */) {\n                return React.createElement(AwsDashboard, null);\n            }\n            else {\n                return React.createElement(OcpDashboard, null);\n            }\n        };\n        this.handleTabChange = (tabId) => {\n            this.setState({ currentTab: tabId });\n        };\n    }\n    render() {\n        const { availableTabs, openProvidersModal, providers, providersFetchStatus, t, } = this.props;\n        const { currentTab } = this.state;\n        const addSourceBtn = (React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { onClick: openProvidersModal, type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_source')));\n        return (React.createElement(\"div\", { className: \"pf-l-page__main-section pf-u-pb-xl pf-u-px-xl\" },\n            React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                React.createElement(Title, { size: TitleSize.lg }, t('overview.title')),\n                addSourceBtn),\n            React.createElement(\"div\", null, Boolean(providers &&\n                providers.count > 0 &&\n                providersFetchStatus === 2 /* complete */) ? (React.createElement(Tabs, { isShrink: Boolean(true), tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })) : (React.createElement(Grid, { gutter: \"lg\" },\n                React.createElement(GridItem, null,\n                    React.createElement(EmptyState, { primaryAction: addSourceBtn, title: t('overview.empty_state_title'), subTitle: t('overview.empty_state_desc') })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const availableTabs = [];\n    const providers = providersSelectors.selectProviders(state);\n    if (providers && providers.results) {\n        let showAWSTab = false;\n        let showOCPTab = false;\n        for (const result of providers.results) {\n            if (result.type === 'AWS') {\n                showAWSTab = true;\n            }\n            else if (result.type === 'OCP') {\n                showOCPTab = true;\n            }\n        }\n        if (showAWSTab) {\n            availableTabs.push(\"aws\" /* aws */);\n        }\n        if (showOCPTab) {\n            availableTabs.push(\"ocp\" /* ocp */);\n        }\n    }\n    return {\n        availableTabs,\n        providers,\n        providersFetchStatus: providersSelectors.selectProvidersFetchStatus(state),\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(OverviewBase));\nexport default Overview;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetails = ({ label, formatValue, formatOptions, report, }) => {\n    let value = '----';\n    if (report) {\n        value = report.total\n            ? formatValue(report.total.value, report.total.units, formatOptions)\n            : 0;\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) }, value),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, label))));\n};\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = `${formatValue(value, units, formatOptions)} (${percentVal}%)`;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { AwsReportSummaryItem };\n","import React from 'react';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nclass AwsReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { AwsReportSummaryItems, };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { AwsReportSummaryTrend };\n","import { getQuery, parseQuery } from 'api/awsQuery';\nimport { AwsReportSummary, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/awsReportSummary';\nimport { transformAwsReport } from 'components/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/aws?${getQuery({\n                group_by: groupBy,\n                order_by: { total: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(AwsReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(AwsReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label.toString(), totalValue: tabs.total.value, units: tabItem.units, value: tabItem.total })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('aws_dashboard.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey, {\n            context: details.labelKeyContext,\n        });\n        const detailsLink = reportType === \"cost\" /* cost */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const trendTitle = t(trend.titleKey);\n        const currentData = transformAwsReport(current, trend.type);\n        const previousData = transformAwsReport(previous, trend.type);\n        return (React.createElement(AwsReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(AwsReportSummaryDetails, { report: current, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions }),\n            React.createElement(AwsReportSummaryTrend, { title: trendTitle, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousData: previousData }),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), previous: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { uiActions } from 'store/ui';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ t, openProvidersModal, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { hot } from 'react-hot-loader';\nimport OcpDashboard from './ocpDashboard';\nexport default hot(module)(OcpDashboard);\n","import { hot } from 'react-hot-loader';\nimport AwsDashboard from './awsDashboard';\nexport default hot(module)(AwsDashboard);\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}