{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","PerspectiveBase","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","t","label","getCurrentLabel","currentItem","onItemClicked","handleSelect","setState","handleToggle","isDisabled","dropdownItems","style","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","Perspective","withTranslation","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","costLabel","costValue","marginTop","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupByClicked","providersError","showContent","meta","count","hasCost","total","Title","headingLevel","size","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","toString","id","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","showTimeScope","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChart","containerRef","resizeObserver","noop","navToggle","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","units","getUnits","datum","initResizeObserve","containerElement","current","ResizeObserver","window","handleResize","observe","unobserve","addEventListener","removeEventListener","insights","chrome","on","handleNavToggle","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getChart","has","ChartBar","alignment","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","createContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","maxValue","forEach","s","max","y","getEvents","getInteractiveLegendEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","i","str","substr","maxChars","getTickValue","setTimeout","clientWidth","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartThemeColor","ChartStack","ChartAxis","dependentAxis","tickFormat","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAllCloudOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpOptions","ocpOptions","getComputedReportItemType","perspective","result","getDateRange","dateRange","getDateRangeDefault","today","Date","end_date","format","start_date","setMonth","getMonth","startOfMonth","setDate","getDate","getPerspectiveDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","isAwsAvailable","awsProviders","awsProvidersFetchStatus","userAccess","d","type","access","isAzureAvailable","azureProviders","azureProvidersFetchStatus","isGcpAvailable","gcpProviders","gcpsProvidersFetchStatus","isIbmAvailable","ibmProviders","ibmProvidersFetchStatus","isOcpAvailable","ocpProviders","ocpProvidersFetchStatus","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","month","yVal","parseFloat","getChartDatums","computedReportItemType","chartDatums","datums","Map","Array","from","padChartDatums","getChartTitle","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","padDate","chartDatum","formatValue","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgReportPathsType","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilter","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getDefaultPerspective","gcpProvidersFetchStatus","getPerspective","currentPerspective","_isAwsAvailable","_isAzureAvailable","_isGcpAvailable","_isIbmAvailable","_isOcpAvailable","handlePerspectiveClick","onPerspectiveClicked","noProviders","showOrgs","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","userAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","mapIdDate","rowItem","get","set","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","slice"],"mappings":"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","file":"4757e0f2d05fb116f546.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.azure_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.azure_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('details.tag_names'),\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupById,\n                        query,\n                    }) }, label));\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                {\n                    name: t('filter_by.values.subscription_guid'),\n                    key: 'subscription_guid',\n                },\n                { name: t('filter_by.values.service_name'), key: 'service_name' },\n                {\n                    name: t('filter_by.values.resource_location'),\n                    key: 'resource_location',\n                },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType, showTimeScope: true }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.azure_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { formatCurrencyAbbreviation } from 'utils/formatValue';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.resizeObserver = noop;\n        this.navToggle = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.initResizeObserve = () => {\n            const containerElement = this.containerRef.current;\n            const { ResizeObserver } = window;\n            if (containerElement && ResizeObserver) {\n                const resizeObserver = new ResizeObserver(this.handleResize);\n                resizeObserver.observe(containerElement);\n                this.resizeObserver = () => resizeObserver.unobserve(containerElement);\n            }\n            else {\n                this.handleResize();\n                window.addEventListener('resize', this.handleResize);\n                this.resizeObserver = () => window.removeEventListener('resize', this.handleResize);\n                this.navToggle = insights.chrome.on('NAVIGATION_TOGGLE', this.handleNavToggle);\n            }\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            if (!hiddenSeries.has(index)) {\n                return (React.createElement(ChartBar, { alignment: \"start\", data: series.data, key: series.childName, name: series.childName, style: series.style }));\n            }\n            return null;\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            for (let i = 0; i < values.length; i++) {\n                if (i % 3 === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleNavToggle = () => {\n            setTimeout(this.handleResize, 500);\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.initResizeObserve();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver();\n        }\n        if (this.navToggle) {\n            this.navToggle();\n        }\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 20,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues() }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format, startOfMonth } from 'date-fns';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: 'explorer.date_range.current_month_to_date', value: 'current_month_to_date' },\n    { label: 'explorer.date_range.previous_month_to_date', value: 'previous_month_to_date' },\n    { label: 'explorer.date_range.last_thirty_days', value: 'last_thirty_days' },\n    { label: 'explorer.date_range.last_sixty_days', value: 'last_sixty_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure all cloud options\nexport const infrastructureAllCloudOptions = [{ label: 'explorer.perspective.all_cloud', value: 'all_cloud' }];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: 'explorer.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nexport const infrastructureAwsCloudOptions = [{ label: 'explorer.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: 'explorer.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nexport const infrastructureAzureCloudOptions = [{ label: 'explorer.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: 'explorer.perspective.gcp', value: 'gcp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: 'explorer.perspective.ibm', value: 'ibm' }];\n// Infrastructure Ocp options\nexport const infrastructureOcpOptions = [{ label: 'explorer.perspective.ocp_usage', value: 'ocp_usage' }];\n// Ocp options\nexport const ocpOptions = [\n    { label: 'explorer.perspective.ocp', value: 'ocp' },\n    { label: 'explorer.perspective.ocp_supplementary', value: 'ocp_supplementary' },\n];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"supplementary\" /* supplementary */;\n            break;\n        case \"aws\" /* aws */:\n        case \"all_cloud\" /* allCloud */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = queryFromRoute => {\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const today = new Date();\n    const end_date = format(today, 'yyyy-MM-dd');\n    let start_date;\n    switch (dateRange) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            today.setMonth(today.getMonth() - 1);\n            start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            // 61 days, including today's date. See https://issues.redhat.com/browse/COST-1117\n            today.setDate(today.getDate() - 60);\n            start_date = format(today, 'yyyy-MM-dd');\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            // 31 days, including today's date. See https://issues.redhat.com/browse/COST-1117\n            today.setDate(today.getDate() - 30);\n            start_date = format(today, 'yyyy-MM-dd');\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            start_date = format(startOfMonth(today), 'yyyy-MM-dd');\n            break;\n    }\n    return {\n        end_date,\n        start_date,\n    };\n};\nexport const getDateRangeDefault = queryFromRoute => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = queryFromRoute => {\n    return queryFromRoute.perspective || \"ocp\" /* ocp */;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = 'subscription_guid';\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"all_cloud\" /* allCloud */:\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"all_cloud\" /* allCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            result = \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            result = \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"ocp_usage\" /* ocpUsage */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            return \"aws\" /* aws */;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            return \"azure\" /* azure */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"all_cloud\" /* allCloud */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            return \"ocp\" /* ocp */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\nexport const isAwsAvailable = (awsProviders, awsProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (awsProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"aws\" /* aws */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                awsProviders !== undefined &&\n                awsProviders.meta !== undefined &&\n                awsProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isAzureAvailable = (azureProviders, azureProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (azureProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"azure\" /* azure */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                azureProviders !== undefined &&\n                azureProviders.meta !== undefined &&\n                azureProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isGcpAvailable = (gcpProviders, gcpsProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (gcpsProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"gcp\" /* gcp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                gcpProviders !== undefined &&\n                gcpProviders.meta !== undefined &&\n                gcpProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isIbmAvailable = (ibmProviders, ibmProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (ibmProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"gcp\" /* ibm */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                ibmProviders !== undefined &&\n                ibmProviders.meta !== undefined &&\n                ibmProviders.meta.count > 0;\n    }\n    return result;\n};\nexport const isOcpAvailable = (ocpProviders, ocpProvidersFetchStatus, userAccess) => {\n    let result = false;\n    if (ocpProvidersFetchStatus === 2 /* complete */) {\n        const data = userAccess.data.find(d => d.type === \"ocp\" /* ocp */);\n        const isUserAccessAllowed = data && data.access;\n        // providers API returns empty data array for no sources\n        result =\n            isUserAccessAllowed &&\n                ocpProviders !== undefined &&\n                ocpProviders.meta !== undefined &&\n                ocpProviders.meta.count > 0;\n    }\n    return result;\n};\n","import { Title } from '@patternfly/react-core';\nimport Skeleton from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { isFloat, isInt } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatValue } from 'utils/formatValue';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { t } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = t('chart.date', { date: getDate(computedItemDate), month: getMonth(computedItemDate) });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return {\n                x: xVal,\n                y: value === null ? null : yVal,\n                date: computedItem.date,\n                key: computedItem.id,\n                name: computedItem.label || computedItem.id,\n                units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined,\n            };\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            const reportPathsType = getReportPathsType(perspective);\n            const reportType = getReportType(perspective);\n            fetchReport(reportPathsType, reportType, queryString);\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */ } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = 'total';\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getChartTitle = (perspective) => {\n            let result;\n            switch (perspective) {\n                case \"all_cloud\" /* allCloud */:\n                    result = 'explorer.title.all_cloud';\n                    break;\n                case \"aws\" /* aws */:\n                    result = 'explorer.title.aws';\n                    break;\n                case \"aws_cloud\" /* awsCloud */:\n                    result = 'explorer.title.aws_cloud';\n                    break;\n                case \"azure\" /* azure */:\n                    result = 'explorer.title.azure';\n                    break;\n                case \"azure_cloud\" /* azureCloud */:\n                    result = 'explorer.title.azure_cloud';\n                    break;\n                case \"gcp\" /* gcp */:\n                    result = 'explorer.title.gcp';\n                    break;\n                case \"ibm\" /* ibm */:\n                    result = 'explorer.title.ibm';\n                    break;\n                case \"ocp\" /* ocp */:\n                    result = 'explorer.title.ocp';\n                    break;\n                case \"ocp_supplementary\" /* ocpSupplementary */:\n                    result = 'explorer.title.ocp_supplementary';\n                    break;\n                case \"ocp_usage\" /* ocpUsage */:\n                    result = 'explorer.title.ocp_usage';\n                    break;\n                default:\n                    result = undefined;\n                    break;\n            }\n            return result;\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, size: \"md\" }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, size: \"xs\" })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, t } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, t(this.getChartTitle(perspective)))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = withRouter(withTranslation()(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = withTranslation()(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getPerspectiveDefault, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, t, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: t(`filter_by.values.${option.label}`),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgReportPathsType, queryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, orgReportPathsType, perspective, query, queryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, queryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, tagReport } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n    // key_only: true\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    }\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    }\n    return {\n        dateRange,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilter = withRouter(withTranslation()(connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase)));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getPerspectiveDefault, getRouteForQuery, getTagReportPathsType, infrastructureAllCloudOptions, infrastructureAwsCloudOptions, infrastructureAwsOptions, infrastructureAzureCloudOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureIbmOptions, infrastructureOcpOptions, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDefaultPerspective = () => {\n            const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccess, } = this.props;\n            if (perspective) {\n                return perspective;\n            }\n            if (isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess)) {\n                return \"ocp\" /* ocp */;\n            }\n            if (isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess)) {\n                return \"aws\" /* aws */;\n            }\n            if (isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess)) {\n                return \"azure\" /* azure */;\n            }\n            if (isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess)) {\n                return \"gcp\" /* gcp */;\n            }\n            if (isIbmAvailable(ibmProviders, ibmProvidersFetchStatus, userAccess)) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getPerspective = (isDisabled) => {\n            const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, userAccess, } = this.props;\n            const { currentPerspective } = this.state;\n            const _isAwsAvailable = isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess);\n            const _isAzureAvailable = isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess);\n            const _isGcpAvailable = isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess);\n            const _isIbmAvailable = isIbmAvailable(ibmProviders, ibmProvidersFetchStatus, userAccess);\n            const _isOcpAvailable = isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess);\n            if (!(_isAwsAvailable || _isAzureAvailable || _isGcpAvailable || _isIbmAvailable || _isOcpAvailable)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (_isOcpAvailable) {\n                options.push(...ocpOptions);\n                options.push(...infrastructureAllCloudOptions);\n            }\n            if (_isAwsAvailable) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (_isOcpAvailable && isAwsAvailable) {\n                options.push(...infrastructureAwsCloudOptions);\n            }\n            if (_isGcpAvailable) {\n                options.push(...infrastructureGcpOptions);\n            }\n            if (_isIbmAvailable) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (_isAzureAvailable) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (_isOcpAvailable && isAzureAvailable) {\n                options.push(...infrastructureAzureCloudOptions);\n            }\n            if (_isOcpAvailable) {\n                options.push(...infrastructureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.handlePerspectiveClick = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: { cost: 'desc' }, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n            });\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.getDefaultPerspective(),\n        });\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, groupBy, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupByClicked, perspective, query, t, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess) &&\n            isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess) &&\n            isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess) &&\n            isIbmAvailable(ibmProviders, ibmProvidersFetchStatus, userAccess) &&\n            isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.explorer')),\n                React.createElement(\"div\", { style: styles.perspectiveContainer },\n                    this.getPerspective(noProviders),\n                    React.createElement(\"div\", { style: styles.groupBy },\n                        React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, tagReportPathsType: tagReportPathsType }))),\n                React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, query: query }))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"gcp\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = withRouter(withTranslation()(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault, getPerspectiveDefault, } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, t, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg ? t('explorer.org_unit_column_title') : t('details.tag_names'),\n                    },\n                ]\n                : [\n                    {\n                        cellTransforms: [nowrap],\n                        orderBy: (groupById === 'account' && perspective !== \"gcp\" /* gcp */) || perspective !== \"ibm\" /* ibm */\n                            ? 'account_alias'\n                            : groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                ];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push({\n                    cellTransforms: [nowrap],\n                    orderBy: undefined,\n                    title: t('explorer.daily_column_title', { date, month }),\n                    transforms: undefined,\n                });\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n            }\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[computedReportItemType] && item[computedReportItemType].total\n                            ? formatCurrency(item[computedReportItemType].total.value)\n                            : t('explorer.no_data'),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": \"explorer-table\", canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = withTranslation()(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = withTranslation()(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { allUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\" }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                    dateRange,\n                }));\n            }\n            else {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, t, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = t('navigation.explorer');\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(awsProviders, awsProvidersFetchStatus, userAccess) &&\n            isAzureAvailable(azureProviders, azureProvidersFetchStatus, userAccess) &&\n            isGcpAvailable(gcpProviders, gcpProvidersFetchStatus, userAccess) &&\n            isIbmAvailable(ibmProviders, ibmProvidersFetchStatus, userAccess) &&\n            isOcpAvailable(ocpProviders, ocpProvidersFetchStatus, userAccess));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupByClicked: this.handleGroupByClick, onPerspectiveClicked: this.handlePerspectiveClick }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective) })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = getPerspectiveDefault(queryFromRoute);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(queryFromRoute);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"gcp\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n"],"sourceRoot":""}