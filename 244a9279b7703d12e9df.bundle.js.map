{"version":3,"sources":["webpack:///./src/pages/onboardingModal/index.ts","webpack:///./src/testIds.ts","webpack:///./src/pages/onboardingModal/final/item.tsx","webpack:///./src/pages/onboardingModal/final/loader.tsx","webpack:///./src/pages/onboardingModal/final/index.tsx","webpack:///./src/utils/validators.ts","webpack:///./src/pages/onboardingModal/awsConfigure/form.tsx","webpack:///./src/pages/onboardingModal/awsConfigure/instructions.tsx","webpack:///./src/pages/onboardingModal/awsConfigure/awsConfigure.tsx","webpack:///./src/pages/onboardingModal/awsConfigure/index.ts","webpack:///./src/pages/onboardingModal/azureCreds/index.tsx","webpack:///./src/pages/onboardingModal/azureDataSource/index.tsx","webpack:///./src/pages/onboardingModal/configure/instructions.tsx","webpack:///./src/pages/onboardingModal/configure/index.ts","webpack:///./src/pages/onboardingModal/confirmDialog/index.tsx","webpack:///./src/pages/onboardingModal/enableAccountAccess/form.tsx","webpack:///./src/pages/onboardingModal/enableAccountAccess/instructions.tsx","webpack:///./src/pages/onboardingModal/enableAccountAccess/enableAccountAccess.tsx","webpack:///./src/pages/onboardingModal/enableAccountAccess/index.ts","webpack:///./src/pages/onboardingModal/iamPolicy/instructions.tsx","webpack:///./src/pages/onboardingModal/iamPolicy/index.ts","webpack:///./src/pages/onboardingModal/iamRole/instructions.tsx","webpack:///./src/pages/onboardingModal/iamRole/index.ts","webpack:///./src/pages/onboardingModal/obtainLogin/instructions.tsx","webpack:///./src/pages/onboardingModal/obtainLogin/index.ts","webpack:///./src/pages/onboardingModal/sourceKind/checkItem.tsx","webpack:///./src/pages/onboardingModal/sourceKind/checkList.styles.ts","webpack:///./src/pages/onboardingModal/sourceKind/checkList.tsx","webpack:///./src/pages/onboardingModal/sourceKind/form.tsx","webpack:///./src/pages/onboardingModal/sourceKind/instructions.tsx","webpack:///./src/pages/onboardingModal/sourceKind/sourceKind.tsx","webpack:///./src/pages/onboardingModal/sourceKind/index.tsx","webpack:///./src/pages/onboardingModal/usageCollector/form.tsx","webpack:///./src/pages/onboardingModal/usageCollector/instructions.tsx","webpack:///./src/pages/onboardingModal/usageCollector/usageCollector.tsx","webpack:///./src/pages/onboardingModal/usageCollector/index.ts","webpack:///./node_modules/react-merlin/src/index.js","webpack:///./src/pages/onboardingModal/wizard/index.ts","webpack:///./src/pages/onboardingModal/wizard/wizard.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_wizard__WEBPACK_IMPORTED_MODULE_1__","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","item","title","value","react_default","a","createElement","style","paddingBottom","Title","size","sizes","md","lg","loader","Component","[object Object]","props","super","t","apiStatus","status","apiErrors","error","this","errorMessage","response","data","Error","undefined","errors","map","er","detail","join","message","name","type","clusterId","arn","azureAuth","azureCreds","parseError","Fragment","Alert","variant","xl","keys","field","react_redux_es","common","state","selectOnboardingName","selectOnboardingType","selectOnboardingClusterID","selectOnboardingArn","s3BucketName","selectOnboardingS3BucketName","selectAzureCreds","selectAzureAuth","selectApiErrors","selectApiStatus","es","sourceTypeValidator","sourceNameValidator","RegExp","test","ocpClusterIdValidator","awsS3BucketNameValidator","arnValidator","length","indexOf","awsConfigure_form","isValid","onChange","Form","onSubmit","e","preventDefault","FormGroup","fieldId","label","helperText","helperTextInvalid","TextInput","assign","instructions","List","ListItem","awsConfigure","updateS3BucketName","s3BucketNameValid","_name","event","currentTarget","onboardingModal_awsConfigure","selectOnboardingValidation","onboardingModal_azureCreds","credsFields","clientId","tenantId","clientSecret","subscriptionId","updateCreds","valid","currValue","trim","azureDataSource","resourceGroup","storageAccount","updateDataSource","configure_instructions","Popover","position","aria-label","bodyContent","i18nKey","metering_operator","sub_text","path","Button","question_circle_icon","ClipboardCopy","textAriaLabel","configure","confirmDialog","isOpen","selectOnboardingConfirm","onCancel","hideConfirm","onConfirm","cancelOnboarding","Modal","isSmall","onClose","actions","key","onClick","enableAccountAccess_form","enableAccountAccess_instructions","enableAccountAccess","updateArn","arnValid","onboardingModal_enableAccountAccess","iamPolicy_instructions","iampolicy","href","target","expansion","iamPolicy","iamRole_instructions","iamRole","obtainLogin_instructions","learn_more","obtainLogin","checkItem","children","isChecked","ariaLabel","Checkbox","margin","styles","StyleSheet","create","listWrapper","paddingLeft","dist_esm","marginBottom","marginTop","listTitle","checkList","checkedItems","updateCheckItem","className","install_openshift","install_others","ansible","epel","sourceKind_form","updateName","nameValid","updateType","typeValid","FormSelect","FormSelectOption","sourceKind_instructions","sourceKind","checked","updateCheck","Boolean","onboardingModal_sourceKind","selectOnboardingSourceKindChecked","updateSourceKindCheckList","checkAll","checkSourceKindCheckList","usageCollector_form","usageCollector_instructions","usage_collector","korekuta_master","ocp_usage_sh","reporting-operator","usageCollector","updateClusterId","clusterIdValid","onboardingModal_usageCollector","updateClusterID","src_Merlin","current","initialStep","index","setIndex","setState","propTypes","prop_types_default","func","isRequired","number","defaultProps","src","isModalOpen","selectOnboardingModal","isInvalid","selectOnboardingIsInvalid","dirtyMap","selectOnboardingDirty","sourceKindChecked","bucket","displayConfirm","updateSources","sourceSettings","fetchSources","addSource","steps","onboardingModal_final","stepMap","isDirty","every","k","dirtyStepMap","isDisabled","provider_resource_name","billing_source_obj","billing_source","data_source","resource_group","storage_account","credentials","client_id","tenant_id","client_secret","subscription_id","authentication","height","width","isLarge"],"mappings":"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","file":"244a9279b7703d12e9df.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport Wizard from './wizard';\nexport default hot(module)(Wizard);\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport React from 'react';\nconst Item = ({ title, value }) => (React.createElement(\"div\", { style: { paddingBottom: '12px' } },\n    React.createElement(Title, { size: TitleSize.md }, title),\n    React.createElement(Title, { size: TitleSize.lg }, value)));\nexport default Item;\n","import { Alert, Title, TitleSize } from '@patternfly/react-core';\nimport React from 'react';\nimport Item from './item';\nclass Loader extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    parseError() {\n        const { t, apiStatus: status, apiErrors: error } = this.props;\n        if (status === 1 /* inProgress */) {\n            return null;\n        }\n        if (error === null) {\n            return null;\n        }\n        let errorMessage = t('onboarding.final.default_error');\n        if (error.response && error.response.data) {\n            errorMessage = error.response.data.Error;\n            if (!errorMessage && error.response.data.errors !== undefined) {\n                errorMessage = error.response.data.errors\n                    .map(er => er.detail)\n                    .join(', ');\n            }\n        }\n        else if (error.message) {\n            errorMessage = error.message;\n        }\n        return errorMessage;\n    }\n    render() {\n        const { t, name, type, clusterId, arn, azureAuth, azureCreds } = this.props;\n        const errors = this.parseError();\n        return (React.createElement(React.Fragment, null,\n            errors !== null && (React.createElement(\"div\", { style: { paddingBottom: '30px' } },\n                React.createElement(Alert, { variant: \"danger\", title: `${errors}. ${t('onboarding.final.please_revise')}` }))),\n            React.createElement(Title, { size: TitleSize.xl }, t('onboarding.final.title')),\n            React.createElement(\"p\", null, t('onboarding.final.desc')),\n            React.createElement(\"br\", null),\n            React.createElement(Item, { value: name, title: t('onboarding.final.name') }),\n            React.createElement(Item, { value: t(`onboarding.final.type.${type}`), title: t('onboarding.final.type.title') }),\n            type === 'AWS' && (React.createElement(Item, { value: arn, title: t('onboarding.final.arn') })),\n            type === 'OCP' && (React.createElement(Item, { value: clusterId, title: t('onboarding.final.cluster') })),\n            type === 'AZURE' &&\n                Object.keys(azureCreds).map(field => (React.createElement(Item, { value: azureCreds[field].value, title: t(`onboarding.final.${field}`) }))),\n            type === 'AZURE' &&\n                Object.keys(azureAuth).map(field => (React.createElement(Item, { value: azureAuth[field].value, title: t(`onboarding.final.${field}`) })))));\n    }\n}\nexport default Loader;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingSelectors } from 'store/onboarding';\nimport Loader from './loader';\nimport './loader.css';\nexport default connect(createMapStateToProps(state => ({\n    name: onboardingSelectors.selectOnboardingName(state),\n    type: onboardingSelectors.selectOnboardingType(state),\n    clusterId: onboardingSelectors.selectOnboardingClusterID(state),\n    arn: onboardingSelectors.selectOnboardingArn(state),\n    s3BucketName: onboardingSelectors.selectOnboardingS3BucketName(state),\n    azureCreds: onboardingSelectors.selectAzureCreds(state),\n    azureAuth: onboardingSelectors.selectAzureAuth(state),\n    apiErrors: onboardingSelectors.selectApiErrors(state),\n    apiStatus: onboardingSelectors.selectApiStatus(state),\n})), {})(translate()(Loader));\n","export const sourceTypeValidator = (value) => value !== '';\nexport const sourceNameValidator = (value) => new RegExp('^.').test(value);\nexport const ocpClusterIdValidator = (value) => new RegExp('^.').test(value);\nexport const awsS3BucketNameValidator = (value) => new RegExp('^[A-Za-z0-9]+[A-Za-z0-9_-]*$').test(value);\nexport const arnValidator = (value) => {\n    const arnPrefix = 'arn:aws:';\n    if (value.length < arnPrefix.length) {\n        return false;\n    }\n    if (value.length === arnPrefix.length) {\n        return value === arnPrefix;\n    }\n    return value.indexOf(arnPrefix) === 0;\n};\n","import { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport React from 'react';\nimport { getTestProps, testIds } from 'testIds';\nconst S3BucketForm = ({ t, isValid, value, onChange }) => {\n    return (React.createElement(Form, { onSubmit: e => {\n            e.preventDefault();\n            return false;\n        } },\n        React.createElement(FormGroup, { isValid: isValid, fieldId: \"s3_bucket_name\", label: t('onboarding.aws_configure.s3_bucket_name_label'), helperText: t('onboarding.aws_configure.s3_bucket_name_helper_text'), helperTextInvalid: t('onboarding.aws_configure.s3_bucket_name_helper_text_invalid') },\n            React.createElement(TextInput, Object.assign({}, getTestProps(testIds.onboarding.s3_input), { isValid: isValid, id: \"s3_bucket_name\", value: value, onChange: onChange })))));\n};\nexport default S3BucketForm;\n","import { List, ListItem, Title } from '@patternfly/react-core';\nimport React from 'react';\nconst AwsConfigureInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.aws_configure.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.aws_configure.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null, t('onboarding.aws_configure.s3_bucket_account')),\n            React.createElement(ListItem, null,\n                t('onboarding.aws_configure.cost_report'),\n                React.createElement(List, null,\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.report_name')),\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.time_unit')),\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.include')),\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.support')),\n                    React.createElement(ListItem, null, t('onboarding.aws_configure.prefix')))),\n            React.createElement(ListItem, null, t('onboarding.aws_configure.enter_s3_bucket')))));\n};\nexport default AwsConfigureInstructions;\n","import React from 'react';\nimport { awsS3BucketNameValidator } from 'utils/validators';\nimport S3BucketForm from './form';\nimport AwsConfigureInstructions from './instructions';\nconst AwsConfigure = ({ t, s3BucketName, updateS3BucketName, s3BucketNameValid, }) => {\n    const onChange = (_name, event) => {\n        updateS3BucketName(event.currentTarget.value, awsS3BucketNameValidator);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(AwsConfigureInstructions, { t: t }),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(S3BucketForm, { t: t, onChange: onChange, isValid: s3BucketNameValid, value: s3BucketName })));\n};\nexport default AwsConfigure;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport AwsConfigure from './awsConfigure';\nexport default connect(createMapStateToProps(state => ({\n    s3BucketName: onboardingSelectors.selectOnboardingS3BucketName(state),\n    s3BucketNameValid: onboardingSelectors.selectOnboardingValidation(state)\n        .s3BucketNameValid,\n})), {\n    updateS3BucketName: onboardingActions.updateS3BucketName,\n})(translate()(AwsConfigure));\n","import { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nconst AzureCredsBase = ({ t, updateCreds, tenantId, clientId, clientSecret, subscriptionId, }) => {\n    return (React.createElement(Form, { onSubmit: e => {\n            e.preventDefault();\n            return false;\n        } },\n        React.createElement(FormGroup, { isValid: clientId.valid, fieldId: \"client-id\", label: t('onboarding.azure_creds.client_id'), helperText: t('onboarding.azure_creds.client_id_helper_text'), helperTextInvalid: t('onboarding.azure_creds.client_id_helper_text_invalid') },\n            React.createElement(TextInput, { isValid: clientId.valid, id: \"client-id\", value: clientId.value, onChange: value => updateCreds({ name: 'clientId', value }, currValue => currValue.trim().length > 0) })),\n        React.createElement(FormGroup, { isValid: clientSecret.valid, fieldId: \"client-secret\", label: t('onboarding.azure_creds.client_secret'), helperText: t('onboarding.azure_creds.client_secret_helper_text'), helperTextInvalid: t('onboarding.azure_creds.client_secret_helper_text_invalid') },\n            React.createElement(TextInput, { isValid: clientSecret.valid, id: \"client-secret\", value: clientSecret.value, onChange: value => updateCreds({ name: 'clientSecret', value }, currValue => currValue.trim().length > 0) })),\n        React.createElement(FormGroup, { isValid: tenantId.valid, fieldId: \"tenant-id\", label: t('onboarding.azure_creds.tenant_id'), helperText: t('onboarding.azure_creds.tenant_id_helper_text'), helperTextInvalid: t('onboarding.azure_creds.tenant_id_helper_text_invalid') },\n            React.createElement(TextInput, { isValid: tenantId.valid, id: \"tenant-id\", value: tenantId.value, onChange: value => updateCreds({ name: 'tenantId', value }, currValue => currValue.trim().length > 0) })),\n        React.createElement(FormGroup, { isValid: subscriptionId.valid, fieldId: \"subscription-id\", label: t('onboarding.azure_creds.subscription_id'), helperText: t('onboarding.azure_creds.subscription_id_helper_text'), helperTextInvalid: t('onboarding.azure_creds.subscription_id_helper_text_invalid') },\n            React.createElement(TextInput, { isValid: subscriptionId.valid, id: \"subscription-id\", value: subscriptionId.value, onChange: value => updateCreds({ name: 'subscriptionId', value }, currValue => currValue.trim().length > 0) }))));\n};\nexport default connect(createMapStateToProps(state => {\n    const credsFields = onboardingSelectors.selectAzureCreds(state);\n    return {\n        clientId: credsFields.clientId,\n        tenantId: credsFields.tenantId,\n        clientSecret: credsFields.clientSecret,\n        subscriptionId: credsFields.subscriptionId,\n    };\n}), {\n    updateCreds: onboardingActions.updateCreds,\n})(translate()(AzureCredsBase));\n","import { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nconst AzureAuthBase = ({ t, updateDataSource, resourceGroup, storageAccount, }) => {\n    return (React.createElement(Form, { onSubmit: e => {\n            e.preventDefault();\n            return false;\n        } },\n        React.createElement(FormGroup, { isValid: resourceGroup.valid, fieldId: \"resource-group\", label: t('onboarding.azure_auth.resource_group'), helperText: t('onboarding.azure_auth.resource_group_helper_text'), helperTextInvalid: t('onboarding.azure_auth.resource_group_helper_text_invalid') },\n            React.createElement(TextInput, { isValid: resourceGroup.valid, id: \"resource-group\", value: resourceGroup.value, onChange: value => updateDataSource({ name: 'resourceGroup', value }, currValue => currValue.trim().length > 0) })),\n        React.createElement(FormGroup, { isValid: storageAccount.valid, fieldId: \"storage-account\", label: t('onboarding.azure_auth.storage_account'), helperText: t('onboarding.azure_auth.storage_account_helper_text'), helperTextInvalid: t('onboarding.azure_auth.storage_account_helper_text_invalid') },\n            React.createElement(TextInput, { isValid: storageAccount.valid, id: \"storage-account\", value: storageAccount.value, onChange: value => updateDataSource({ name: 'storageAccount', value }, currValue => currValue.trim().length > 0) }))));\n};\nexport default connect(createMapStateToProps(state => {\n    const credsFields = onboardingSelectors.selectAzureAuth(state);\n    return {\n        resourceGroup: credsFields.resourceGroup,\n        storageAccount: credsFields.storageAccount,\n    };\n}), {\n    updateDataSource: onboardingActions.updateDataSource,\n})(translate()(AzureAuthBase));\n","import { Button, ClipboardCopy, List, ListItem, Popover, Title, } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { Interpolate } from 'react-i18next';\nconst ConfigureInstructions = ({ t, clusterId, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.configure.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.configure.instructions_text')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null,\n                t('onboarding.configure.edit_crontab'),\n                React.createElement(Popover, { position: \"right\", \"aria-label\": t('onboarding.configure.explain_more_about_cron'), bodyContent: React.createElement(\"div\", null,\n                        t('onboarding.configure.cron_user_reqs'),\n                        React.createElement(List, null,\n                            React.createElement(ListItem, null,\n                                React.createElement(Interpolate, { i18nKey: \"onboarding.configure.cron_user_req_1\", metering_operator: React.createElement(\"i\", null, \"metering-operator\") })),\n                            React.createElement(ListItem, null, t('onboarding.configure.cron_user_req_2'))),\n                        React.createElement(Interpolate, { i18nKey: \"onboarding.configure.cron_user_more\", sub_text: React.createElement(\"i\", null, \"ocpcollector\"), path: React.createElement(\"b\", null, \"/etc/sudoers\") }),\n                        React.createElement(\"br\", null),\n                        React.createElement(\"b\", null, \"ocpcollector ALL=(ALL) NOPASSWD: ALL\")) },\n                    React.createElement(Button, { variant: \"plain\" },\n                        React.createElement(QuestionCircleIcon, null))),\n                React.createElement(ClipboardCopy, { textAriaLabel: t('onboarding.configure.crontab_command') }, `crontab -u <username> -e`)),\n            React.createElement(ListItem, null,\n                t('onboarding.configure.create_entry'),\n                React.createElement(ClipboardCopy, { textAriaLabel: t('onboarding.configure.entry_description') }, `*/45 * * * * /path/to/ocp_usage.sh --collect --e OCP_CLUSTER_ID=\"${clusterId}\"`)),\n            React.createElement(ListItem, null,\n                \" \",\n                t('onboarding.configure.click_next'),\n                \" \"))));\n};\nexport default ConfigureInstructions;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingSelectors } from 'store/onboarding';\nimport ConfigureInstructions from './instructions';\nexport default connect(createMapStateToProps(state => ({\n    clusterId: onboardingSelectors.selectOnboardingClusterID(state),\n})))(translate()(ConfigureInstructions));\n","import { Button, Modal } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nconst ConfirmDialogBase = ({ isOpen, onCancel, onConfirm, t, }) => (React.createElement(Modal, { isSmall: true, title: t('onboarding.confirm.title'), onClose: onCancel, isOpen: isOpen, actions: [\n        React.createElement(Button, { key: \"cancel\", variant: \"secondary\", onClick: onCancel }, t('onboarding.confirm.cancel')),\n        React.createElement(Button, { key: \"confirm\", variant: \"danger\", onClick: onConfirm }, t('onboarding.confirm.close')),\n    ] }, t('onboarding.confirm.message')));\nexport default connect(createMapStateToProps(state => ({\n    isOpen: onboardingSelectors.selectOnboardingConfirm(state),\n})), {\n    onCancel: onboardingActions.hideConfirm,\n    onConfirm: onboardingActions.cancelOnboarding,\n})(translate()(ConfirmDialogBase));\n","import { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport React from 'react';\nimport { getTestProps, testIds } from 'testIds';\nconst ArnForm = ({ t, isValid, value, onChange }) => {\n    return (React.createElement(Form, { onSubmit: e => {\n            e.preventDefault();\n            return false;\n        } },\n        React.createElement(FormGroup, { isValid: isValid, fieldId: \"arn\", label: t('onboarding.enable_account_access.arn_label'), helperText: t('onboarding.enable_account_access.arn_helper_text'), helperTextInvalid: t('onboarding.enable_account_access.arn_helper_text_invalid') },\n            React.createElement(TextInput, Object.assign({}, getTestProps(testIds.onboarding.arn_input), { isValid: isValid, id: \"arn\", value: value, onChange: onChange })))));\n};\nexport default ArnForm;\n","import { List, ListItem, Title } from '@patternfly/react-core';\nimport React from 'react';\nconst EnableAccountAccessInstructions = ({ t, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.enable_account_access.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.enable_account_access.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null, t('onboarding.enable_account_access.select_role')),\n            React.createElement(ListItem, null, t('onboarding.enable_account_access.copy_arn')))));\n};\nexport default EnableAccountAccessInstructions;\n","import React from 'react';\nimport { arnValidator } from 'utils/validators';\nimport ArnForm from './form';\nimport EnableAccountAccessInstructions from './instructions';\nconst EnableAccountAccess = ({ t, arn, updateArn, arnValid, }) => {\n    const onChange = (_name, event) => {\n        updateArn(event.currentTarget.value, arnValidator);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(EnableAccountAccessInstructions, { t: t }),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(ArnForm, { t: t, onChange: onChange, isValid: arnValid, value: arn })));\n};\nexport default EnableAccountAccess;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport EnableAccountAccess from './enableAccountAccess';\nexport default connect(createMapStateToProps(state => ({\n    arn: onboardingSelectors.selectOnboardingArn(state),\n    arnValid: onboardingSelectors.selectOnboardingValidation(state).arnValid,\n})), {\n    updateArn: onboardingActions.updateArn,\n})(translate()(EnableAccountAccess));\n","import { ClipboardCopy, ClipboardCopyVariant, List, ListItem, Title, } from '@patternfly/react-core';\nimport React from 'react';\nimport { Interpolate } from 'react-i18next';\nconst IamPolicyInstructions = ({ t, s3BucketName }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.iam_policy.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.iam_policy.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null,\n                React.createElement(Interpolate, { iampolicy: React.createElement(\"a\", { href: \"https://docs.aws.amazon.com/IAM/latest/UserGuide/console.html\", target: \"_blank\" }, t('onboarding.iam_policy.link_text')), i18nKey: \"onboarding.iam_policy.sign_in\" })),\n            React.createElement(ListItem, null,\n                t('onboarding.iam_policy.new_policy'),\n                React.createElement(\"br\", null),\n                React.createElement(ClipboardCopy, { textAriaLabel: t('onboarding.iam_policy.json_content'), variant: ClipboardCopyVariant.expansion }, `{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:Get*\",\n                \"s3:List*\"\n            ],\n            \"Resource\": [\n              \"arn:aws:s3:::${s3BucketName}\",\n              \"arn:aws:s3:::${s3BucketName}/*\"\n            ]\n        },\n        {\n            \"Sid\": \"VisualEditor1\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListAllMyBuckets\",\n                \"iam:ListAccountAliases\",\n                \"s3:HeadBucket\",\n                \"cur:DescribeReportDefinitions\",\n                \"organizations:List*\",\n                \"organizations:Describe*\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}`)),\n            React.createElement(ListItem, null, t('onboarding.iam_policy.complete_process'))),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(\"div\", null,\n            React.createElement(\"b\", null, t('onboarding.iam_policy.donot_close_browser')),\n            t('onboarding.iam_policy.note'))));\n};\nexport default IamPolicyInstructions;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingSelectors } from 'store/onboarding';\nimport IamPolicyInstructions from './instructions';\nexport default connect(createMapStateToProps(state => ({\n    s3BucketName: onboardingSelectors.selectOnboardingS3BucketName(state),\n})), {})(translate()(IamPolicyInstructions));\n","import { ClipboardCopy, List, ListItem, Title } from '@patternfly/react-core';\nimport React from 'react';\nconst IamRoleInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.iam_role.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.iam_role.intro')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null, t('onboarding.iam_role.create_new_role')),\n            React.createElement(ListItem, null,\n                t('onboarding.iam_role.paste_account_id'),\n                React.createElement(\"br\", null),\n                React.createElement(ClipboardCopy, { textAriaLabel: t('onboarding.iam_role.paste_account_id_aria') }, \"589173575009\")),\n            React.createElement(ListItem, null, t('onboarding.iam_role.attach_permissions')),\n            React.createElement(ListItem, null, t('onboarding.iam_role.complete_process')))));\n};\nexport default IamRoleInstructions;\n","import { translate } from 'react-i18next';\nimport IamRole from './instructions';\nexport default translate()(IamRole);\n","import { Button, ClipboardCopy, List, ListItem, Popover, Title, } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { Interpolate } from 'react-i18next';\nconst ObtainLoginInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.obtain_login.instructions_title')),\n        React.createElement(\"div\", null,\n            t('onboarding.obtain_login.intro'),\n            React.createElement(Popover, { \"aria-label\": t('onboarding.obtain_login.popover_aria_label'), position: \"top\", bodyContent: React.createElement(Interpolate, { i18nKey: \"onboarding.obtain_login.popover_content\", metering_operator: React.createElement(\"i\", null, \"reporting-operator\"), learn_more: React.createElement(\"a\", { href: \"\" }, t('onboarding.obtain_login.learn_more')) }) },\n                React.createElement(Button, { variant: \"plain\" },\n                    React.createElement(QuestionCircleIcon, null)))),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null, t('onboarding.obtain_login.obtain_token')),\n            React.createElement(ListItem, null,\n                t('onboarding.obtain_login.run_command'),\n                React.createElement(\"br\", null),\n                React.createElement(ClipboardCopy, { textAriaLabel: t('onboarding.obtain_login.run_command_aria_label') }, \"oc serviceaccounts get-token reporting-operator > ocp_usage_token\")),\n            React.createElement(ListItem, null, t('onboarding.obtain_login.security')))));\n};\nexport default ObtainLoginInstructions;\n","import { translate } from 'react-i18next';\nimport ObtainLogin from './instructions';\nexport default translate()(ObtainLogin);\n","import { Checkbox } from '@patternfly/react-core';\nimport React from 'react';\nconst CheckItem = ({ children, onChange, title, isChecked = false, ariaLabel = null, id = null, }) => (React.createElement(\"div\", null,\n    React.createElement(Checkbox, { isChecked: isChecked, onChange: onChange, label: title, id: id, \"aria-label\": ariaLabel }),\n    React.createElement(\"span\", { style: { margin: '10px 0 10px 20px' } }, children)));\nexport default CheckItem;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    listWrapper: {\n        paddingLeft: global_spacer_md.value,\n        marginBottom: global_spacer_md.value,\n        marginTop: `-${global_spacer_md.value}`,\n    },\n    listTitle: {\n        marginBottom: global_spacer_md.value,\n    },\n});\n","import { List, ListItem } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { Interpolate, translate } from 'react-i18next';\nimport { getTestProps, testIds } from 'testIds';\nimport CheckItem from './checkItem';\nimport { styles } from './checkList.styles';\nconst SourceKindCheckListBase = ({ t, checkedItems, updateCheckItem, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: css(styles.listTitle) }, t('onboarding.source_kind.checklist_title')),\n        React.createElement(CheckItem, Object.assign({}, getTestProps(testIds.onboarding.check_box_1), { isChecked: checkedItems.install_openshift, title: t('onboarding.source_kind.checkbox_1'), onChange: updateCheckItem, id: 'install_openshift', ariaLabel: t('onboarding.source_kind.checkbox_1_aria_label') }),\n            React.createElement(\"div\", { className: css(styles.listWrapper) },\n                React.createElement(List, null,\n                    React.createElement(ListItem, null,\n                        React.createElement(\"a\", { target: \"_blank\", href: \"https://docs.openshift.com/container-platform/3.11/getting_started/install_openshift.html\" }, t('onboarding.source_kind.checkbox_1_1'))),\n                    React.createElement(ListItem, null,\n                        React.createElement(\"a\", { target: \"_blank\", href: \"https://access.redhat.com/documentation/en-us/openshift_container_platform/3.11/html/configuring_clusters/installing-operator-framework\" }, t('onboarding.source_kind.checkbox_1_2')))))),\n        React.createElement(CheckItem, Object.assign({}, getTestProps(testIds.onboarding.check_box_2), { isChecked: checkedItems.install_others, title: t('onboarding.source_kind.checkbox_2'), onChange: updateCheckItem, id: 'install_others', ariaLabel: t('onboarding.source_kind.checkbox_2_aria_label') }),\n            React.createElement(\"div\", { className: css(styles.listWrapper) },\n                React.createElement(List, null,\n                    React.createElement(ListItem, null,\n                        React.createElement(\"a\", { target: \"_blank\", href: \"https://access.redhat.com/products/red-hat-insights#getstarted\" }, t('onboarding.source_kind.checkbox_2_1'))),\n                    React.createElement(ListItem, null,\n                        React.createElement(Interpolate, { i18nKey: \"onboarding.source_kind.checkbox_2_2\", ansible: React.createElement(\"a\", { target: \"_blank\", href: \"https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#basics-what-will-be-installed\" }, t('onboarding.source_kind.ansible')), epel: React.createElement(\"a\", { target: \"_blank\", href: \"https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#basics-what-will-be-installed\" }, t('onboarding.source_kind.epel')) })),\n                    React.createElement(ListItem, null,\n                        React.createElement(\"a\", { target: \"_blank\", href: \"https://docs.openshift.com/container-platform/3.11/cli_reference/get_started_cli.html\" }, t('onboarding.source_kind.checkbox_2_3'))))))));\n};\nexport default translate()(SourceKindCheckListBase);\n","import { Form, FormGroup, FormSelect, FormSelectOption, TextInput, } from '@patternfly/react-core';\nimport React from 'react';\nimport { getTestProps, testIds } from 'testIds';\nconst SourceKindForm = ({ t, name, updateName, nameValid, type, updateType, typeValid, }) => {\n    return (React.createElement(Form, { onSubmit: e => {\n            e.preventDefault();\n            return false;\n        } },\n        React.createElement(FormGroup, { isValid: nameValid, helperTextInvalid: t('onboarding.name_helper_invalid_text'), helperText: t('onboarding.name_helper_text'), fieldId: \"source_name\", label: t('onboarding.name_label') },\n            React.createElement(TextInput, Object.assign({}, getTestProps(testIds.onboarding.name_input), { isValid: nameValid, id: \"source_name\", value: name, onChange: updateName }))),\n        React.createElement(FormGroup, { isValid: typeValid, fieldId: \"source_type\", label: t('onboarding.type_label') },\n            React.createElement(FormSelect, Object.assign({}, getTestProps(testIds.onboarding.type_selector), { isValid: typeValid, value: type, id: \"source_type\", onChange: updateType }),\n                React.createElement(FormSelectOption, Object.assign({}, getTestProps(testIds.onboarding.type_opt_non), { label: t('onboarding.select_type_label'), value: \"\" })),\n                React.createElement(FormSelectOption, Object.assign({}, getTestProps(testIds.onboarding.type_opt_aws), { label: t('onboarding.type_options.aws'), value: \"AWS\" })),\n                React.createElement(FormSelectOption, Object.assign({}, getTestProps(testIds.onboarding.type_opt_aws), { label: t('onboarding.type_options.azure'), value: \"AZURE\" })),\n                React.createElement(FormSelectOption, Object.assign({}, getTestProps(testIds.onboarding.type_opt_ocp), { label: t('onboarding.type_options.ocp'), value: \"OCP\" }))))));\n};\nexport default SourceKindForm;\n","import { Title } from '@patternfly/react-core';\nimport React from 'react';\nconst SourceKindInstructions = ({ t }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: \"xl\" }, t('onboarding.source_kind.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.source_kind.instructions_text')),\n        React.createElement(\"br\", null)));\n};\nexport default SourceKindInstructions;\n","import React from 'react';\nimport { sourceNameValidator, sourceTypeValidator } from 'utils/validators';\nimport SourceKindCheckList from './checkList';\nimport SourceKindForm from './form';\nimport SourceKindInstructions from './instructions';\nconst SourceKind = ({ t, name, updateName, nameValid, type, updateType, typeValid, checked, updateCheck, }) => {\n    const updateNameText = (_name, event) => {\n        updateName(event.currentTarget.value, sourceNameValidator);\n    };\n    const updateTypeOption = (value, event) => {\n        updateType(value, sourceTypeValidator);\n    };\n    const updateCheckItem = (value, event) => {\n        updateCheck({ item: event.currentTarget.id, value });\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(SourceKindInstructions, { t: t }),\n        React.createElement(SourceKindForm, { updateName: updateNameText, updateType: updateTypeOption, name: name, nameValid: nameValid, type: type, typeValid: typeValid, t: t }),\n        React.createElement(\"br\", null),\n        Boolean(type === 'OCP') && (React.createElement(SourceKindCheckList, { checkedItems: checked, updateCheckItem: updateCheckItem }))));\n};\nexport default SourceKind;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport SourceKind from './sourceKind';\nexport default connect(createMapStateToProps(state => (Object.assign({ name: onboardingSelectors.selectOnboardingName(state), type: onboardingSelectors.selectOnboardingType(state), checked: onboardingSelectors.selectOnboardingSourceKindChecked(state) }, onboardingSelectors.selectOnboardingValidation(state)))), {\n    updateName: onboardingActions.updateName,\n    updateType: onboardingActions.updateType,\n    updateCheck: onboardingActions.updateSourceKindCheckList,\n    checkAll: onboardingActions.checkSourceKindCheckList,\n})(translate()(SourceKind));\n","import { Button, Form, FormGroup, Popover, TextInput, } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { Interpolate } from 'react-i18next';\nimport { getTestProps, testIds } from 'testIds';\nconst ClusterForm = ({ t, isValid, value, onChange }) => {\n    return (React.createElement(Form, { onSubmit: e => {\n            e.preventDefault();\n            return false;\n        } },\n        React.createElement(FormGroup, { isValid: isValid, fieldId: \"cluster_id\", label: t('onboarding.usage_collector.cluster_id_label') },\n            React.createElement(Popover, { \"aria-label\": t('onboarding.usage_collector.popover_clusterid_aria_label'), position: \"bottom\", bodyContent: React.createElement(Interpolate, { i18nKey: \"onboarding.usage_collector.popover_clusterid_content\", path: React.createElement(\"b\", null, \"~/.config/ocp_usage/config.json\") }) },\n                React.createElement(Button, { variant: \"plain\" },\n                    React.createElement(QuestionCircleIcon, null))),\n            React.createElement(TextInput, Object.assign({}, getTestProps(testIds.onboarding.clusterid_input), { isValid: isValid, id: \"cluster_id\", value: value, onChange: onChange })))));\n};\nexport default ClusterForm;\n","import { Button, List, ListItem, Popover, Title, TitleSize, } from '@patternfly/react-core';\nimport { QuestionCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { Interpolate } from 'react-i18next';\nconst UsageCollectorInstructions = ({ t, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Title, { size: TitleSize.xl }, t('onboarding.usage_collector.instructions_title')),\n        React.createElement(\"div\", null, t('onboarding.usage_collector.instructions_text')),\n        React.createElement(\"br\", null),\n        React.createElement(List, null,\n            React.createElement(ListItem, null,\n                React.createElement(Interpolate, { i18nKey: \"onboarding.usage_collector.download_and_install\", usage_collector: React.createElement(\"a\", { href: \"https://github.com/project-koku/korekuta/archive/master.zip\", target: \"_blank\" }, t('onboarding.usage_collector.ocp_usage_collector')) })),\n            React.createElement(ListItem, null,\n                React.createElement(Interpolate, { i18nKey: \"onboarding.usage_collector.navigate\", korekuta_master: React.createElement(\"b\", null, \"korekuta-master\"), ocp_usage_sh: React.createElement(\"i\", null, \"ocp_usage.sh\") })),\n            React.createElement(ListItem, null,\n                React.createElement(Interpolate, { i18nKey: \"onboarding.usage_collector.run\", ocp_usage_sh: React.createElement(\"i\", null, \"ocp_usage.sh\") }),\n                React.createElement(\"br\", null),\n                React.createElement(Interpolate, { i18nKey: \"onboarding.usage_collector.example_text\", \"reporting-operator\": React.createElement(\"i\", null, \"reporting-operator\") }),\n                React.createElement(\"br\", null),\n                React.createElement(\"br\", null),\n                \"# ./ocp_usage.sh --setup -e OCP_API=\\\"https://api.openshift-prod.mycompany.com\\\" -e OCP_METERING_NAMESPACE=\\\"metering\\\" -e OCP_TOKEN_PATH=\\\"/path/to/ocp_usage_token\\\" -e METERING_API=\\\"https://metering.metering.api.ocp.com\\u201D\",\n                React.createElement(Popover, { \"aria-label\": t('onboarding.usage_collector.popover_cmd_aria_label'), position: \"right\", bodyContent: t('onboarding.usage_collector.popover_cmd_content') },\n                    React.createElement(Button, { variant: \"plain\" },\n                        React.createElement(QuestionCircleIcon, null)))),\n            React.createElement(ListItem, null, t('onboarding.usage_collector.configuration_complete')))));\n};\nexport default UsageCollectorInstructions;\n","import React from 'react';\nimport { ocpClusterIdValidator } from 'utils/validators';\nimport ClusterIdForm from './form';\nimport Instructions from './instructions';\nconst UsageCollector = ({ t, clusterId, updateClusterId, clusterIdValid, }) => {\n    const onChange = (_name, event) => {\n        updateClusterId(event.currentTarget.value, ocpClusterIdValidator);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Instructions, { t: t }),\n        React.createElement(\"br\", null),\n        React.createElement(\"br\", null),\n        React.createElement(ClusterIdForm, { t: t, onChange: onChange, isValid: clusterIdValid, value: clusterId })));\n};\nexport default UsageCollector;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport UsageCollector from './usageCollector';\nexport default connect(createMapStateToProps(state => ({\n    clusterId: onboardingSelectors.selectOnboardingClusterID(state),\n    clusterIdValid: onboardingSelectors.selectOnboardingValidation(state)\n        .clusterIdValid,\n})), {\n    updateClusterId: onboardingActions.updateClusterID,\n})(translate()(UsageCollector));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Merlin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: this.props.initialStep,\n    };\n  }\n\n  render() {\n    return this.props.children({\n      index: this.state.current,\n      setIndex: current => {\n        this.setState(() => ({\n          current,\n        }));\n      },\n    });\n  }\n}\n\nMerlin.propTypes = {\n  children: PropTypes.func.isRequired,\n  initialStep: PropTypes.number,\n};\n\nMerlin.defaultProps = {\n  initialStep: 0,\n};\n\nexport default Merlin;\n","import { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions, onboardingSelectors } from 'store/onboarding';\nimport { sourcesActions } from 'store/sourceSettings';\nimport { WizardBase } from './wizard';\nexport default connect(createMapStateToProps(state => ({\n    isModalOpen: onboardingSelectors.selectOnboardingModal(state),\n    isInvalid: onboardingSelectors.selectOnboardingIsInvalid(state),\n    dirtyMap: onboardingSelectors.selectOnboardingDirty(state),\n    sourceKindChecked: onboardingSelectors.selectOnboardingSourceKindChecked(state),\n    type: onboardingSelectors.selectOnboardingType(state),\n    name: onboardingSelectors.selectOnboardingName(state),\n    bucket: onboardingSelectors.selectOnboardingS3BucketName(state),\n    clusterId: onboardingSelectors.selectOnboardingClusterID(state),\n    arn: onboardingSelectors.selectOnboardingArn(state),\n    azureCreds: onboardingSelectors.selectAzureCreds(state),\n    azureAuth: onboardingSelectors.selectAzureAuth(state),\n    status: onboardingSelectors.selectApiStatus(state),\n    errors: onboardingSelectors.selectApiErrors(state),\n})), {\n    cancelOnboarding: onboardingActions.displayConfirm,\n    updateSources: sourcesActions.fetchSources,\n    addSource: onboardingActions.addSource,\n})(translate()(WizardBase));\n","import { Button, Modal } from '@patternfly/react-core';\nimport Final from 'pages/onboardingModal//final';\nimport AwsConfigure from 'pages/onboardingModal/awsConfigure';\nimport AzureCreds from 'pages/onboardingModal/azureCreds';\nimport AzureDataSource from 'pages/onboardingModal/azureDataSource';\nimport Configure from 'pages/onboardingModal/configure';\nimport ConfirmDialog from 'pages/onboardingModal/confirmDialog';\nimport EnableAccountAccess from 'pages/onboardingModal/enableAccountAccess';\nimport IamPolicy from 'pages/onboardingModal/iamPolicy';\nimport IamRole from 'pages/onboardingModal/iamRole';\nimport ObtainLogin from 'pages/onboardingModal/obtainLogin';\nimport SourceKind from 'pages/onboardingModal/sourceKind';\nimport UsageCollector from 'pages/onboardingModal/usageCollector';\nimport React from 'react';\nimport Merlin from 'react-merlin';\nimport { getTestProps, testIds } from 'testIds';\nconst stepMap = type => {\n    switch (type) {\n        case 'AZURE':\n            return [\n                React.createElement(SourceKind, { key: \"source_kind\" }),\n                React.createElement(AzureCreds, { key: \"azure_creds\" }),\n                React.createElement(AzureDataSource, { key: \"azure_auth\" }),\n                React.createElement(Final, { key: \"aws_final\" }),\n            ];\n        case 'AWS':\n            return [\n                React.createElement(SourceKind, { key: \"source_kind\" }),\n                React.createElement(AwsConfigure, { key: \"aws_configure\" }),\n                React.createElement(IamPolicy, { key: \"aws_iam_policy\" }),\n                React.createElement(IamRole, { key: \"aws_iam_role\" }),\n                React.createElement(EnableAccountAccess, { key: \"enable_account_access\" }),\n                React.createElement(Final, { key: \"aws_final\" }),\n            ];\n        case 'OCP':\n            return [\n                React.createElement(SourceKind, { key: \"source_kind\" }),\n                React.createElement(ObtainLogin, { key: \"obtain_login\" }),\n                React.createElement(UsageCollector, { key: \"usage_collector\" }),\n                React.createElement(Configure, { key: \"configure\" }),\n                React.createElement(Final, { key: \"final\" }),\n            ];\n        default:\n            return [React.createElement(SourceKind, { key: \"source_kind\" })];\n    }\n};\nconst dirtyStepMap = (dirtyMap, sourceKindChecked) => type => {\n    switch (type) {\n        case 'AZURE':\n            return [\n                dirtyMap.name && dirtyMap.type,\n                dirtyMap.clientId &&\n                    dirtyMap.tenantId &&\n                    dirtyMap.clientSecret &&\n                    dirtyMap.subscriptionId,\n                dirtyMap.resourceGroup && dirtyMap.storageAccount,\n                true,\n            ];\n        case 'AWS':\n            return [\n                dirtyMap.name && dirtyMap.type,\n                dirtyMap.s3BucketName,\n                true,\n                true,\n                dirtyMap.arn,\n                true,\n            ];\n        case 'OCP':\n            return [\n                dirtyMap.name &&\n                    dirtyMap.type &&\n                    Object.keys(sourceKindChecked).every(k => sourceKindChecked[k]),\n                true,\n                dirtyMap.clusterId,\n                true,\n                true,\n            ];\n        default:\n            return [];\n    }\n};\nexport const WizardBase = ({ t, cancelOnboarding, updateSources, isModalOpen, isInvalid, dirtyMap, sourceKindChecked, status, type, bucket, name, arn, clusterId, addSource, azureCreds, azureAuth, }) => {\n    const steps = stepMap(type);\n    const isDirty = dirtyStepMap(dirtyMap, sourceKindChecked)(type);\n    return (React.createElement(Merlin, null, ({ index, setIndex }) => {\n        if (type === '' && index !== 0) {\n            setIndex(0);\n        }\n        const actions = [\n            (type === '' || index < steps.length) && (React.createElement(Button, Object.assign({}, getTestProps(testIds.onboarding.btn_cancel), { key: \"wizard_cancel\", variant: \"secondary\", id: \"wizard_cancel_button\", isDisabled: status === 1 /* inProgress */, onClick: () => {\n                    cancelOnboarding();\n                } }), t('onboarding.wizard.cancel'))),\n            index > 0 && (React.createElement(Button, Object.assign({}, getTestProps(testIds.onboarding.btn_back), { key: \"wizard_back\", variant: \"secondary\", id: \"wizard_back_button\", isDisabled: status === 1 /* inProgress */, onClick: () => setIndex(index - 1) }), t('onboarding.wizard.back'))),\n            type === '' && (React.createElement(Button, { isDisabled: true, key: \"wizard_init_continue\", variant: \"primary\", id: \"wizard_init_button\" }, t('onboarding.wizard.next'))),\n            type !== '' && index < steps.length - 1 && (React.createElement(Button, Object.assign({}, getTestProps(testIds.onboarding.btn_continue), { isDisabled: !isDirty[index] || isInvalid, key: \"wizard_continue\", variant: \"primary\", id: \"wizard_continue_button\", onClick: () => {\n                    setIndex(index + 1);\n                } }), t('onboarding.wizard.next'))),\n            type !== '' && index === steps.length - 1 && (React.createElement(Button, Object.assign({}, getTestProps(testIds.onboarding.btn_continue), { isDisabled: status === 1 /* inProgress */, key: \"wizard_finish\", variant: \"primary\", id: \"wizard_finish_button\", onClick: () => {\n                    const provider_resource_name = type === 'OCP' ? clusterId : type === 'AWS' ? arn : null;\n                    let billing_source_obj = null;\n                    if (type === 'AWS') {\n                        billing_source_obj = { billing_source: { bucket } };\n                    }\n                    if (type === 'AZURE') {\n                        billing_source_obj = {\n                            billing_source: {\n                                data_source: {\n                                    resource_group: azureAuth.resourceGroup.value,\n                                    storage_account: azureAuth.storageAccount.value,\n                                },\n                            },\n                        };\n                    }\n                    const credentials = type === 'AZURE'\n                        ? {\n                            client_id: azureCreds.clientId.value,\n                            tenant_id: azureCreds.tenantId.value,\n                            client_secret: azureCreds.clientSecret.value,\n                            subscription_id: azureCreds.subscriptionId.value,\n                        }\n                        : null;\n                    addSource(Object.assign({ type,\n                        name, authentication: {\n                            provider_resource_name,\n                            credentials,\n                        } }, billing_source_obj));\n                } }), t('onboarding.wizard.add_source'))),\n        ];\n        return (React.createElement(React.Fragment, null,\n            React.createElement(ConfirmDialog, null),\n            React.createElement(Modal, { style: {\n                    height: '700px',\n                    width: '800px',\n                }, isLarge: true, title: t('onboarding.wizard.title'), isOpen: isModalOpen, actions: actions, onClose: () => {\n                    cancelOnboarding();\n                } }, steps[index])));\n    }));\n};\n"],"sourceRoot":""}