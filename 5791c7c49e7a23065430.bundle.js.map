{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/loadingState/loadingState.styles.ts","webpack:///./src/components/state/loadingState/loadingState.tsx","webpack:///./src/components/state/errorState/errorState.styles.ts","webpack:///./src/components/state/errorState/errorState.tsx","webpack:///./src/utils/sort.ts","webpack:///./src/utils/computedReport/getComputedOcpReportItems.ts","webpack:///./src/utils/computedReport/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/computedReport/getComputedAzureReportItems.ts","webpack:///./src/utils/computedReport/getComputedAwsReportItems.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/utils/computedReport/getItemLabel.ts"],"names":["__webpack_require__","d","__webpack_exports__","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","value","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformAwsReport","transformAzureReport","transformOcpReport","transformOcpCloudReport","getDateRange","getMaxValue","getTooltipContent","getTooltipLabel","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","n","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_computedReport_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_6__","utils_computedReport_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_7__","utils_computedReport_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_8__","utils_computedReport_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_9__","utils_formatValue__WEBPACK_IMPORTED_MODULE_10__","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","map","i","createDatum","reduce","acc","prevValue","length","y","computedItem","x","id","label","Number","isFloat","parseFloat","toFixed","isInt","name","units","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","getDatumDateRange","setDate","lastDate","getDate","max","forEach","datum","t","formatOptions","toString","count","endDate","month","startDate","year","getTestProps","testIds","data-testid","details","cluster_lnk","historical_data_btn","show_more_btn","tag_lnk","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","a","createElement","className","minus_icon","display","justifyContent","height","marginTop","LoadingState","es","icon","binoculars_icon","title","subTitle","EmptyState","Spinner","size","Title","EmptyStateBody","ErrorState","error","error_circle_o_icon","response","status","lock_icon","EmptyStateIcon","getValueForItem","item","sort","array","direction","b","aVal","bVal","getComputedOcpReportItems","getUnsortedComputedOcpReportItems","getIdKeyForGroupBy","utils_sort__WEBPACK_IMPORTED_MODULE_0__","_getItemLabel__WEBPACK_IMPORTED_MODULE_1__","labelKey","itemMap","Map","visitDataPoint","dataPoint","values","cluster_alias","clusters","undefined","cluster","capacity","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","itemLabelKey","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","viewSources","NoProvidersState","react_redux_es","Component","[object Object]","super","arguments","this","getViewSources","props","pathName","window","location","pathname","split","shift","release","href","dollar_sign_icon","getItemLabel","api_query__WEBPACK_IMPORTED_MODULE_0__","String","meta","group_by","keys","indexOf","tagPrefixKey","hasOwnProperty"],"mappings":"0FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAO,MAAAF,EAAAG,IACP,MAAAC,EAAAD,IAAAE,cAAA,GACA,OAAAD,GACA,UACA,SACA,eACA,YACA,iBACA,UACA,aACA,eACA,OAAAA,EACA,QACA,WAGOH,EAAA,CAAAK,EAAAH,EAAAI,QACP,MAAAH,EAAAJ,EAAAG,GACAK,EAAAF,GAAA,EACA,OAAAF,GACA,UACA,OAAAF,EAAAM,EAAAJ,EAAAG,GACA,SACA,eACA,YACA,aACA,eACA,OAAAE,EAAAD,EAAAJ,EAAAG,GACA,iBACA,UACA,OAAAG,EAAAF,EAAAJ,EAAAG,GACA,QACA,OAAAI,EAAAH,EAAAJ,EAAAG,KAGAI,EAAA,CAAAL,EAAAM,GAA6CC,iBAAA,QAC7CP,EAAAQ,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,IAGOX,EAAA,CAAAI,EAAAH,GAAsCU,iBAAA,SAC7C,IAAAL,EAAAF,EAIA,OAHAA,IACAE,EAAA,GAEAA,EAAAM,eAAA,MACAG,MAAA,WACAC,SAAAf,GAAA,MACAY,sBAAAF,EACAG,sBAAAH,KAGOJ,EAAA,CAAAH,EAAAM,GAAsCC,iBAAA,QAC7CP,EAAAQ,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,IAGOH,EAAA,CAAAJ,EAAAM,GAAuCC,iBAAA,QAC9CP,EAAAQ,eAAA,MACAC,sBAAAF,EACAG,sBAAAH,sCC9DAhB,EAAAC,EAAAC,EAAA,sBAAAoB,IAAAtB,EAAAC,EAAAC,EAAA,sBAAAqB,IAAAvB,EAAAC,EAAAC,EAAA,sBAAAsB,IAAAxB,EAAAC,EAAAC,EAAA,sBAAAuB,IAAAzB,EAAAC,EAAAC,EAAA,sBAAAwB,IAAA1B,EAAAC,EAAAC,EAAA,sBAAAyB,IAAA3B,EAAAC,EAAAC,EAAA,sBAAA0B,IAAA5B,EAAAC,EAAAC,EAAA,sBAAA2B,IAAA7B,EAAAC,EAAAC,EAAA,sBAAA4B,IAAA9B,EAAAC,EAAAC,EAAA,sBAAA6B,IAAA,IAAAC,EAAAhC,EAAA,KAAAiC,EAAAjC,EAAAkC,EAAAF,GAAAG,EAAAnC,EAAA,KAAAoC,EAAApC,EAAAkC,EAAAC,GAAAE,EAAArC,EAAA,KAAAsC,EAAAtC,EAAAkC,EAAAG,GAAAE,EAAAvC,EAAA,KAAAwC,EAAAxC,EAAAkC,EAAAK,GAAAE,EAAAzC,EAAA,KAAA0C,EAAA1C,EAAAkC,EAAAO,GAAAE,EAAA3C,EAAA,KAAA4C,EAAA5C,EAAA,KAAA6C,EAAA7C,EAAA,KAAA8C,EAAA9C,EAAA,KAAA+C,EAAA/C,EAAA,KAAAgD,EAAAhD,EAAA,KAYO,SAAAsB,EAAA2B,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACP,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAA0BC,OAAAd,EAAA,EAAAc,CAAyBL,GACnD,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAA9D,KACA,MAAA+D,EAAAD,EAAAE,OAAAF,IAAAE,OAAA,GAAAC,EAAA,EACA,UAAAH,EAAAF,EAAAG,EAAA/D,EAAAmD,GAAAnD,EAAAkD,SAGO,SAAA5B,EAAA0B,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACP,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAA0BC,OAAAb,EAAA,EAAAa,CAA2BL,GACrD,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAA9D,KACA,MAAA+D,EAAAD,EAAAE,OAAAF,IAAAE,OAAA,GAAAC,EAAA,EACA,UAAAH,EAAAF,EAAAG,EAAA/D,EAAAmD,GAAAnD,EAAAkD,SAGO,SAAA3B,EAAAyB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,QACP,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAA0BC,OAAAX,EAAA,EAAAW,CAAyBL,GACnD,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAA9D,KACA,MAAA+D,EAAAD,EAAAE,OAAAF,IAAAE,OAAA,GAAAC,EAAA,EACA,UAAAH,EAAAF,EAAAG,EAAA/D,EAAAmD,GAAAnD,EAAAkD,SAGO,SAAA1B,EAAAwB,EAAAC,EAAA,EAAAC,EAAA,OAAAC,EAAA,sBACP,IAAAH,EACA,SAEA,MAAAI,GACAJ,SACAK,MAAAH,EACAI,QAAA,KACAC,cAAA,GAEAC,EAA0BC,OAAAZ,EAAA,EAAAY,CAA8BL,GACxD,WAAAH,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEA,IAAAD,EACAO,EAAAE,IAAAC,GAAAC,EAAAD,EAAAR,GAAAQ,EAAAT,IAEAM,EAAAK,OAAA,CAAAC,EAAA9D,KACA,MAAA+D,EAAAD,EAAAE,OAAAF,IAAAE,OAAA,GAAAC,EAAA,EACA,UAAAH,EAAAF,EAAAG,EAAA/D,EAAAmD,GAAAnD,EAAAkD,SAGO,SAAAU,EAAApD,EAAA0D,EAAAb,EAAA,QAOP,OACAc,EAPA,SAAAd,EAAoChB,IAAO6B,EAAAE,IAAAF,EAAAG,MAQ3CJ,EA4GA,SAAAhC,GACA,OAAAqC,OAAArC,UAAA,KApHAsC,CAAA/D,GACAgE,WAAAhE,EAAAiE,QAAA,IA+GA,SAAAxC,GACA,OAAAqC,OAAArC,UAAA,KA/GAyC,CAAAlE,GACAA,EACA,EAIA0C,IAAAgB,EAAAE,GACAO,KAAAT,EAAAE,GACAQ,MAAAV,EAAAU,OAiBO,SAAAnD,EAAAoD,EAAAC,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACP,MAAAC,EAAAC,GAfO,SAAAL,EAAAG,EAAA,GACP,IAAAH,MAAAb,OAAA,CACA,MAAAmB,EAAA,IAAAC,KAMA,OAJAJ,GACAG,EAAAE,SAAAF,EAAAG,WAAAN,IAE6BvC,IAAY0C,GACzCA,GAIA,OAFA,IAAAC,KAAAP,EAAA,GAAA3B,IAAA,aACA,IAAAkC,KAAAP,IAAAb,OAAA,GAAAd,IAAA,cAIAqC,CAAAV,EAAAG,GAKA,GAHAF,GAAAG,EAAAO,SACAP,EAAAO,QAAA,GAEAT,GAAAE,EAAAO,QAAA,CACA,MAAAC,EAAyBzD,IAAUiD,GAAAS,UACnCR,EAAAM,QAAAC,GAEA,OAAAR,EAAAC,GAuBO,SAAAxD,EAAAmD,GACP,IAAAc,EAAA,EAQA,OAPAd,KAAAb,QACAa,EAAAe,QAAAC,IACAA,EAAA5B,EAAA0B,IACAA,EAAAE,EAAA5B,KAIA0B,EAEO,SAAAhE,EAAAxB,GACP,gBAAAK,EAAAH,EAAA,KAAAI,MACA,MAAAH,EAAuBmD,OAAAV,EAAA,EAAAU,CAAapD,GACpC,OAAAC,GACA,iBACA,UACA,SACA,eACA,YACA,eACA,OAAuBoC,EAAA,EAAOoD,mBAAoBxF,KAClDE,SAA8BL,EAAAK,EAAAH,EAAAI,OAE9B,QACA,SAA0BN,EAAAK,EAAAH,EAAAI,OAInB,SAAAmB,EAAAiE,EAAA1F,EAAA4F,EAAA1C,EAAA,OAAAuB,GACP,IAAAiB,EAAA3C,IACA,SAEA,YAAAG,EAAA,CAEA,SADqBlB,IAAM0D,EAAA3C,IAAA,kBACD/C,EAAA0F,EAAA5B,EAAAW,GAAAiB,EAAAjB,MAAAmB,KAE1B,OAAAF,EAAA3C,IAAA8C,WAEO,SAAAnE,EAAAgD,EAAA3B,EAAA,0BAAA4B,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACP,MAAAC,EAAAC,GAAAzD,EAAAoD,EAAAC,EAAAC,EAAAC,GACA,OAAWtC,EAAA,EAAOoD,EAAA5C,GAClB+C,MAAe5D,IAAO6C,GACtBgB,QAAiB/D,IAAU+C,EAAA,KAC3BiB,MAAA7B,OAAsBnC,IAAU8C,EAAA,QAChCmB,UAAmBjE,IAAU8C,EAAA,KAC7BoB,KAAc9D,IAAO2C,KAGd,SAAApD,EAAA+C,EAAA3B,EAAA,2BAAA4B,GAAA,EAAAC,GAAA,EAAAC,EAAA,GACP,OAAAnD,EAAAgD,EAAA3B,EAAA4B,EAAAC,EAAAC,sCCpNAjF,EAAAC,EAAAC,EAAA,sBAAAqG,IAAAvG,EAAAC,EAAAC,EAAA,sBAAAsG,IAAO,MACAD,EAAAlC,KAA+BoC,cAAApC,IAC/BmC,GACPE,SACAC,YAAA,cACAC,oBAAA,sBACAC,cAAA,gBACAC,QAAA,UACAC,aAAA,gBAEAC,QACAC,WAAA,aACAC,WAAA,cAEAC,OACAC,MAAA,QACAC,KAAA,aACAC,eAAA,iBACAC,eAAA,iBACAC,OAAA,UAEAC,UACAA,SAAA,WACAC,SAAA,WACAC,cAAA,iBACAC,OAAA,UAEAC,YACAC,WAAA,aACAC,SAAA,WACAC,aAAA,eACAC,UAAA,YACAC,cAAA,gBACAC,aAAA,kBACAC,aAAA,kBACAC,aAAA,kBACAC,WAAA,aACAC,YAAA,cACAC,YAAA,cACAC,SAAA,WACAC,gBAAA,kBACAC,UAAA,aAEAC,WACAC,QAAA,UACAC,aAAA,eACA7B,WAAA,aACA8B,oBAAA,sBACAT,WAAA,sBACAU,oBAAA,+BACAC,iBAAA,4BACA/B,WAAA,aACAgC,WAAA,sBACAC,cAAA,gBAEAC,SACAC,IAAA,eACAC,KAAA,oBACAC,SAAA,6ECzDA,MAAAC,GACAC,QAAA,GAGe,IAAAC,GACfC,KAAAjG,OAAAkG,UAA0BJ,GAC1BK,KAAAnG,OAAAkG,UAA0BJ,GAC1BM,IAAApG,OAAAkG,UAAyBJ,GACzBO,QAAArG,OAAAkG,UAA6BJ,GAC7BQ,YAAAtG,OAAAkG,UAAiCJ,GACjCS,MAAAvG,OAAAkG,UAA2BJ,GAC3BU,SAAAxG,OAAAkG,UAA8BJ,GAC9BW,MAAAzG,OAAAkG,UAA2BJ,GAC3BY,UACAC,KAAA3G,OAAAkG,UAA0BJ,GAC1Bc,IAAA5G,OAAAkG,UAAyBJ,GACzBe,QAAA7G,OAAAkG,UAA6BJ,GAC7BgB,MAAA9G,OAAAkG,UAA2BJ,GAC3BiB,WACAC,QAAAhH,OAAAkG,UAA6BJ,ICnB7B,MAAMmB,ECEN,KAAuBjH,OAAAkH,EAAA,EAAAlH,CAAemH,EAAA,EAAeC,QAAUD,EAAA,EAAiBC,QAAUpB,GDFvEqB,GACJ7K,EAAA,0FEAR,MAAA8K,EAAeC,EAAA,EAAUC,QAChCC,WACAC,SAAkBC,EAAA,mBAAkB5K,SCJpCT,EAAAC,EAAAC,EAAA,sBAAAoL,IAIO,MAAAA,EAAA,IACKC,EAAAC,EAAKC,cAAA,QAAwBC,UAAYhI,OAAAuH,EAAA,EAAAvH,CAAIsH,EAAMG,YACvDI,EAAAC,EAAKC,cAAeE,EAAA,EAAS,qICL9B,MAAAX,EAAeC,EAAA,EAAUC,QAChCC,WACAS,QAAA,OACAC,eAAA,SACAC,OAAA,QACAC,UAAA,WCNA/L,EAAAC,EAAAC,EAAA,sBAAA8L,IAOA,MASAA,EAAqBtI,OAAAuI,EAAA,EAAAvI,GATrB,EAA2BwI,OAAQC,EAAA,EAAcpG,QACjD,MAAAqG,EAAArG,EAAA,+BACAsG,EAAAtG,EAAA,8BACA,OAAYwF,EAAAC,EAAKC,cAAA,OAAuBC,UAAYhI,OAAAuH,EAAA,EAAAvH,CAAIsH,EAAMG,YACtDI,EAAAC,EAAKC,cAAea,EAAA,EAAU,KAC1Bf,EAAAC,EAAKC,cAAec,EAAA,GAAUC,KAAA,OAC9BjB,EAAAC,EAAKC,cAAegB,EAAA,GAAQD,KAAA,MAAaJ,GACzCb,EAAAC,EAAKC,cAAeiB,EAAA,EAAc,KAAAL,8ICbvC,MAAArB,EAAeC,EAAA,EAAUC,QAChCC,WACAS,QAAA,OACAC,eAAA,SACAC,OAAA,QACAC,UAAA,WCNA/L,EAAAC,EAAAC,EAAA,sBAAAyM,IAMA,MAgBAA,EAAmBjJ,OAAAuI,EAAA,EAAAvI,GAhBnB,EAAyBkJ,QAAAV,OAAeW,EAAA,EAAgB9G,QACxD,IAAAqG,EAAArG,EAAA,gCACAsG,EAAAtG,EAAA,+BAQA,OAPA6G,GACAA,EAAAE,WACA,MAAAF,EAAAE,SAAAC,QAAA,MAAAH,EAAAE,SAAAC,UACAb,EAAec,EAAA,EACfZ,EAAArG,EAAA,kCACAsG,EAAAtG,EAAA,kCAEYwF,EAAAC,EAAKC,cAAA,OAAuBC,UAAYhI,OAAAuH,EAAA,EAAAvH,CAAIsH,EAAMG,YACtDI,EAAAC,EAAKC,cAAea,EAAA,EAAY,KAC5Bf,EAAAC,EAAKC,cAAewB,EAAA,GAAiBf,SACrCX,EAAAC,EAAKC,cAAegB,EAAA,GAAQD,KAAA,MAAaJ,GACzCb,EAAAC,EAAKC,cAAeiB,EAAA,EAAc,KAAAL,yCCpB9C,SAAAa,EAAAC,EAAAzM,GACA,oBAAAyM,EACA,OAAAA,EAGA,OAAAA,EADAzM,EAAAyC,KAGO,SAAAiK,EAAAC,EAAA3M,GACP,MAAA4M,UAAWA,EAAA,GAA0B5M,MACrC,UAAA2M,GAAAD,KAAA,CAAA5B,EAAA+B,KACA,MAAAC,EACAN,EADA,IAAAI,EACA9B,EACA+B,EADA7M,GAEA+M,EACAP,EADA,IAAAI,EACAC,EACA/B,EADA9K,GAEA,OAAA8M,EAAAC,GACA,EAEAD,EAAAC,EACA,EAEA,IAtBAzN,EAAAC,EAAAC,EAAA,sBAAAkN,sCCAApN,EAAAC,EAAAC,EAAA,sBAAAwN,IAAA1N,EAAAC,EAAAC,EAAA,sBAAAyN,IAAA3N,EAAAC,EAAAC,EAAA,sBAAA0N,IAAA,IAAAC,EAAA7N,EAAA,KAAA8N,EAAA9N,EAAA,KAEO,SAAA0N,GAAAzK,OAAoCA,EAAAK,QAAAyK,WAAAzK,EAAAC,UAAA,OAAAC,gBAAA,IAC3C,OAAWE,OAAAmK,EAAA,EAAAnK,CAAIiK,GACf1K,SACAK,QACAyK,WACAvK,gBACAD,aAEAJ,IAAAI,EACA+J,UAAA9J,IAGO,SAAAmK,GAAA1K,OAA4CA,EAAAK,QAAAyK,WAAAzK,IACnD,IAAAL,EACA,SAEA,MAAA+K,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAvI,QAAApF,IAEA,MAAA4N,EAAA5N,EAAA6N,UAAA7N,EAAA6N,SAAArK,OAAA,EACAxD,EAAA6N,SAAA,QACAC,EACAC,EAAAH,GAAA5N,EAAA+N,QACAC,EAAAhO,EAAAgO,SAAAhO,EAAAgO,SAAAhO,MAAA,EACAiO,EAAAjO,EAAAiO,KAAAjO,EAAAiO,KAAAjO,MAAA,EACAkO,EAAAlO,EAAAmO,aAAAnO,EAAAmO,aAAAnO,MAAA,EACAoO,EAAApO,EAAAqO,oBACArO,EAAAqO,oBAAArO,MACA,EAEAsO,EAAA,SAAAzL,GAAA,YAAAA,GAAA7C,EAAA+N,YAC0B/N,EAAA+N,UAC1B,GACAnK,KAA8B5D,EAAA6C,KAAeyL,IAC7C,IAAAzK,EACA,MAAA0K,EAAqCtL,OAAAoK,EAAA,EAAApK,EAAcT,SAAA8K,WAAAtN,UAEnD6D,EADA,YAAA0K,GAAAX,EACAA,EAEA5N,EAAAuO,aAAAtL,OACAjD,EAAAuO,GAAAvO,MAGAA,EAAAuO,GAEA,MAAAC,EAAAxO,EAAAwO,MAAAxO,EAAAwO,MAAAxO,MAAA,EACAyO,EAAAzO,EAAAyO,QAAAzO,EAAAyO,QAAAzO,MAAA,EACA0O,EAAA1O,EAAA0O,MAAA1O,EAAA0O,MAAA1O,MAAA,EACAoE,EAAApE,EAAA0O,MACA1O,EAAA0O,MAAAtK,MACApE,EAAAiO,KACAjO,EAAAiO,KAAA7J,MACA,MACAmJ,EAAAoB,IAAA/K,GAmBA2J,EAAAqB,IAAAhL,EAAAX,OAAAkG,UAAgDoE,EAAAoB,IAAA/K,IAAoBoK,SAAAT,EAAAoB,IAAA/K,GAAAoK,WAAAC,KAAAV,EAAAoB,IAAA/K,GAAAqK,OAAAC,YAAAX,EAAAoB,IAAA/K,GAAAsK,cAAAE,mBAAAb,EAAAoB,IAAA/K,GAAAwK,qBAAAI,MAAAjB,EAAAoB,IAAA/K,GAAA4K,QAAAC,QAAAlB,EAAAoB,IAAA/K,GAAA6K,UAAAC,MAAAnB,EAAAoB,IAAA/K,GAAA8K,WAlBpEnB,EAAAqB,IAAAhL,GACAoK,WACAD,UACAF,SAAA7N,EAAA6N,SACAI,OACAY,aAAA7O,EAAA8O,cACAC,WAAA/O,EAAAgP,YACAd,cACAtK,KACAwK,qBACAvK,QACA2K,QACAC,UACArK,QACAsK,YAOA,UAAAhM,KAAAgL,EACA,GAAAA,EAAAhL,aAAAuM,MACA,OAAAvB,EAAAhL,GAAA0C,QAAAqI,IAOA,OAHAjL,KAAA0M,MACA1M,EAAA0M,KAAA9J,QAAAqI,GAEAwB,MAAAE,KAAA5B,EAAAI,UAEO,SAAAR,EAAAiC,MACP,OAAAA,EAAAC,QACA,UAEAD,EAAArB,QACA,UAEAqB,EAAAE,KACA,OAEA,0CCpGA/P,EAAAC,EAAAC,EAAA,sBAAA8P,IAAAhQ,EAAAC,EAAAC,EAAA,sBAAA+P,IAAAjQ,EAAAC,EAAAC,EAAA,sBAAA0N,IAAA,IAAAC,EAAA7N,EAAA,KAAA8N,EAAA9N,EAAA,KAEO,SAAAgQ,GAAA/M,OAAyCA,EAAAK,QAAAyK,WAAAzK,EAAAC,UAAA,OAAAC,gBAAA,IAChD,OAAWE,OAAAmK,EAAA,EAAAnK,CAAIuM,GACfhN,SACAK,QACAyK,WACAvK,gBACAD,aAEAJ,IAAAI,EACA+J,UAAA9J,IAGO,SAAAyM,GAAAhN,OAAiDA,EAAAK,QAAAyK,WAAAzK,IACxD,IAAAL,EACA,SAEA,MAAA+K,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAvI,QAAApF,IAEA,MAAA4N,EAAA5N,EAAA6N,UAAA7N,EAAA6N,SAAArK,OAAA,EACAxD,EAAA6N,SAAA,QACAC,EACAC,EAAAH,GAAA5N,EAAA+N,QACAC,EAAAhO,EAAAgO,SAAAhO,EAAAgO,SAAAhO,MAAA,EACAiO,EAAAjO,EAAAiO,KAAAjO,EAAAiO,KAAAjO,MAAA,EACAkO,EAAAlO,EAAAmO,aAAAnO,EAAAmO,aAAAnO,MAAA,EACAoO,EAAApO,EAAAqO,oBACArO,EAAAqO,oBAAArO,MACA,EACAyP,EAAAzP,EAAA0P,YAAA1P,EAAA0P,YAAA1P,MAAA,EAEAsO,EAAA,SAAAzL,GAAA,YAAAA,GAAA7C,EAAA+N,YAC0B/N,EAAA+N,UAC1B,GACAnK,KAA8B5D,EAAA6C,KAAeyL,IAC7C,IAAAzK,EACA,MAAA0K,EAAqCtL,OAAAoK,EAAA,EAAApK,EAAcT,SAAA8K,WAAAtN,UAEnD6D,EADA,YAAA0K,GAAAX,EACAA,EAEA5N,EAAAuO,aAAAtL,OACAjD,EAAAuO,GAAAvO,MAGAA,EAAAuO,GAEA,YAAAA,GAAAvO,EAAA2P,gBACA9L,EAAA7D,EAAA2P,eAEA,MAAAnB,EAAAxO,EAAAwO,MAAAxO,EAAAwO,MAAAxO,MAAA,EACAyO,EAAAzO,EAAAyO,QAAAzO,EAAAyO,QAAAzO,MAAA,EACA0O,EAAA1O,EAAA0O,MAAA1O,EAAA0O,MAAA1O,MAAA,EACAoE,EAAApE,EAAA0O,MACA1O,EAAA0O,MAAAtK,MACApE,EAAAiO,KACAjO,EAAAiO,KAAA7J,MACA,MACAmJ,EAAAoB,IAAA/K,GAoBA2J,EAAAqB,IAAAhL,EAAAX,OAAAkG,UAAgDoE,EAAAoB,IAAA/K,IAAoBoK,SAAAT,EAAAoB,IAAA/K,GAAAoK,WAAAC,KAAAV,EAAAoB,IAAA/K,GAAAqK,OAAAC,YAAAX,EAAAoB,IAAA/K,GAAAsK,cAAAE,mBAAAb,EAAAoB,IAAA/K,GAAAwK,qBAAAI,MAAAjB,EAAAoB,IAAA/K,GAAA4K,QAAAiB,WAAAlC,EAAAoB,IAAA/K,GAAA6L,aAAAhB,QAAAlB,EAAAoB,IAAA/K,GAAA6K,UAAAC,MAAAnB,EAAAoB,IAAA/K,GAAA8K,WAnBpEnB,EAAAqB,IAAAhL,GACAoK,WACAD,UACAF,SAAA7N,EAAA6N,SACAI,OACAY,aAAA7O,EAAA8O,cACAC,WAAA/O,EAAAgP,YACAd,cACAtK,KACAwK,qBACAvK,QACA2K,QACAiB,aACAhB,UACArK,QACAsK,YAOA,UAAAhM,KAAAgL,EACA,GAAAA,EAAAhL,aAAAuM,MACA,OAAAvB,EAAAhL,GAAA0C,QAAAqI,IAOA,OAHAjL,KAAA0M,MACA1M,EAAA0M,KAAA9J,QAAAqI,GAEAwB,MAAAE,KAAA5B,EAAAI,UAEO,SAAAR,EAAAiC,MACP,OAAAA,EAAAC,QACA,UAEAD,EAAArB,QACA,UAEAqB,EAAAE,KACA,OAEA,0CCzGA/P,EAAAC,EAAAC,EAAA,sBAAAmQ,IAAArQ,EAAAC,EAAAC,EAAA,sBAAAoQ,IAAAtQ,EAAAC,EAAAC,EAAA,sBAAA0N,IAAA,IAAAC,EAAA7N,EAAA,KAAA8N,EAAA9N,EAAA,KAEO,SAAAqQ,GAAApN,OAAsCA,EAAAK,QAAAyK,WAAAzK,EAAAC,UAAA,OAAAC,gBAAA,IAC7C,OAAWE,OAAAmK,EAAA,EAAAnK,CAAI4M,GACfrN,SACAK,QACAyK,WACAvK,gBACAD,aAEAJ,IAAAI,EACA+J,UAAA9J,IAGO,SAAA8M,GAAArN,OAA8CA,EAAAK,QAAAyK,WAAAzK,IACrD,IAAAL,EACA,SAEA,MAAA+K,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAvI,QAAApF,IACA,MAAAiO,EAAAjO,EAAA0O,MAAA1O,EAAA0O,MAAA1O,QAAAiO,KAAAjO,MACAkO,EAAAlO,EAAAmO,aAAAnO,EAAAmO,aAAAnO,MAAA,EACAoO,EAAApO,EAAAqO,oBACArO,EAAAqO,oBAAArO,MACA,EACA4D,EAAA5D,EAAA6C,GACA,IAAAgB,EACA,MAAA0K,EAAqCtL,OAAAoK,EAAA,EAAApK,EAAcT,SAAA8K,WAAAtN,UAEnD6D,EADA7D,EAAAuO,aAAAtL,OACAjD,EAAAuO,GAAAvO,MAGAA,EAAAuO,GAEAhB,EAAAoB,IAAA/K,GAiBA2J,EAAAqB,IAAAhL,EAAAX,OAAAkG,UAAgDoE,EAAAoB,IAAA/K,IAAoBqK,KAAAV,EAAAoB,IAAA/K,GAAAqK,OAAAC,YAAAX,EAAAoB,IAAA/K,GAAAsK,cAAAE,mBAAAb,EAAAoB,IAAA/K,GAAAwK,wBAhBpEb,EAAAqB,IAAAhL,GACAqK,OACAY,aAAA7O,EAAA8O,cACAC,WAAA/O,EAAAgP,YACAd,cACAtK,KACAwK,qBACAvK,QACAO,MAAApE,EAAA0O,MACA1O,EAAA0O,MAAAtK,MACApE,EAAAiO,KACAjO,EAAAiO,KAAA7J,MACA,UAOA,UAAA1B,KAAAgL,EACA,GAAAA,EAAAhL,aAAAuM,MACA,OAAAvB,EAAAhL,GAAA0C,QAAAqI,IAOA,OAHAjL,KAAA0M,MACA1M,EAAA0M,KAAA9J,QAAAqI,GAEAwB,MAAAE,KAAA5B,EAAAI,UAEO,SAAAR,EAAAiC,MACP,OAAAA,EAAAU,kBACA,oBAEAV,EAAAW,cACA,gBAEAX,EAAAY,kBACA,oBAEAZ,EAAAa,aACA,eAEA,0CChFA1Q,EAAAC,EAAAC,EAAA,sBAAAyQ,IAAA3Q,EAAAC,EAAAC,EAAA,sBAAA0Q,IAAA5Q,EAAAC,EAAAC,EAAA,sBAAA0N,IAAA,IAAAC,EAAA7N,EAAA,KAAA8N,EAAA9N,EAAA,KAEO,SAAA2Q,GAAA1N,OAAoCA,EAAAK,QAAAyK,WAAAzK,EAAAC,UAAA,OAAAC,gBAAA,IAC3C,OAAWE,OAAAmK,EAAA,EAAAnK,CAAIkN,GACf3N,SACAK,QACAyK,WACAvK,gBACAD,aAEAJ,IAAAI,EACA+J,UAAA9J,IAGO,SAAAoN,GAAA3N,OAA4CA,EAAAK,QAAAyK,WAAAzK,IACnD,IAAAL,EACA,SAEA,MAAA+K,EAAA,IAAAC,IACAC,EAAAC,IACAA,EAAAC,QACAD,EAAAC,OAAAvI,QAAApF,IACA,MAAAiO,EAAAjO,EAAA0O,MAAA1O,EAAA0O,MAAA1O,QAAAiO,KAAAjO,MACAkO,EAAAlO,EAAAmO,aAAAnO,EAAAmO,aAAAnO,MAAA,EACAoO,EAAApO,EAAAqO,oBACArO,EAAAqO,oBAAArO,MACA,EACA4D,EAAA5D,EAAA6C,GACA,IAAAgB,EACA,MAAA0K,EAAqCtL,OAAAoK,EAAA,EAAApK,EAAcT,SAAA8K,WAAAtN,UAEnD6D,EADA7D,EAAAuO,aAAAtL,OACAjD,EAAAuO,GAAAvO,MAGAA,EAAAuO,GAEA,YAAAA,GAAAvO,EAAA2P,gBACA9L,EAAA7D,EAAA2P,eAEApC,EAAAoB,IAAA/K,GAiBA2J,EAAAqB,IAAAhL,EAAAX,OAAAkG,UAAgDoE,EAAAoB,IAAA/K,IAAoBqK,KAAAV,EAAAoB,IAAA/K,GAAAqK,OAAAC,YAAAX,EAAAoB,IAAA/K,GAAAsK,cAAAE,mBAAAb,EAAAoB,IAAA/K,GAAAwK,wBAhBpEb,EAAAqB,IAAAhL,GACAqK,OACAY,aAAA7O,EAAA8O,cACAC,WAAA/O,EAAAgP,YACAd,cACAtK,KACAwK,qBACAvK,QACAO,MAAApE,EAAA0O,MACA1O,EAAA0O,MAAAtK,MACApE,EAAAiO,KACAjO,EAAAiO,KAAA7J,MACA,UAOA,UAAA1B,KAAAgL,EACA,GAAAA,EAAAhL,aAAAuM,MACA,OAAAvB,EAAAhL,GAAA0C,QAAAqI,IAOA,OAHAjL,KAAA0M,MACA1M,EAAA0M,KAAA9J,QAAAqI,GAEAwB,MAAAE,KAAA5B,EAAAI,UAEO,SAAAR,EAAAiC,MACP,OAAAA,EAAAgB,QACA,UAEAhB,EAAAW,cACA,gBAEAX,EAAAiB,OACA,SAEAjB,EAAAkB,QACA,UAEA,+JCjFO,MAAA/F,EAAeC,EAAA,EAAUC,QAChCC,WACAS,QAAA,OACAC,eAAA,SACAC,OAAA,QACAC,UAAA,SAEAiF,aACAjF,UAAmBV,EAAA,iBAAgB5K,SCVnCT,EAAAC,EAAAC,EAAA,sBAAA+Q,IAgCA,MAAAA,EAAyBvN,OAAAuI,EAAA,EAAAvI,GAAYA,OAAAwN,EAAA,QAAAxN,iBAxBF6H,EAAAC,EAAK2F,UACxCC,cACAC,SAAAC,WACAC,KAAAC,eAAA,MACA,MAAAzL,EAAmBA,GAAIwL,KAAAE,MACvBC,EAAAC,OAAAC,SAAAC,SAAAC,MAAA,KACAJ,EAAAK,QACA,IAAAC,EAAA,GAIA,MAHA,SAAAN,EAAA,KACAM,EAAA,SAEoBzG,EAAAC,EAAKC,cAAA,IAAA/H,OAAAkG,QAAmCqI,QAAUD,sBAA8BtO,OAAA8C,EAAA,EAAA9C,CAAa8C,EAAA,EAAOoC,UAAAO,gBAAApD,EAAA,6BAGxHqL,SACA,MAAArL,EAAeA,GAAIwL,KAAAE,MACnB,OAAgBlG,EAAAC,EAAKC,cAAA,OAAuBC,UAAYhI,OAAAuH,EAAA,EAAAvH,CAAIsH,EAAMG,YACtDI,EAAAC,EAAKC,cAAea,EAAA,EAAU,KAC1Bf,EAAAC,EAAKC,cAAewB,EAAA,GAAiBf,KAAOgG,EAAA,IAC5C3G,EAAAC,EAAKC,cAAegB,EAAA,GAAQD,KAAA,MAAazG,EAAA,gCACzCwF,EAAAC,EAAKC,cAAeiB,EAAA,EAAc,KAAA3G,EAAA,+BAClCwF,EAAAC,EAAKC,cAAA,OAAuBC,UAAYhI,OAAAuH,EAAA,EAAAvH,CAAIsH,EAAMgG,cAAeO,KAAAC,0DC7BjFxR,EAAAC,EAAAC,EAAA,sBAAAiS,IAAA,IAAAC,EAAApS,EAAA,IACO,SAAAmS,GAAAlP,OAAuBA,EAAA8K,WAAAtN,UAC9B,IAAAuO,EAAAqD,OAAAtE,GACA,GAAA9K,EAAAqP,MAAArP,EAAAqP,KAAAC,SAAA,CACA,MAAAA,EAAAtP,EAAAqP,KAAAC,SACA,UAAApP,KAAAO,OAAA8O,KAAAD,GACA,GAAApP,EAAAsP,QAA4BL,EAAA,GAAY,CACxC,MAAAM,EAAqCN,EAAA,EAAYrE,EACjDtN,EAAAkS,eAAAD,KACA1D,EAAA0D,IAKA,OAAA1D","file":"5791c7c49e7a23065430.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { getComputedAwsReportItems, } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/computedReport/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/computedReport/getComputedOcpReportItems';\nimport { unitLookupKey, } from 'utils/formatValue';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        cluster_lnk: 'cluster-lnk',\n        historical_data_btn: 'historical-data-btn',\n        show_more_btn: 'show-more-btn',\n        tag_lnk: 'tag-lnk',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState, EmptyStateBody, Title } from '@patternfly/react-core';\nimport { Spinner } from '@patternfly/react-core/dist/esm/experimental';\nimport { BinocularsIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './loadingState.styles';\nconst LoadingStateBase = ({ icon = BinocularsIcon, t, }) => {\n    const title = t('loading_state.sources_title');\n    const subTitle = t('loading_state.sources_desc');\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(EmptyState, null,\n            React.createElement(Spinner, { size: \"lg\" }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst LoadingState = translate()(LoadingStateBase);\nexport { LoadingState };\n","import { StyleSheet } from '@patternfly/react-styles';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { ErrorCircleOIcon, LockIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './errorState.styles';\nconst ErrorStateBase = ({ error, icon = ErrorCircleOIcon, t, }) => {\n    let title = t('error_state.unexpected_title');\n    let subTitle = t('error_state.unexpected_desc');\n    if (error &&\n        error.response &&\n        (error.response.status === 401 || error.response.status === 403)) {\n        icon = LockIcon;\n        title = t('error_state.unauthorized_title');\n        subTitle = t('error_state.unauthorized_desc');\n    }\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: icon }),\n            React.createElement(Title, { size: \"lg\" }, title),\n            React.createElement(EmptyStateBody, null, subTitle))));\n};\nconst ErrorState = translate()(ErrorStateBase);\nexport { ErrorState };\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (itemLabelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from 'utils/sort';\nimport { getItemLabel } from './getItemLabel';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                const itemLabelKey = getItemLabel({ report, labelKey, value });\n                if (value[itemLabelKey] instanceof Object) {\n                    label = value[itemLabelKey].value;\n                }\n                else {\n                    label = value[itemLabelKey];\n                }\n                if (itemLabelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            const pathName = window.location.pathname.split('/');\n            pathName.shift();\n            let release = '';\n            if (pathName[0] === 'beta') {\n                release = `/beta`;\n            }\n            return (React.createElement(\"a\", Object.assign({ href: `${release}/settings/sources` }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst NoProvidersState = translate()(connect()(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { tagKeyPrefix } from 'api/query';\nexport function getItemLabel({ report, labelKey, value }) {\n    let itemLabelKey = String(labelKey);\n    if (report.meta && report.meta.group_by) {\n        const group_by = report.meta.group_by;\n        for (const key of Object.keys(group_by)) {\n            if (key.indexOf(tagKeyPrefix)) {\n                const tagPrefixKey = tagKeyPrefix + labelKey;\n                if (value.hasOwnProperty(tagPrefixKey)) {\n                    itemLabelKey = tagPrefixKey;\n                }\n            }\n        }\n    }\n    return itemLabelKey;\n}\n"],"sourceRoot":""}