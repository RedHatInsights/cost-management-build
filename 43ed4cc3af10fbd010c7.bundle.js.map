{"version":3,"file":"43ed4cc3af10fbd010c7.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/routes/views/details/components/breakdown/index.ts","webpack://koku-ui/./src/routes/views/details/ociBreakdown/costOverview.tsx","webpack://koku-ui/./src/routes/views/details/ociBreakdown/historicalData.tsx","webpack://koku-ui/./src/routes/views/details/ociBreakdown/ociBreakdown.tsx","webpack://koku-ui/./src/routes/views/details/ociBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedOciReportItems.ts","webpack://koku-ui/./src/routes/views/details/ociDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/routes/views/details/ociDetails/detailsHeader.tsx","webpack://koku-ui/./src/routes/views/details/ociDetails/detailsTable.styles.ts","webpack://koku-ui/./src/routes/views/details/ociDetails/detailsTable.tsx","webpack://koku-ui/./src/routes/views/details/ociDetails/detailsToolbar.tsx","webpack://koku-ui/./src/routes/views/details/ociDetails/ociDetails.styles.ts","webpack://koku-ui/./src/routes/views/details/ociDetails/ociDetails.tsx","webpack://koku-ui/./src/routes/views/details/ociDetails/index.ts"],"sourcesContent":["import BreakdownBase from './breakdownBase';\nexport default BreakdownBase;\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview/costOverviewBase';\nimport { ociCostOverviewSelectors } from 'store/breakdown/costOverview/ociCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ociCostOverviewSelectors.selectWidgets(state),\n        widgets: ociCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData/historicalDataBase';\nimport { ociHistoricalDataSelectors } from 'store/breakdown/historicalData/ociHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ociHistoricalDataSelectors.selectWidgets(state),\n        widgets: ociHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport BreakdownBase from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ociDetails;\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"oci\" /* ReportPathsType.oci */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.ociDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers: filterProviders(providers, \"oci\" /* ProviderType.oci */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"oci\" /* ProviderType.oci */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"oci\" /* TagPathsType.oci */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OciCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OciCost;\n","import OciBreakdown from './ociBreakdown';\nexport default OciBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.payer_tenant_id) {\n        return 'payer_tenant_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.product_service) {\n        return 'product_service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/ociQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'payer_tenant_id', value: 'payer_tenant_id' },\n    { label: 'product_service', value: 'product_service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = \"oci\" /* TagPathsType.oci */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ociDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, null),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, \"oci\" /* ProviderType.oci */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './ociDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ociQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"oci\" /* ReportPathsType.oci */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ociDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.ociDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ociQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* TagType.tag */;\nconst tagReportPathsType = \"oci\" /* TagPathsType.oci */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'payer_tenant_id' }),\n                    key: 'payer_tenant_id',\n                },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'product_service' }),\n                    key: 'product_service',\n                },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'region' }),\n                    key: 'region',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"oci\" /* ResourcePathsType.oci */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReportFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    ociDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ociQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport Loading from 'routes/state/loading';\nimport NoData from 'routes/state/noData';\nimport NoProviders from 'routes/state/noProviders';\nimport NotAvailable from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'routes/views/utils/query';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOciReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ociDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        payer_tenant_id: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"oci\" /* ReportPathsType.oci */;\nclass OciDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { intl, report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, titles: {\n                    paginationTitle: intl.formatMessage(messages.paginationTitle, {\n                        title: intl.formatMessage(messages.oci),\n                        placement: isBottom ? 'bottom' : 'top',\n                    }),\n                }, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: `exports-pagination${isBottom ? '-bottom' : ''}` }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* FetchStatus.inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.ociDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* FetchStatus.inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* FetchStatus.complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"oci\" /* ProviderType.oci */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ociDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"oci\" /* ProviderType.oci */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OciDetails));\n","import OciDetails from './ociDetails';\nexport default OciDetails;\n"],"names":["mapStateToProps","state","props","selectWidgets","ociCostOverview","widgets","CostOverview","injectIntl","connect","ociHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","payer_tenant_id","region","product_service","styles","costValue","marginTop","global_spacer_lg","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","display","justifyContent","headerContentLeft","minHeight","headerContentRight","paddingBottom","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onGroupBySelected","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","showTags","Boolean","format","units","featureFlags","DetailsHeader","emptyState","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","ociDetails","content","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","offset","OciDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","titles","paginationTitle","placement","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"sourceRoot":""}