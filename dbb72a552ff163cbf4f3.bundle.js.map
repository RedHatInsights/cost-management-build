{"version":3,"file":"dbb72a552ff163cbf4f3.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/details/awsBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/awsBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/awsBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAwsReportItems.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/awsDetails.tsx","webpack://koku-ui/./src/pages/views/details/awsDetails/index.ts"],"sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { awsCostOverviewSelectors } from 'store/breakdown/costOverview/awsCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { awsHistoricalDataSelectors } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, logicalAndPrefix, orgUnitIdKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByOrgValue, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupByOrgValue = getGroupByOrgValue(query);\n    const groupBy = groupByOrgValue ? orgUnitIdKey : getGroupById(query);\n    const groupByValue = groupByOrgValue ? groupByOrgValue : getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })), (query && query.filter && query.filter.account && { [`${logicalAndPrefix}account`]: query.filter.account })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.AWSDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"aws\" /* aws */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        showCostType: true,\n        tagReportPathsType: \"aws\" /* aws */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","import AwsBreakdown from './awsBreakdown';\nexport default AwsBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { CostType } from 'components/costType/costType';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = \"aws\" /* aws */;\nconst tagReportPathsType = \"aws\" /* aws */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.AWSDetailsTitle)),\n                React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType }),\n                    React.createElement(\"div\", { style: styles.costType },\n                        React.createElement(CostType, null))),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './awsDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { getOrgBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"aws\" /* aws */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.Names, { count: 2 })\n                            : intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: getOrgBreakdownPath({\n                        basePath: paths.awsDetailsBreakdown,\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        groupByOrg,\n                        id: item.id,\n                        orgUnitId: getGroupByOrgValue(query),\n                        query,\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.AWSDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = \"aws\" /* aws */;\nconst orgReportType = \"org\" /* org */;\nconst tagReportPathsType = \"aws\" /* aws */;\nconst tagReportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, orgReport, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, queryString } = this.props;\n        fetchOrg(orgReportPathsType, orgReportType, queryString);\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, resourcePathsType: \"aws\" /* aws */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const groupBy = groupByTagKey || groupById;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupBy === orgUnitIdKey ? 'org_entities' : groupBy,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.AWSDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"aws\" /* aws */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetails from './awsDetails';\nexport default AwsDetails;\n"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","injectIntl","connect","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupByOrgValue","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","account","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","showCostType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","instance_type","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costType","display","dateTitle","textAlign","header","headerContent","justifyContent","headerContentLeft","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","onGroupBySelected","providersError","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","orgReportPathsType","showOrgs","showTags","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByOrg","groupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","id","orgUnitId","type","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","disabled","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","keys","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","orgReportFetchStatus","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","indexOf","slice","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui"],"sourceRoot":""}