{"version":3,"sources":["webpack:///./src/pages/ocpOnAwsDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpOnAwsReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummary.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItem.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryItems.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpOnAwsReportSummary/ocpOnAwsReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/groupBy.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/groupBy.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsHeader.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/detailsTagView.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpOnAwsDetails/exportModal.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/exportModal.tsx","webpack:///./src/pages/ocpOnAwsDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/historicalChart.tsx","webpack:///./src/pages/ocpOnAwsDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/historicalModal.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsActions.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/detailsChart.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/detailsTag.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsWidget.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsTable.tsx","webpack:///./src/pages/ocpOnAwsDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpOnAwsDetails/ocpOnAwsDetails.styles.ts","webpack:///./src/pages/ocpOnAwsDetails/ocpOnAwsDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpOnAwsDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpOnAwsReport","utils_getComputedOcpOnAwsReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpOnAwsReportItems","getUnsortedComputedOcpOnAwsReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","colorScale","esm","labels","fontFamily","minWidth","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","width","initDatum","currentData","previousData","legendData","chartUtils","push","symbol","setState","chartDatum","charts","show","onClick","handleCostLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","title","eventHandlers","target","mutation","ChartLegend","events","gutter","labelComponent","chartLabelTooltip","getLegendTooltip","orientation","formatDatumValue","formatDatumOptions","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","result","trim","containerHeight","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","isEqual","obj1","obj2","JSON","stringify","split","join","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendColorScale","handleLegendClick","legendItemsPerRow","responsive","childName","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","marginLeft","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpOnAwsReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpOnAwsReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpOnAwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpOnAwsReportSummaryDetails_styles_styles","text","alignItems","paddingBottom","lineHeight","titleContainer","usageText","usageValue","valueContainer","wordWrap","OcpOnAwsReportSummaryDetails","costLabel","reportType","requestLabel","showUnits","usageFormatOptions","usageLabel","emptyValueState","awsReportType","meta","total","usageUnits","unitsLabel","utils_formatValue","ocpOnAwsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpOnAwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpOnAwsReportSummaryItem","ocpOnAwsReportSummaryItems_styles_styles","skeleton","OcpOnAwsReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","ocpOnAwsReportSummaryTrend_styles_styles","OcpOnAwsReportSummaryTrend","trendChart","OcpOnAwsReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","previous","previousLegendData","currentLegendData","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","backgroundColor","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpOnAwsQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpOnAwsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","getDropDownTags","Set","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","date","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","query","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpOnAwsReportSummary","_item","DetailsWidgetModal","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpOnAwsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","aria-label","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpOnAwsReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpOnAwsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpOnAwsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","trunc","limitUnits","requestUnits","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpOnAwsDetails_styles_styles","ocpOnAwsDetails","tableContainer","ocpOnAwsDetails_reportType","ocpOnAwsDetails_tagKey","ocpOnAwsDetails_baseQuery","ocpOnAwsDetails_mapStateToProps","ocpOnAwsDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"84184a3eed5aa0ae4933.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpOnAwsDetails from './ocpOnAwsDetails';\nexport default hot(module)(OcpOnAwsDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpOnAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpOnAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpOnAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpOnAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousData,\n                            name: 'previous',\n                            show: true,\n                            style: chartStyles.previousMonth,\n                        },\n                        {\n                            data: currentData,\n                            name: 'current',\n                            show: true,\n                            style: chartStyles.currentMonth,\n                        },\n                    ],\n                    legend: {\n                        colorScale: chartStyles.colorScale,\n                        data: legendData,\n                        onClick: this.handleCostLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { title } = this.props;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 20, height: 25, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(item => {\n                if (item.name && item.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_100, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_100.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: true, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { ChartLabelTooltip } from '../chartLabelTooltip';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            if (previousData) {\n                const [start] = getMonthRangeString(previousData, 'chart.month_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousData, true, true, 1),\n                });\n            }\n            if (currentData) {\n                const [start] = getMonthRangeString(currentData, 'chart.month_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentData, true, false),\n                });\n            }\n            const charts = [\n                {\n                    data: previousData,\n                    name: 'previous',\n                    show: true,\n                    style: chartStyles.previousMonth,\n                },\n                {\n                    data: currentData,\n                    name: 'current',\n                    show: true,\n                    style: chartStyles.currentMonth,\n                },\n            ];\n            const legend = {\n                colorScale: chartStyles.colorScale,\n                data: legendData,\n                onClick: this.handleCostLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleCostLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-trend-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            const { legendItemsPerRow } = this.props;\n            if (chartDatum && chartDatum.data && chartDatum.data.length) {\n                const eventHandlers = {\n                    onClick: () => {\n                        return [\n                            {\n                                target: 'data',\n                                mutation: props => {\n                                    chartDatum.onClick(props);\n                                    return null;\n                                },\n                            },\n                        ];\n                    },\n                };\n                return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers,\n                        },\n                        {\n                            target: 'labels',\n                            eventHandlers,\n                        },\n                    ], gutter: 20, height: 25, itemsPerRow: legendItemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummary.styles';\nconst OcpOnAwsReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpOnAwsReportSummary = translate()(OcpOnAwsReportSummaryBase);\nexport { OcpOnAwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpOnAwsReportSummaryAlt.styles';\nconst OcpOnAwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpOnAwsReportSummaryAlt = translate()(OcpOnAwsReportSummaryAltBase);\nexport { OcpOnAwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    titleContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        minWidth: '175px',\n        width: '50%',\n    },\n    usageText: {\n        marginRight: global_spacer_sm.value,\n    },\n    usageValue: {\n        marginRight: global_spacer_sm.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryDetails.styles';\nconst OcpOnAwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestLabel, showUnits = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const awsReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        if (awsReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', formatOptions);\n        }\n    }\n    if (reportType === \"cost\" /* cost */) {\n        return (React.createElement(\"div\", { className: css(styles.titleContainer) },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)));\n    }\n    else if (!awsReportType) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value, styles.usageValue) },\n                    usage,\n                    React.createElement(\"div\", { className: css(styles.text) },\n                        React.createElement(\"div\", null, usageLabel)))),\n            React.createElement(\"div\", { className: css(styles.titleContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    request,\n                    React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n    }\n    else {\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) }, cost),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, costLabel))),\n            Boolean(usageLabel) && (React.createElement(\"div\", { className: css(styles.valueContainer) },\n                React.createElement(\"div\", { className: css(styles.value) },\n                    usage,\n                    Boolean(showUnits && usage >= 0) && (React.createElement(\"span\", { className: css(styles.text) }, unitsLabel))),\n                React.createElement(\"div\", { className: css(styles.text) },\n                    React.createElement(\"div\", null, usageLabel))))));\n    }\n};\nconst OcpOnAwsReportSummaryDetails = translate()(OcpOnAwsReportSummaryDetailsBase);\nexport { OcpOnAwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpOnAwsReportSummaryItem.styles';\nconst OcpOnAwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpOnAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpOnAwsReportSummaryItem = translate()(OcpOnAwsReportSummaryItemBase);\nexport { OcpOnAwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { styles } from './ocpOnAwsReportSummaryItems.styles';\nclass OcpOnAwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpOnAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpOnAwsReportSummaryItems = translate()(OcpOnAwsReportSummaryItemsBase);\nexport { OcpOnAwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpOnAwsReportSummaryTrend.styles';\nconst OcpOnAwsReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpOnAwsReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { ChartLabelTooltip } from '../chartLabelTooltip';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const previous = [\n                {\n                    data: previousUsageData,\n                    name: 'previousUsage',\n                    show: true,\n                    style: chartStyles.previousUsageData,\n                },\n                {\n                    data: previousRequestData,\n                    name: 'previousRequest',\n                    show: true,\n                    style: chartStyles.previousRequestData,\n                },\n                {\n                    data: previousLimitData,\n                    name: 'previousLimit',\n                    show: true,\n                    style: chartStyles.previousLimitData,\n                },\n            ];\n            const current = [\n                {\n                    data: currentUsageData,\n                    name: 'currentUsage',\n                    show: true,\n                    style: chartStyles.currentUsageData,\n                },\n                {\n                    data: currentRequestData,\n                    name: 'currentRequest',\n                    show: true,\n                    style: chartStyles.currentRequestData,\n                },\n                {\n                    data: currentLimitData,\n                    name: 'currentLimit',\n                    show: true,\n                    style: chartStyles.currentLimitData,\n                },\n            ];\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n            }\n            if (previousLimitData) {\n                const [start] = getMonthRangeString(previousLimitData, 'chart.limit_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousLimitData, true, true, 1),\n                });\n            }\n            const currentLegendData = [];\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentLegendData, 'chart.usage_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n            }\n            if (currentLimitData) {\n                const [start] = getMonthRangeString(currentLimitData, 'chart.limit_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentLimitData, true, false),\n                });\n            }\n            // Merge current and previous data into one legend row\n            const charts = [];\n            const colorScale = [];\n            const legendData = [];\n            for (let i = 0; i < current.length && previous.length; i++) {\n                charts.push(previous[i]);\n                charts.push(current[i]);\n                legendData.push(previousLegendData[i]);\n                legendData.push(currentLegendData[i]);\n                colorScale.push(chartStyles.previousColorScale[i]);\n                colorScale.push(chartStyles.currentColorScale[i]);\n            }\n            const legend = {\n                colorScale,\n                data: legendData,\n                onClick: this.handleLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 0, height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { parseQuery } from 'api/ocpOnAwsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsReportsActions, ocpOnAwsReportsSelectors, } from 'store/ocpOnAwsReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpOnAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpOnAwsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsReportsActions, ocpOnAwsReportsSelectors, } from 'store/ocpOnAwsReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const today = new Date();\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_on_aws_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.infrastructure_cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('ocp_on_aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpOnAwsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpOnAwsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpOnAwsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsReportsActions, ocpOnAwsReportsSelectors, } from 'store/ocpOnAwsReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpOnAwsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_on_aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { OcpOnAwsReportSummaryItem, OcpOnAwsReportSummaryItems, } from 'components/reports/ocpOnAwsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsReportsActions, ocpOnAwsReportsSelectors, } from 'store/ocpOnAwsReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report &&\n            report.meta &&\n            report.meta.total &&\n            report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_on_aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpOnAwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpOnAwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.infrastructure_cost.value, units: _item.units, value: _item.infrastructureCost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpOnAwsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_on_aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsExportActions, ocpOnAwsExportSelectors, } from 'store/ocpOnAwsExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpOnAwsExportSelectors.selectExportError(state),\n        export: ocpOnAwsExportSelectors.selectExport(state),\n        fetchStatus: ocpOnAwsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpOnAwsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpOnAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpOnAwsReportsActions from 'store/ocpOnAwsReports/ocpOnAwsReportsActions';\nimport * as ocpOnAwsReportsSelectors from 'store/ocpOnAwsReports/ocpOnAwsReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpOnAwsReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpOnAwsReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpOnAwsReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpOnAwsReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpOnAwsReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpOnAwsReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpOnAwsReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpOnAwsReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpOnAwsReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpOnAwsReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpOnAwsReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpOnAwsReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpOnAwsReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpOnAwsReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.infrastructure_cost\n            ? currentCostReport.meta.total.infrastructure_cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_on_aws_details.historical.cost_title'), xAxisLabel: t('ocp_on_aws_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_on_aws_details.historical.cpu_title'), xAxisLabel: t('ocp_on_aws_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_on_aws_details.historical.memory_title'), xAxisLabel: t('ocp_on_aws_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpOnAwsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpOnAwsReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpOnAwsReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpOnAwsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpOnAwsReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpOnAwsReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsDashboardSelectors } from 'store/ocpOnAwsDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_on_aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpOnAwsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_on_aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_on_aws_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_on_aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_on_aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsReportsActions, ocpOnAwsReportsSelectors, } from 'store/ocpOnAwsReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        if (report && report.meta && report.meta.total) {\n            if (report.meta.total.limit !== null) {\n                const limit = Math.trunc(report.meta.total.limit.value);\n                const limitUnits = t(`units.${unitLookupKey(report.meta.total.limit.units)}`);\n                datum.limit = {\n                    legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    value: Math.trunc(limit),\n                };\n            }\n            if (report.meta.total.request !== null) {\n                const request = Math.trunc(report.meta.total.request.value);\n                const requestUnits = t(`units.${unitLookupKey(report.meta.total.request.units)}`);\n                datum.ranges = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        value: Math.trunc(request),\n                    },\n                ];\n            }\n            if (report.meta.total.usage !== null) {\n                const usage = Math.trunc(report.meta.total.usage.value);\n                const usageUnits = t(`units.${unitLookupKey(report.meta.total.usage.units)}`);\n                datum.usage = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        value: Math.trunc(usage),\n                    },\n                ];\n            }\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpOnAwsReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpOnAwsReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsReportsActions, ocpOnAwsReportsSelectors, } from 'store/ocpOnAwsReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_on_aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpOnAwsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { OcpOnAwsReportSummaryItem, OcpOnAwsReportSummaryItems, } from 'components/reports/ocpOnAwsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsReportsActions, ocpOnAwsReportsSelectors, } from 'store/ocpOnAwsReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpOnAwsReportItems } from 'utils/getComputedOcpOnAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpOnAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpOnAwsReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.infrastructure_cost.value, units: reportItem.units, value: reportItem.infrastructureCost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_on_aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpOnAwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpOnAwsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top_ocp_on_aws', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_on_aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_on_aws_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_on_aws_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpOnAwsQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_on_aws_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_on_aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_on_aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_on_aws_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_on_aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_on_aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpOnAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_on_aws_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('ocp_on_aws_details.increase_since_date', {\n                            date,\n                            month,\n                            value,\n                        })\n                        : t('ocp_on_aws_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('ocp_on_aws_details.decrease_since_date', {\n                                date,\n                                month,\n                                value,\n                            })\n                            : t('ocp_on_aws_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('ocp_on_aws_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.infrastructure_cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpOnAwsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpOnAwsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpOnAwsReportsActions, ocpOnAwsReportsSelectors, } from 'store/ocpOnAwsReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpOnAwsReportItems, } from 'utils/getComputedOcpOnAwsReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpOnAwsDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpOnAwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_on_aws_details.filter.name'),\n                        title: t('ocp_on_aws_details.filter.cluster_select'),\n                        placeholder: t('ocp_on_aws_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_on_aws_details.filter.name'),\n                        title: t('ocp_on_aws_details.filter.node_select'),\n                        placeholder: t('ocp_on_aws_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_on_aws_details.filter.name'),\n                        title: t('ocp_on_aws_details.filter.project_select'),\n                        placeholder: t('ocp_on_aws_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_on_aws_details.filter.name'),\n                        title: t('ocp_on_aws_details.filter.tag_select'),\n                        placeholder: t('ocp_on_aws_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_on_aws_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${filterType}:${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${filterType}:${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-on-aws?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpOnAwsReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpOnAwsDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpOnAwsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpOnAwsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpOnAwsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpOnAwsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpOnAwsDetails));\n"],"sourceRoot":""}