{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx","webpack://koku-ui/./src/utils/userAccess.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","PerspectiveBase","constructor","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","t","label","getCurrentLabel","currentItem","onItemClicked","handleSelect","setState","handleToggle","render","isDisabled","dropdownItems","style","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","Perspective","withTranslation","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","costLabel","costValue","marginTop","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupByClicked","providersError","showContent","meta","count","hasCost","total","Title","headingLevel","size","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChart","containerRef","observer","noop","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","units","getUnits","datum","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","sectionWidth","getChart","barWidth","has","y","ChartBar","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","max","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","modVal","i","str","substr","maxChars","getTickValue","handleResize","clientWidth","current","componentWillUnmount","container","disable","labelComponent","ChartLegendTooltip","legendData","i18next","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpOptions","ocpOptions","getComputedReportItemType","perspective","result","getComputedReportItemValueType","getDateRange","dateRangeType","endDate","Date","startDate","dateRange","setDate","setMonth","getMonth","end_date","format","start_date","getDateRangeDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","getDate","month","yVal","parseFloat","getChartDatums","computedReportItemType","computedReportItemValueType","chartDatums","datums","Map","Array","from","padChartDatums","getChartTitle","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","skeleton","padDate","chartDatum","formatValue","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgQueryString","orgReportPathsType","tagQueryString","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getPerspective","currentPerspective","aws","isAwsAvailable","azure","isAzureAvailable","gcp","isGcpAvailable","ibm","isIbmAvailable","ocp","isOcpAvailable","handlePerspectiveClick","onPerspectiveClicked","awsProviders","awsProvidersFetchStatus","userAccess","azureProviders","azureProvidersFetchStatus","gcpProviders","gcpProvidersFetchStatus","ibmProviders","ibmProvidersFetchStatus","ibmUserAccess","ocpProviders","ocpProvidersFetchStatus","noProviders","getResourcePathsType","showOrgs","userAccessQueryString","userAccessError","userAccessFetchStatus","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","mapIdDate","rowItem","get","set","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","showAggregateType","showTimeScope","slice","newPerspective","getPerspectiveDefault","hasAccess","userAccessType","isArray","d","type","access","hasProviders","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"mappings":"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","file":"109509b9148e7d2f4cb7.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.azure_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.azure_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('details.tag_names'),\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                {\n                    name: t('filter_by.values.subscription_guid'),\n                    key: 'subscription_guid',\n                },\n                { name: t('filter_by.values.service_name'), key: 'service_name' },\n                {\n                    name: t('filter_by.values.resource_location'),\n                    key: 'resource_location',\n                },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.azure_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { formatCurrencyAbbreviation } from 'utils/formatValue';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 20,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues(), fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: 'explorer.date_range.current_month_to_date', value: 'current_month_to_date' },\n    { label: 'explorer.date_range.previous_month_to_date', value: 'previous_month_to_date' },\n    { label: 'explorer.date_range.last_thirty_days', value: 'last_thirty_days' },\n    { label: 'explorer.date_range.last_sixty_days', value: 'last_sixty_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: 'explorer.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nexport const infrastructureAwsCloudOptions = [{ label: 'explorer.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: 'explorer.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nexport const infrastructureAzureCloudOptions = [{ label: 'explorer.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: 'explorer.perspective.gcp', value: 'gcp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: 'explorer.perspective.ibm', value: 'ibm' }];\n// Infrastructure Ocp options\nexport const infrastructureOcpOptions = [{ label: 'explorer.perspective.ocp_usage', value: 'ocp_usage' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: 'explorer.perspective.ocp_cloud', value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [\n    { label: 'explorer.perspective.ocp', value: 'ocp' },\n    { label: 'explorer.perspective.ocp_supplementary', value: 'ocp_supplementary' },\n];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"supplementary\" /* supplementary */;\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"infrastructure\" /* infrastructure */;\n            break;\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"usage\" /* usage */;\n            break;\n        default:\n            result = \"total\" /* total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, queryFromRoute, userAccess, }) => {\n    let result = queryFromRoute.perspective;\n    if (!result) {\n        if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n            result = \"ocp\" /* ocp */;\n        }\n        else if (isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus)) {\n            result = \"aws\" /* aws */;\n        }\n        else if (isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus)) {\n            result = \"azure\" /* azure */;\n        }\n        else if (isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus)) {\n            result = \"gcp\" /* gcp */;\n        }\n        else if (isIbmAvailable(userAccess, ibmProviders, ibmProvidersFetchStatus)) {\n            result = \"ibm\" /* ibm */;\n        }\n    }\n    return result;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            result = \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            result = \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"ocp_usage\" /* ocpUsage */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            return \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            return \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n        case \"ibm\" /* ibm */:\n            return \"ibm\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            return \"ocp\" /* ocp */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            return \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            return \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { isFloat, isInt, } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatValue } from 'utils/formatValue';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { t } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = t('chart.date', { date: getDate(computedItemDate), month: getMonth(computedItemDate) });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return {\n                x: xVal,\n                y: value === null ? null : yVal,\n                date: computedItem.date,\n                key: computedItem.id,\n                name: computedItem.label ? computedItem.label : computedItem.id,\n                units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined,\n            };\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getChartTitle = (perspective) => {\n            let result;\n            switch (perspective) {\n                case \"aws\" /* aws */:\n                    result = 'explorer.title.aws';\n                    break;\n                case \"aws_cloud\" /* awsCloud */:\n                    result = 'explorer.title.aws_cloud';\n                    break;\n                case \"azure\" /* azure */:\n                    result = 'explorer.title.azure';\n                    break;\n                case \"azure_cloud\" /* azureCloud */:\n                    result = 'explorer.title.azure_cloud';\n                    break;\n                case \"gcp\" /* gcp */:\n                    result = 'explorer.title.gcp';\n                    break;\n                case \"ibm\" /* ibm */:\n                    result = 'explorer.title.ibm';\n                    break;\n                case \"ocp\" /* ocp */:\n                    result = 'explorer.title.ocp';\n                    break;\n                case \"ocp_cloud\" /* ocpCloud */:\n                    result = 'explorer.title.ocp_cloud';\n                    break;\n                case \"ocp_supplementary\" /* ocpSupplementary */:\n                    result = 'explorer.title.ocp_supplementary';\n                    break;\n                case \"ocp_usage\" /* ocpUsage */:\n                    result = 'explorer.title.ocp_usage';\n                    break;\n                default:\n                    result = undefined;\n                    break;\n            }\n            return result;\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, t } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, t(this.getChartTitle(perspective)))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = withRouter(withTranslation()(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = withTranslation()(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, t, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: t(`filter_by.values.${option.label}`),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Fetch tags with largest date range available\n    const { start_date, end_date } = getLast60DaysDate();\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery({\n        start_date,\n        end_date,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = withRouter(withTranslation()(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getRouteForQuery, getTagReportPathsType, infrastructureAwsCloudOptions, infrastructureAwsOptions, infrastructureAzureCloudOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureIbmOptions, \n// infrastructureOcpCloudOptions, // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\ninfrastructureOcpOptions, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { currentPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (ocp) {\n                options.push(...ocpOptions);\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n                //\n                // options.push(...infrastructureOcpCloudOptions);\n            }\n            if (aws) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (ocp && aws) {\n                options.push(...infrastructureAwsCloudOptions);\n            }\n            if (gcp) {\n                options.push(...infrastructureGcpOptions);\n            }\n            if (ibm) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (azure) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (ocp && azure) {\n                options.push(...infrastructureAzureCloudOptions);\n            }\n            if (ocp) {\n                options.push(...infrastructureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.handlePerspectiveClick = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n            });\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { perspective } = this.props;\n        if (prevProps.perspective !== perspective) {\n            this.setState({\n                currentPerspective: this.props.perspective,\n            });\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, ibmProvidersFetchStatus, ibmUserAccess, groupBy, gcpProvidersFetchStatus, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupByClicked, perspective, query, t, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        // Fetch tags with largest date range available\n        const { start_date, end_date } = getLast60DaysDate();\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.explorer')),\n                React.createElement(\"div\", { style: styles.perspectiveContainer },\n                    this.getPerspective(noProviders),\n                    React.createElement(\"div\", { style: styles.groupBy },\n                        React.createElement(GroupBy, { endDate: end_date, getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, startDate: start_date, tagReportPathsType: tagReportPathsType }))),\n                React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType }))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const queryFromRoute = parseQuery(location.search);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = withRouter(withTranslation()(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, t, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg ? t('explorer.org_unit_column_title') : t('details.tag_names'),\n                    },\n                ]\n                : [\n                    {\n                        cellTransforms: [nowrap],\n                        orderBy: groupById === 'account' && perspective === \"aws\" /* aws */ ? 'account_alias' : groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                ];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push({\n                    cellTransforms: [nowrap],\n                    orderBy: undefined,\n                    title: t('explorer.daily_column_title', { date, month }),\n                    transforms: undefined,\n                });\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n            }\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[reportItem] && item[reportItem][reportItemValue]\n                            ? formatCurrency(item[reportItem][reportItemValue].value)\n                            : t('explorer.no_data'),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": \"explorer-table\", canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = withTranslation()(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = withTranslation()(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getComputedReportItemValueType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showAggregateType: false, showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange,\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, perspective, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newPerspective = prevProps.perspective !== perspective;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newPerspective || newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ibmUserAccess, ibmUserAccessFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, t, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */ ||\n            ibmUserAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = t('navigation.explorer');\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupByClicked: this.handleGroupByClick, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        awsProvidersFetchStatus,\n        azureProviders,\n        azureProvidersFetchStatus,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        queryFromRoute,\n        userAccess,\n    });\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"sourceRoot":""}