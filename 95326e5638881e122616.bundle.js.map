{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx","webpack://koku-ui/./src/utils/userAccess.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","PerspectiveBase","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","t","label","getCurrentLabel","currentItem","onItemClicked","handleSelect","setState","handleToggle","isDisabled","dropdownItems","style","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","Perspective","withTranslation","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","costLabel","costValue","marginTop","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupByClicked","providersError","showContent","meta","count","hasCost","total","Title","headingLevel","size","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChart","containerRef","observer","noop","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","units","getUnits","datum","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","sectionWidth","getChart","barWidth","has","y","ChartBar","formatDatumValue","formatDatumOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","max","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","modVal","i","str","substr","maxChars","getTickValue","handleResize","clientWidth","current","container","disable","labelComponent","ChartLegendTooltip","legendData","i18next","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsCloudOptions","infrastructureAzureOptions","infrastructureAzureCloudOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpOptions","ocpOptions","getComputedReportItemType","perspective","result","getDateRange","dateRangeType","endDate","Date","startDate","dateRange","setDate","setMonth","getMonth","end_date","format","start_date","getDateRangeDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","getDate","month","yVal","parseFloat","getChartDatums","computedReportItemType","chartDatums","datums","Map","Array","from","padChartDatums","getChartTitle","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","skeleton","padDate","chartDatum","formatValue","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgQueryString","orgReportPathsType","tagQueryString","resourcePathsType","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getPerspective","currentPerspective","aws","isAwsAvailable","azure","isAzureAvailable","gcp","isGcpAvailable","ibm","isIbmAvailable","ocp","isOcpAvailable","handlePerspectiveClick","onPerspectiveClicked","awsProviders","awsProvidersFetchStatus","userAccess","azureProviders","azureProvidersFetchStatus","gcpProviders","gcpProvidersFetchStatus","ibmProviders","ibmProvidersFetchStatus","ibmUserAccess","ocpProviders","ocpProvidersFetchStatus","noProviders","getResourcePathsType","showOrgs","userAccessQueryString","userAccessError","userAccessFetchStatus","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","mapIdDate","rowItem","get","set","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","showAggregateType","showTimeScope","slice","getPerspectiveDefault","hasAccess","userAccessType","isArray","d","type","access","hasProviders","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"mappings":"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","file":"95326e5638881e122616.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled, t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = withTranslation()(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.azure_details'),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.azure_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('details.tag_names'),\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('details.month_over_month_change'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('cost'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                {\n                    name: t('filter_by.values.subscription_guid'),\n                    key: 'subscription_guid',\n                },\n                { name: t('filter_by.values.service_name'), key: 'service_name' },\n                {\n                    name: t('filter_by.values.resource_location'),\n                    key: 'resource_location',\n                },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = withTranslation()(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.azure_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { formatCurrencyAbbreviation } from 'utils/formatValue';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatDatumValue, formatDatumOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, padding = {\n            bottom: 50,\n            left: 20,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => i18next.t('chart.day_of_month_title', { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues(), fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: 'explorer.date_range.current_month_to_date', value: 'current_month_to_date' },\n    { label: 'explorer.date_range.previous_month_to_date', value: 'previous_month_to_date' },\n    { label: 'explorer.date_range.last_thirty_days', value: 'last_thirty_days' },\n    { label: 'explorer.date_range.last_sixty_days', value: 'last_sixty_days' },\n];\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: 'explorer.perspective.aws', value: 'aws' }];\n// Infrastructure AWS cloud options\nexport const infrastructureAwsCloudOptions = [{ label: 'explorer.perspective.aws_cloud', value: 'aws_cloud' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: 'explorer.perspective.azure', value: 'azure' }];\n// Infrastructure Azure cloud options\nexport const infrastructureAzureCloudOptions = [{ label: 'explorer.perspective.azure_cloud', value: 'azure_cloud' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: 'explorer.perspective.gcp', value: 'gcp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: 'explorer.perspective.ibm', value: 'ibm' }];\n// Infrastructure Ocp options\nexport const infrastructureOcpOptions = [{ label: 'explorer.perspective.ocp_usage', value: 'ocp_usage' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: 'explorer.perspective.ocp_cloud', value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [\n    { label: 'explorer.perspective.ocp', value: 'ocp' },\n    { label: 'explorer.perspective.ocp_supplementary', value: 'ocp_supplementary' },\n];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"supplementary\" /* supplementary */;\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"infrastructure\" /* infrastructure */;\n            break;\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, queryFromRoute, userAccess, }) => {\n    let result = queryFromRoute.perspective;\n    if (!result) {\n        if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n            result = \"ocp\" /* ocp */;\n        }\n        else if (isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus)) {\n            result = \"aws\" /* aws */;\n        }\n        else if (isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus)) {\n            result = \"azure\" /* azure */;\n        }\n        else if (isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus)) {\n            result = \"gcp\" /* gcp */;\n        }\n        else if (isIbmAvailable(userAccess, ibmProviders, ibmProvidersFetchStatus)) {\n            result = \"ibm\" /* ibm */;\n        }\n    }\n    return result;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_cloud\" /* awsCloud */:\n        case \"azure\" /* azure */:\n        case \"azure_cloud\" /* azureCloud */:\n        case \"gcp\" /* gcp */:\n        case \"ibm\" /* ibm */:\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            result = \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            result = \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            result = \"ocp_usage\" /* ocpUsage */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_cloud\" /* awsCloud */:\n            return \"aws_cloud\" /* awsCloud */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_cloud\" /* azureCloud */:\n            return \"azure_cloud\" /* azureCloud */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_supplementary\" /* ocpSupplementary */:\n        case \"ocp_usage\" /* ocpUsage */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { isFloat, isInt } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatValue } from 'utils/formatValue';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { t } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = t('chart.date', { date: getDate(computedItemDate), month: getMonth(computedItemDate) });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return {\n                x: xVal,\n                y: value === null ? null : yVal,\n                date: computedItem.date,\n                key: computedItem.id,\n                name: computedItem.label ? computedItem.label : computedItem.id,\n                units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined,\n            };\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */ } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = 'total';\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getChartTitle = (perspective) => {\n            let result;\n            switch (perspective) {\n                case \"aws\" /* aws */:\n                    result = 'explorer.title.aws';\n                    break;\n                case \"aws_cloud\" /* awsCloud */:\n                    result = 'explorer.title.aws_cloud';\n                    break;\n                case \"azure\" /* azure */:\n                    result = 'explorer.title.azure';\n                    break;\n                case \"azure_cloud\" /* azureCloud */:\n                    result = 'explorer.title.azure_cloud';\n                    break;\n                case \"gcp\" /* gcp */:\n                    result = 'explorer.title.gcp';\n                    break;\n                case \"ibm\" /* ibm */:\n                    result = 'explorer.title.ibm';\n                    break;\n                case \"ocp\" /* ocp */:\n                    result = 'explorer.title.ocp';\n                    break;\n                case \"ocp_cloud\" /* ocpCloud */:\n                    result = 'explorer.title.ocp_cloud';\n                    break;\n                case \"ocp_supplementary\" /* ocpSupplementary */:\n                    result = 'explorer.title.ocp_supplementary';\n                    break;\n                case \"ocp_usage\" /* ocpUsage */:\n                    result = 'explorer.title.ocp_usage';\n                    break;\n                default:\n                    result = undefined;\n                    break;\n            }\n            return result;\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, t } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, t(this.getChartTitle(perspective)))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = withRouter(withTranslation()(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = withTranslation()(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, t, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: t(`filter_by.values.${option.label}`),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Fetch tags with largest date range available\n    const { start_date, end_date } = getLast60DaysDate();\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery({\n        start_date,\n        end_date,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = withRouter(withTranslation()(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getRouteForQuery, getTagReportPathsType, infrastructureAwsCloudOptions, infrastructureAwsOptions, infrastructureAzureCloudOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureIbmOptions, \n// infrastructureOcpCloudOptions, // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\ninfrastructureOcpOptions, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { currentPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (ocp) {\n                options.push(...ocpOptions);\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1483\n                //\n                // options.push(...infrastructureOcpCloudOptions);\n            }\n            if (aws) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (ocp && aws) {\n                options.push(...infrastructureAwsCloudOptions);\n            }\n            if (gcp) {\n                options.push(...infrastructureGcpOptions);\n            }\n            if (ibm) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (azure) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (ocp && azure) {\n                options.push(...infrastructureAzureCloudOptions);\n            }\n            if (ocp) {\n                options.push(...infrastructureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.handlePerspectiveClick = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n            });\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, ibmProvidersFetchStatus, ibmUserAccess, groupBy, gcpProvidersFetchStatus, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupByClicked, perspective, query, t, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        // Fetch tags with largest date range available\n        const { start_date, end_date } = getLast60DaysDate();\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.explorer')),\n                React.createElement(\"div\", { style: styles.perspectiveContainer },\n                    this.getPerspective(noProviders),\n                    React.createElement(\"div\", { style: styles.groupBy },\n                        React.createElement(GroupBy, { endDate: end_date, getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, startDate: start_date, tagReportPathsType: tagReportPathsType }))),\n                React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType }))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = withRouter(withTranslation()(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, t, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg ? t('explorer.org_unit_column_title') : t('details.tag_names'),\n                    },\n                ]\n                : [\n                    {\n                        cellTransforms: [nowrap],\n                        orderBy: groupById === 'account' && perspective === \"aws\" /* aws */ ? 'account_alias' : groupById,\n                        title: t('details.resource_names', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                ];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push({\n                    cellTransforms: [nowrap],\n                    orderBy: undefined,\n                    title: t('explorer.daily_column_title', { date, month }),\n                    transforms: undefined,\n                });\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n            }\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[computedReportItemType] && item[computedReportItemType].total\n                            ? formatCurrency(item[computedReportItemType].total.value)\n                            : t('explorer.no_data'),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('details.empty_state'))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": \"explorer-table\", canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = withTranslation()(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = withTranslation()(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showAggregateType: false, showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange,\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ibmUserAccess, ibmUserAccessFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, t, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */ ||\n            ibmUserAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = t('navigation.explorer');\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupByClicked: this.handleGroupByClick, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        awsProvidersFetchStatus,\n        azureProviders,\n        azureProvidersFetchStatus,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        queryFromRoute,\n        userAccess,\n    });\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || { [getGroupByDefault(perspective)]: '*' } || baseQuery.group_by,\n        order_by: queryFromRoute.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"sourceRoot":""}