{"version":3,"sources":["webpack:///./src/pages/providersModal/index.ts","webpack:///./src/testIds.ts","webpack:///./src/components/randomId/randomId.tsx","webpack:///./src/components/formGroup/formGroup.styles.ts","webpack:///./src/components/formGroup/formGroup.tsx","webpack:///./src/pages/providersModal/attributeField.tsx","webpack:///./src/pages/providersModal/providersModal.styles.ts","webpack:///./src/pages/providersModal/providersModal.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_providersModal__WEBPACK_IMPORTED_MODULE_1__","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","empty_state_add_btn","name_input","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","currentId","randomId_RandomId","react_default","a","Component","[object Object]","super","arguments","this","props","prefix","children","defaultProps","styles","StyleSheet","create","formGroup","marginBottom","esm","value","label","display","fontWeight","paddingBottom","FormGroup","createElement","className","htmlFor","cloneElement","Children","only","attributeField","TextInput","assign","aria-label","testProps","autoFocus","Boolean","isValid","error","onChange","placeholder","docs","modal","width","validator","name","t","RegExp","test","bucket","resourceName","length","indexOf","clusterID","react_redux_es","common","state","isProviderModalOpen","ui","selectIsProvidersModalOpen","selectAddProviderError","fetchStatus","selectAddProviderFetchStatus","addProvider","clearProviderFailure","closeProvidersModal","es","defaultState","type","handleAddProvider","authentication","provider_resource_name","billing_source","handleCancel","handleChange","validatorFnc","attribute","setState","handleSelect","attributes","prevProps","emptyField","some","attr","trim","invalidField","find","errorMsg","response","data","errors","errorObj","detail","Modal","isLarge","isOpen","onClose","title","actions","Button","key","onClick","variant","secondary","isDisabled","primary","Alert","danger","href","target","FormSelect","onBlur","helpers","onFocus","FormSelectOption","map"],"mappings":"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","file":"07c74c256d2563b4587d.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport ProvidersModal from './providersModal';\nexport default hot(module)(ProvidersModal);\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import React from 'react';\nlet currentId = 0;\nclass RandomId extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.id = `${this.props.prefix}${currentId++}`;\n    }\n    render() {\n        return this.props.children({ id: this.id });\n    }\n}\nRandomId.defaultProps = {\n    prefix: 'random-id-',\n};\nexport { RandomId };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontWeight_normal, global_gutter, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    formGroup: {\n        marginBottom: global_gutter.value,\n    },\n    label: {\n        display: 'block',\n        fontWeight: global_FontWeight_normal.value,\n        paddingBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { RandomId } from '../randomId';\nimport { styles } from './formGroup.styles';\nexport const FormGroup = ({ label, children }) => (React.createElement(RandomId, { prefix: label }, ({ id }) => (React.createElement(\"div\", { className: css(styles.formGroup) },\n    React.createElement(\"label\", { className: css(styles.label), htmlFor: id }, label),\n    React.createElement(\"div\", null, React.cloneElement(React.Children.only(children), { id }))))));\n","import { TextInput } from '@patternfly/react-core';\nimport { FormGroup } from 'components/formGroup';\nimport React from 'react';\nconst AttributeField = props => (React.createElement(FormGroup, { label: props.label },\n    React.createElement(TextInput, Object.assign({ \"aria-label\": `input-${props.label}` }, props.testProps, { autoFocus: Boolean(props.autoFocus), isValid: !Boolean(props.error), onChange: props.onChange, placeholder: props.placeholder, value: props.value }))));\nexport default AttributeField;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    alert: {\n        marginBottom: global_spacer_md.value,\n    },\n    docs: {\n        marginBottom: global_spacer_md.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        width: '700px',\n    },\n});\n","import { Alert, AlertVariant, Button, ButtonVariant, FormSelect, FormSelectOption, Modal, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { FormGroup } from 'components/formGroup';\nimport { noop } from 'patternfly-react';\nimport React from 'react';\nimport { translate, } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersActions, providersSelectors } from 'store/providers';\nimport { uiActions, uiSelectors } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport AttributeField from './attributeField';\nimport { styles } from './providersModal.styles';\nconst validator = {\n    name: (value, t) => !new RegExp('^.?').test(value) ? t('providers.name_error') : null,\n    bucket: (value, t) => !new RegExp('^[a-zA-Z0-9.\\\\-_]{0,255}$').test(value)\n        ? t('providers.bucket_error')\n        : null,\n    resourceName: (value, t) => {\n        let isValid;\n        if (value.length >= 'arn:aws:'.length) {\n            isValid = value.indexOf('arn:aws:');\n        }\n        else {\n            isValid = 'arn:aws:'.indexOf(value);\n        }\n        return isValid !== 0 ? t('providers.resource_name_error') : null;\n    },\n    clusterID: (value, t) => !new RegExp('^.?').test(value) ? t('providers.name_error') : null,\n};\nexport class ProvidersModal extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            name: {\n                id: 'name',\n                label: 'providers.name_label',\n                placeholder: 'HCCM',\n                testProps: getTestProps(testIds.providers.name_input),\n                value: '',\n                error: null,\n                autoFocus: true,\n            },\n            bucket: {\n                id: 'bucket',\n                label: 'providers.bucket_label',\n                placeholder: 'cost-usage-bucket',\n                testProps: getTestProps(testIds.providers.bucket_input),\n                value: '',\n                error: null,\n            },\n            resourceName: {\n                id: 'resourceName',\n                label: 'providers.resource_name_label',\n                testProps: getTestProps(testIds.providers.resource_name_input),\n                placeholder: 'arn:aws:iam::589173575009:role/CostManagement',\n                value: '',\n                error: null,\n            },\n            clusterID: {\n                id: 'clusterID',\n                label: 'providers.cluster_id_label',\n                testProps: getTestProps(testIds.providers.cluster_id_input),\n                placeholder: 'OCP-CostManagement',\n                value: '',\n                error: null,\n            },\n            type: 'AWS',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleAddProvider = () => {\n            switch (this.state.type) {\n                case 'AWS':\n                    return this.props.addProvider({\n                        name: this.state.name.value,\n                        type: this.state.type,\n                        authentication: {\n                            provider_resource_name: this.state.resourceName.value,\n                        },\n                        billing_source: {\n                            bucket: this.state.bucket.value,\n                        },\n                    });\n                case 'OCP':\n                    return this.props.addProvider({\n                        name: this.state.name.value,\n                        type: this.state.type,\n                        authentication: {\n                            provider_resource_name: this.state.clusterID.value,\n                        },\n                    });\n            }\n        };\n        this.handleCancel = () => {\n            this.props.closeProvidersModal();\n        };\n        this.handleChange = (validatorFnc, attribute) => (value) => {\n            const { t } = this.props;\n            this.setState(() => (Object.assign({}, this.state, { [attribute.id]: Object.assign({}, attribute, { value, error: validatorFnc(value, t) }) })));\n            this.props.clearProviderFailure(); // Clear previous errors when user edits input field\n        };\n        this.handleSelect = value => {\n            this.setState(Object.assign({}, this.defaultState, { type: value }));\n            this.props.clearProviderFailure(); // Clear previous errors when user edits input field\n        };\n        this.attributes = () => {\n            switch (this.state.type) {\n                case 'AWS':\n                    return [this.state.name, this.state.bucket, this.state.resourceName];\n                case 'OCP':\n                    return [this.state.name, this.state.clusterID];\n                default:\n                    return [];\n            }\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { isProviderModalOpen } = this.props;\n        if (isProviderModalOpen && !prevProps.isProviderModalOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n    }\n    render() {\n        const { t, error } = this.props;\n        const emptyField = this.attributes().some(attr => attr.value.trim().length === 0);\n        const invalidField = this.attributes().find(attr => attr.error !== null);\n        let errorMsg = t('providers.default_error');\n        if (error &&\n            error.response &&\n            error.response.data &&\n            error.response.data.errors) {\n            if (error.response.data.errors.length === 1) {\n                const errorObj = error.response.data.errors[0];\n                if (errorObj.detail) {\n                    errorMsg = errorObj.detail;\n                }\n            }\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isProviderModalOpen, onClose: this.handleCancel, title: t('providers.add_source'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.cancel_btn), { key: \"cancel\", onClick: this.handleCancel, variant: ButtonVariant.secondary }), t('providers.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.submit_btn), { key: \"confirm\", isDisabled: emptyField ||\n                        Boolean(invalidField) ||\n                        this.props.fetchStatus === 1 /* inProgress */, onClick: this.handleAddProvider, variant: ButtonVariant.primary }), t('providers.confirm')),\n            ] },\n            Boolean(error || invalidField) && (React.createElement(\"div\", { className: css(styles.alert) },\n                React.createElement(Alert, Object.assign({}, getTestProps(testIds.login.alert), { variant: AlertVariant.danger, title: (invalidField && invalidField.error) || errorMsg })))),\n            React.createElement(\"p\", { className: css(styles.docs) },\n                \"View the\",\n                ' ',\n                React.createElement(\"a\", { href: \"https://koku.readthedocs.io/en/latest/providers.html#adding-an-aws-account\", target: \"_blank\" }, \"Koku documentation\"),\n                ' ',\n                \"and learn how to configure your AWS account to allow Koku access.\"),\n            React.createElement(FormGroup, { label: t('providers.type_label') },\n                React.createElement(FormSelect, { value: this.state.type, \"aria-label\": \"provider type selector\", onBlur: noop, onFocus: noop, onChange: this.handleSelect },\n                    React.createElement(FormSelectOption, { label: \"AWS\", value: \"AWS\" }),\n                    React.createElement(FormSelectOption, { label: \"OCP\", value: \"OCP\" }))),\n            this.attributes().map(attr => (React.createElement(AttributeField, { key: `attribute-field-${attr.id}`, value: attr.value, label: t(attr.label), testProps: attr.testProps, placeholder: attr.placeholder, error: attr.error, onChange: this.handleChange(validator[attr.id], attr) })))));\n    }\n}\nexport default connect(createMapStateToProps(state => ({\n    isProviderModalOpen: uiSelectors.selectIsProvidersModalOpen(state),\n    error: providersSelectors.selectAddProviderError(state),\n    fetchStatus: providersSelectors.selectAddProviderFetchStatus(state),\n})), {\n    addProvider: providersActions.addProvider,\n    clearProviderFailure: providersActions.clearProviderFailure,\n    closeProvidersModal: uiActions.closeProvidersModal,\n})(translate()(ProvidersModal));\n"],"sourceRoot":""}