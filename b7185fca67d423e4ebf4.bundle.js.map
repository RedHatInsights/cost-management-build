{"version":3,"file":"b7185fca67d423e4ebf4.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/accountSettings/accountSettings.tsx","webpack://koku-ui/./src/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/api/queries/overviewQuery.ts","webpack://koku-ui/./src/pages/views/overview/index.ts","webpack://koku-ui/./src/pages/views/overview/overviewWrapper.tsx","webpack://koku-ui/./src/utils/format.ts","webpack://koku-ui/./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { accountSettingsActions, accountSettingsSelectors } from 'store/accountSettings';\nimport { createMapStateToProps } from 'store/common';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nclass AccountSettingsBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.updateAccountSettings = () => {\n            const { accountSettingsFetchStatus, fetchAccountSettings } = this.props;\n            if (accountSettingsFetchStatus !== 1 /* inProgress */) {\n                fetchAccountSettings();\n            }\n        };\n    }\n    componentDidMount() {\n        this.updateAccountSettings();\n    }\n    componentDidUpdate(prevProps) {\n        const { accountSettings } = this.props;\n        if (prevProps.accountSettings !== accountSettings) {\n            const costType = accountSettings ? accountSettings.data.cost_type : \"unblended_cost\" /* unblended */;\n            const currency = accountSettings ? accountSettings.data.currency : 'USD';\n            // Force update to render children\n            this.setState({\n                costType,\n                currency,\n            });\n        }\n    }\n    render() {\n        const { accountSettingsFetchStatus, children } = this.props;\n        return accountSettingsFetchStatus === 2 /* complete */ ? children : null;\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const accountSettings = accountSettingsSelectors.selectAccountSettings(state);\n    const accountSettingsError = accountSettingsSelectors.selectAccountSettingsError(state);\n    const accountSettingsFetchStatus = accountSettingsSelectors.selectAccountSettingsFetchStatus(state);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        accountSettings,\n        accountSettingsError,\n        accountSettingsFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchAccountSettings: accountSettingsActions.fetchAccountSettings,\n};\nconst CostTypeConnect = connect(mapStateToProps, mapDispatchToProps)(AccountSettingsBase);\nconst AccountSettings = injectIntl(CostTypeConnect);\nexport { AccountSettings };\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n// defaultIntl required for testing\nconst LoadingStateBase = ({ intl = defaultIntl }) => {\n    const title = intl.formatMessage(messages.LoadingStateTitle);\n    const subTitle = intl.formatMessage(messages.LoadingStateDesc);\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = injectIntl(LoadingStateBase);\nexport { LoadingState };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ costType, DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType }))))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, Object.assign({ widgetId: widgetId }, (costType && { costType })))));\n    }))));\nexport { DashboardBase };\n","import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            currentItem: this.props.options ? this.props.options.find(option => option.default).value : undefined,\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelect = () => {\n            const { isDisabled } = this.props;\n            const { currentItem, isSelectOpen } = this.state;\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((option) => option.value === currentItem);\n            return (React.createElement(Select, { id: \"comparisonSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(option => (React.createElement(SelectOption, { key: option.value, value: option })))));\n        };\n        this.getSelectOptions = () => {\n            const { options } = this.props;\n            const selectOptions = [];\n            options.map(option => {\n                selectOptions.push({\n                    toString: () => option.label,\n                    value: option.value,\n                });\n            });\n            return selectOptions;\n        };\n        this.handleSelect = (event, selection) => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(selection.value);\n            }\n            this.setState({\n                currentItem: selection.value,\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        return this.getSelect();\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    comparisonContainer: {\n        display: 'flex',\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */, default: true },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparisonContainer },\n                    React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison())),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === \"usage\" /* usage */) {\n                return intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.CurrencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const { costType, fetchReports, fetchForecasts, trend, widgetId } = this.props;\n        if (prevProps.costType !== costType) {\n            fetchReports(widgetId);\n            if (trend.computedForecastItem !== undefined) {\n                fetchForecasts(widgetId);\n            }\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* gcpProjects */:\n            return 'gcp_project';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"gcp_projects\" /* gcpProjects */:\n            return 'gcp_project';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/overviewQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { Currency } from 'components/currency';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { CostType } from 'pages/views/components/costType';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'pages/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'pages/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'pages/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport { filterProviders, hasCloudCurrentMonthData, hasCloudData, hasCloudPreviousMonthData, hasCloudProvider, hasCurrentMonthData, hasPreviousMonthData, } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { getCostType } from 'utils/localStorage';\nimport { hasAwsAccess, hasAzureAccess, hasGcpAccess, hasIbmAccess, isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable, } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n//\n// const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === \"aws\" /* aws */) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, { onSelect: this.handleCostTypeSelected })));\n            }\n            return null;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            const hasOcpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = hasOcp && !(hasAws || hasAzure || hasGcp || hasIbm || hasOcpCloud);\n            const showInfrastructureOnly = !hasOcp && (hasAws || hasAzure || hasGcp || hasIbm || hasOcpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            const { perspective } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"aws\" /* aws */:\n                case \"aws_ocp\" /* awsOcp */:\n                case \"azure\" /* azure */:\n                case \"azure_ocp\" /* azureOcp */:\n                case \"gcp\" /* gcp */:\n                case \"gcp_ocp\" /* gcpOcp */:\n                case \"ibm\" /* ibm */:\n                case \"ocp_cloud\" /* ocpCloud */:\n                    return perspective;\n            }\n            if (this.isOcpCloudAvailable()) {\n                return \"ocp_cloud\" /* ocpCloud */;\n            }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, perspective, userAccess } = this.props;\n            // Upon page refresh, perspective param takes precedence\n            switch (perspective) {\n                case \"ocp\" /* ocp */:\n                    return perspective;\n            }\n            if (isOcpAvailable(userAccess, ocpProviders)) {\n                return \"ocp\" /* ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const hasAws = this.isAwsAvailable();\n            const hasAzure = this.isAzureAvailable();\n            const hasGcp = this.isGcpAvailable();\n            const hasIbm = this.isIbmAvailable();\n            const hasOcp = this.isOcpAvailable();\n            // Note: No need to test OCP on cloud here, since that requires at least one provider\n            if (!(hasAws || hasAzure || hasGcp || hasIbm || hasOcp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (this.isOcpCloudAvailable()) {\n                    options.push(...infrastructureOcpCloudOptions);\n                }\n                if (hasAws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (this.isAwsCloudAvailable()) {\n                    options.push(...infrastructureAwsOcpOptions);\n                }\n                if (hasGcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n                //\n                // if (this.isGcpCloudAvailable()) {\n                //   options.push(...infrastructureGcpOcpOptions);\n                // }\n                if (hasIbm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                if (hasAzure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (this.isAzureCloudAvailable()) {\n                    options.push(...infrastructureAzureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.getRouteForQuery = (query) => {\n            const { history } = this.props;\n            return `${history.location.pathname}?${getQueryRoute(query)}`;\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, costType, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCloudData(awsProviders, ocpProviders) ||\n                        hasCloudData(azureProviders, ocpProviders) ||\n                        hasCloudData(gcpProviders, ocpProviders) ||\n                        hasCloudData(ibmProviders, ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, { costType: costType }) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return intl.formatMessage(messages.Infrastructure);\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return intl.formatMessage(messages.OpenShift);\n            }\n        };\n        this.handleCostTypeSelected = (value) => {\n            const { history, query } = this.props;\n            // Needed to force tab items to update\n            this.setState({ costType: value }, () => {\n                // Need param to restore cost type upon page refresh\n                const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { cost_type: value });\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const { history, query } = this.props;\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })), () => {\n                const newQuery = Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { perspective: value }), (value === \"aws\" /* aws */ && { cost_type: getCostType() }));\n                history.replace(this.getRouteForQuery(newQuery));\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { history, query } = this.props;\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                }, () => {\n                    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { tabKey: tabIndex });\n                    history.replace(this.getRouteForQuery(newQuery));\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders);\n        };\n        this.isAwsCloudAvailable = () => {\n            const { awsProviders, ocpProviders, userAccess } = this.props;\n            return hasAwsAccess(userAccess) && hasCloudProvider(awsProviders, ocpProviders);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders);\n        };\n        this.isAzureCloudAvailable = () => {\n            const { azureProviders, ocpProviders, userAccess } = this.props;\n            return hasAzureAccess(userAccess) && hasCloudProvider(azureProviders, ocpProviders);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders);\n        };\n        this.isGcpCloudAvailable = () => {\n            const { gcpProviders, ocpProviders, userAccess } = this.props;\n            return hasGcpAccess(userAccess) && hasCloudProvider(gcpProviders, ocpProviders);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, userAccess } = this.props;\n            return isIbmAvailable(userAccess, ibmProviders);\n        };\n        this.isIbmCloudAvailable = () => {\n            const { ibmProviders, ocpProviders, userAccess } = this.props;\n            return hasIbmAccess(userAccess) && hasCloudProvider(ibmProviders, ocpProviders);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders);\n        };\n        this.isOcpCloudAvailable = () => {\n            const hasAwsCloud = this.isAwsCloudAvailable();\n            const hasAzureCloud = this.isAzureCloudAvailable();\n            const hasGcpCloud = this.isGcpCloudAvailable();\n            const hasIbmCloud = this.isIbmCloudAvailable();\n            return hasAwsCloud || hasAzureCloud || hasGcpCloud || hasIbmCloud;\n        };\n    }\n    componentDidMount() {\n        const { resetState, tabKey } = this.props;\n        resetState(); // Clear cached API responses\n        this.setState({\n            activeTabKey: tabKey,\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { providers, tabKey, userAccess } = this.props;\n        // Note: User access and providers are fetched via the Permissions and InactiveSources components used by all routes\n        if (prevProps.userAccess !== userAccess || prevProps.providers !== providers) {\n            this.setState({\n                activeTabKey: tabKey,\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { providersFetchStatus, intl, userAccessFetchStatus } = this.props;\n        // Note: No need to test OCP on cloud here, since that requires at least one provider\n        const noAwsProviders = !this.isAwsAvailable() && providersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && providersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && providersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && providersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const isLoading = providersFetchStatus === 1 /* inProgress */ || userAccessFetchStatus === 1 /* inProgress */;\n        const availableTabs = this.getAvailableTabs();\n        const title = intl.formatMessage(messages.OverviewTitle);\n        if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.OverviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.GCP)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.GCPDesc)),\n                                    isBetaFeature() && (React.createElement(React.Fragment, null,\n                                        React.createElement(\"br\", null),\n                                        React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.IBM)),\n                                        React.createElement(\"p\", null, intl.formatMessage(messages.IBMDesc)))),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.AWS)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AWSDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.Azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AzureDesc))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    isBetaFeature() && React.createElement(Currency, null)),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const perspective = queryFromRoute.perspective;\n    const tabKey = queryFromRoute.tabKey && !Number.isNaN(queryFromRoute.tabKey) ? Number(queryFromRoute.tabKey) : 0;\n    const query = Object.assign(Object.assign(Object.assign({}, (perspective && { perspective })), { tabKey }), (perspective === \"aws\" /* aws */ && { cost_type: queryFromRoute.cost_type }));\n    const queryString = getQuery(query);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* all */, providersQueryString);\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        awsProviders: filterProviders(providers, \"aws\" /* aws */),\n        azureProviders: filterProviders(providers, \"azure\" /* azure */),\n        gcpProviders: filterProviders(providers, \"gcp\" /* gcp */),\n        ibmProviders: filterProviders(providers, \"ibm\" /* ibm */),\n        ocpProviders: filterProviders(providers, \"ocp\" /* ocp */),\n        providers,\n        providersError,\n        providersFetchStatus,\n        perspective,\n        query,\n        queryString,\n        tabKey,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    resetState: uiActions.resetState,\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import OverviewWrapper from './overviewWrapper';\nexport default OverviewWrapper;\n","import { AccountSettings } from 'components/accountSettings';\nimport React from 'react';\nimport Overview from './overview';\nconst OverviewWrapper = props => {\n    return (React.createElement(AccountSettings, null,\n        React.createElement(Overview, Object.assign({}, props))));\n};\nexport default OverviewWrapper;\n","import { getLocale, intl } from 'components/i18n';\nimport messages from 'locales/messages';\n// Returns the number of decimals for given string\nexport const countDecimals = (value, useLocale = true) => {\n    const decimalSeparator = useLocale ? Number('1.1').toLocaleString(getLocale(), {}).substring(1, 2) : '.';\n    const decimals = value.split(decimalSeparator);\n    return decimals[1] ? decimals[1].length : 0;\n};\n// Currencies are formatted differently, depending on the locale you're using. For example, the dollar\n// sign may appear on the left or the right of the currency symbol for French Vs German.\n//\n// Using the ISO currency code AUD, $12.34 USD is formatted per the locales below.\n// See ICU currencies https://www.localeplanet.com/icu/currency.html\n//\n// en: A$12.34\n// fr: 12,34 $AU\n// de: 12,34 AU$\n//\n// Note: Some currencies do not have decimals, such as JPY, and some have 3 decimals such as IQD.\n// See https://docs.adyen.com/development-resources/currency-codes\nexport const formatCurrency = (value, units, options = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Don't specify default fraction digits here, rely on react-intl instead\n    return intl.formatNumber(fValue, Object.assign({ style: 'currency', currency: units ? units.toUpperCase() : 'USD' }, options));\n};\nexport const formatCurrencyAbbreviation = (value, units = 'USD') => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Derived from https://stackoverflow.com/questions/37799955/how-can-i-format-big-numbers-with-tolocalestring\n    const abbreviationFormats = [\n        { val: 1e15, symbol: 'quadrillion' },\n        { val: 1e12, symbol: 'trillion' },\n        { val: 1e9, symbol: 'billion' },\n        { val: 1e6, symbol: 'million' },\n        { val: 1e3, symbol: 'thousand' },\n    ];\n    // Find the proper format to use\n    let format;\n    if (abbreviationFormats != null) {\n        format = abbreviationFormats.find(f => fValue >= f.val);\n    }\n    // Apply format and insert symbol next to the numeric portion of the formatted string\n    if (format != null) {\n        const { val, symbol } = format;\n        return intl.formatMessage(messages.CurrencyAbbreviations, {\n            symbol,\n            value: formatCurrency(fValue / val, units, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0,\n            }),\n        });\n    }\n    // If no format was found, format value without abbreviation\n    return formatCurrency(value, units, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n    });\n};\n// Formats cost model rates with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatCurrencyRate = (value, units, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return formatCurrency(value, units, options);\n};\n// Formats cost model rates with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatCurrencyRateRaw = (value, units, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return formatCurrencyRaw(value, units, options);\n};\n// Formats without currency symbol\nexport const formatCurrencyRaw = (value, units, options = {}) => {\n    return formatCurrency(value, units, Object.assign({ currencyDisplay: 'code' }, options))\n        .toString()\n        .replace(units, '')\n        .trim();\n};\n// Returns formatted units or currency with given currency-code\nexport const formatUnits = (value, units, options) => {\n    const lookup = unitsLookupKey(units);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'core_hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, options);\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'tag_mo':\n        case 'vm_hours':\n            return formatUsageGb(fValue, options);\n    }\n    return unknownTypeFormatter(fValue, options);\n};\nexport const formatPercentage = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Formats cost model markup with 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatPercentageMarkup = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageGb = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageHrs = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Returns true if given percentage or currency format is valid for current locale\nexport const isCurrencyFormatValid = (value) => {\n    const decimalSeparator = intl.formatNumber(1.1).toString().replace(/1/g, '');\n    // ^[0-9] The number must start with 0-9\n    // \\d* The number can then have any number of any digits\n    // (...)$ look at the next group from the end (...)$\n    // (...)*(...)? Look for groups optionally. The first is for the comma, the second is for the decimal.\n    // (,\\d{3}){1} Look for one occurrence of a comma followed by exactly three digits\n    // \\.\\d Look for a decimal followed by any number of any digits\n    //\n    // See https://stackoverflow.com/questions/2227370/currency-validation\n    const regex = decimalSeparator === '.' ? /^-?[0-9]\\d*(((,\\d{3}){1})*(\\.\\d*)?)$/ : /^-?[0-9]\\d*(((\\.\\d{3}){1})*(,\\d*)?)$/;\n    return regex.test(value);\n};\n// Returns true if given percentage is valid for current locale\nexport const isPercentageFormatValid = (value) => {\n    return isCurrencyFormatValid(value);\n};\n// Some locales have a comma decimal separator (e.g., \"1.234,56\" in German is \"1,234.56\" in USD).\n// This function normalizes a given currency or percentage for APIs.\nexport const unFormat = (value) => {\n    if (!value) {\n        return value;\n    }\n    const groupSeparator = intl.formatNumber(1111).toString().replace(/1/g, '');\n    const decimalSeparator = intl.formatNumber(1.1).toString().replace(/1/g, '');\n    let rawValue = value.toString().replace(groupSeparator === ',' ? /,/g : /\\./g, '');\n    rawValue = rawValue.replace(decimalSeparator === '.' ? /\\./g : /,/g, '.');\n    return Number.isNaN(rawValue) ? '0' : rawValue;\n};\nconst unknownTypeFormatter = (value, options) => {\n    return value.toLocaleString(getLocale(), options);\n};\n// Returns i18n key for given units\nexport const unitsLookupKey = (units) => {\n    const lookup = units ? units.replace(/[- ]/g, '_').toLowerCase() : '';\n    switch (lookup) {\n        case 'core_hours':\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'hour':\n        case 'hrs':\n        case 'tag_mo':\n        case 'vm_hours':\n            return lookup;\n        default:\n            return undefined;\n    }\n};\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","AccountSettingsBase","constructor","super","arguments","this","defaultState","state","Object","assign","updateAccountSettings","accountSettingsFetchStatus","fetchAccountSettings","props","componentDidMount","componentDidUpdate","prevProps","accountSettings","costType","data","cost_type","currency","setState","render","children","mapStateToProps","accountSettingsError","userAccessQueryString","userAccess","userAccessError","userAccessFetchStatus","mapDispatchToProps","CostTypeConnect","connect","AccountSettings","injectIntl","LoadingState","intl","title","formatMessage","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","isSelectOpen","getSelectOptions","options","selections","map","option","push","toString","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","SelectVariant","SelectOption","key","event","onSelected","messages","Perspective","DashboardBase","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","default","undefined","onItemClicked","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","comparisonContainer","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatOptions","formatter","format","previousInfrastructureCostData","showForecast","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","item","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","fetchForecasts","fetchReports","widget","awsDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","AwsDashboardWidget","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","alignSelf","flexGrow","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","ocpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpCloudOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","handleCostTypeSelected","hasAws","hasAzure","hasGcp","hasIbm","hasOcp","hasOcpCloud","getDefaultInfrastructurePerspective","perspective","getDefaultOcpPerspective","ocpProviders","getPerspective","isAwsCloudAvailable","isAzureCloudAvailable","handlePerspectiveSelected","getRouteForQuery","history","location","pathname","getQueryRoute","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","newQuery","JSON","parse","replace","tabKey","isGcpCloudAvailable","isIbmCloudAvailable","hasAwsCloud","hasAzureCloud","hasGcpCloud","hasIbmCloud","resetState","providers","providersFetchStatus","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","isLoading","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","queryFromRoute","parseQuery","search","Number","isNaN","queryString","getQuery","providersQueryString","providersError","ui","countDecimals","useLocale","decimalSeparator","toLocaleString","substring","decimals","split","formatCurrency","fValue","toUpperCase","formatCurrencyAbbreviation","abbreviationFormats","symbol","f","minimumFractionDigits","maximumFractionDigits","formatCurrencyRate","formatCurrencyRateRaw","formatCurrencyRaw","currencyDisplay","trim","formatUnits","unitsLookupKey","formatUsageHrs","formatUsageGb","unknownTypeFormatter","formatPercentage","formatPercentageMarkup","isCurrencyFormatValid","test","isPercentageFormatValid","unFormat","groupSeparator","rawValue","lookup","toLowerCase","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","hasIbmAccess","hasOcpAccess"],"sourceRoot":""}