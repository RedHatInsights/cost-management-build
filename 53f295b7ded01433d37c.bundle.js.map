{"version":3,"sources":["webpack:///./src/pages/ocpDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartLabelTooltip/chartLabelTooltip.tsx","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/utils/equal.ts","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/charts/costChart/costChart.styles.ts","webpack:///./src/components/charts/costChart/costChart.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.styles.ts","webpack:///./src/pages/ocpDetails/groupBy.tsx","webpack:///./src/pages/ocpDetails/detailsHeader.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsTagView.tsx","webpack:///./src/pages/ocpDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpDetails/exportModal.styles.ts","webpack:///./src/pages/ocpDetails/exportModal.tsx","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.styles.ts","webpack:///./src/components/charts/historicalCostChart/historicalCostChart.tsx","webpack:///./src/pages/ocpDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpDetails/historicalChart.tsx","webpack:///./src/pages/ocpDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpDetails/historicalModal.tsx","webpack:///./src/pages/ocpDetails/noRatesState.styles.ts","webpack:///./src/pages/ocpDetails/noRatesState.tsx","webpack:///./src/pages/ocpDetails/priceListTable.tsx","webpack:///./src/pages/ocpDetails/priceListModal.tsx","webpack:///./src/pages/ocpDetails/detailsActions.tsx","webpack:///./src/pages/ocpDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpDetails/detailsChart.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpDetails/detailsTag.tsx","webpack:///./src/pages/ocpDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpDetails/detailsWidget.tsx","webpack:///./src/pages/ocpDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpDetails/detailsTable.tsx","webpack:///./src/pages/ocpDetails/detailsToolbar.styles.ts","webpack:///./src/pages/ocpDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpDetails/ocpDetails.styles.ts","webpack:///./src/pages/ocpDetails/ocpDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getDateRangeString","i18next__WEBPACK_IMPORTED_MODULE_5__","t","count","endDate","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getMonthRangeString","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","getTooltipLabel","formatOptions","toString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","__rest","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","ChartLabelTooltip","_a","content","props","react_default","createElement","Tooltip","enableFlip","ChartLabel","assign","LAYOUT_PROPS","padding","theme_koku","area","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","className","minus_icon","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","isEqual","obj1","obj2","JSON","stringify","split","join","chartStyles","currentRequestData","fill","stroke","strokeDasharray","currentUsageData","itemsPerRow","labels","fontFamily","esm","minWidth","previousRequestData","previousUsageData","currentColorScale","previousColorScale","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","usageChart_UsageChart","containerRef","createRef","width","initDatum","legendData","legendColorScale","chartUtils","push","symbol","setState","chartDatum","charts","show","colorScale","gutter","onClick","handleLegendClick","newDatum","index","handleResize","current","clientWidth","getChart","ChartArea","interpolation","getLegend","legendItemsPerRow","title","eventHandlers","target","mutation","ChartLegend","events","labelComponent","chartLabelTooltip","getLegendTooltip","responsive","formatDatumValue","formatDatumOptions","childName","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","maxValue","Math","ceil","currentRequestDate","get_date_default","currentUsageDate","previousRequestDate","previousUsageDate","result","trim","containerHeight","ChartVoronoiContainer","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","legendVisible","isLegendVisible","ref","Chart","containerComponent","legendComponent","undefined","legendPosition","theme","chartTheme","Boolean","ChartAxis","tickValues","dependentAxis","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpReportSummary","children","detailsLink","subTitle","subTitleTooltip","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpReportSummaryAlt_styles_styles","flexGrow","minHeight","marginRight","tops","OcpReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","paddingBottom","lineHeight","valueContainer","wordWrap","OcpReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","getCostLayout","ocpReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpReportSummaryItem","ocpReportSummaryItems_styles_styles","skeleton","OcpReportSummaryItems","nextProps","otherIndex","findIndex","includes","slice","getItems","currentCostData","currentInfrastructureCostData","previousCostData","previousInfrastructureCostData","costChart_styles_styles","costChart_CostChart","dist_es","maxCurrentInfrastructure","maxPreviousInfrastructure","currentInfrastructureDate","previousInfrastructureDate","ocpReportSummaryTrend_styles_styles","OcpReportSummaryTrend","OcpReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","marginLeft","historicalUsageChart_HistoricalUsageChart","previous","previousLegendData","currentLegendData","maxCurrentLimit","maxPreviousLimit","xAxisLabel","yAxisLabel","costValue","costLabelUnit","costLabelDate","header","backgroundColor","info","verticalAlign","infoIcon","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","tagKey","queryString","ocpQuery","filter","resolution","time_scope_units","time_scope_value","key_only","ocpReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","defaultState","isGroupByOpen","handleGroupByClick","onItemClicked","currentItem","getDropDownItems","option","DropdownItem","component","getDropDownTags","Set","val","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","keys","handleGroupBySelect","event","handleGroupByToggle","bind","dropdownItems","Dropdown","onSelect","toggle","DropdownToggle","onToggle","isOpen","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","onGroupByClicked","showContent","sizes","Popover","aria-label","bodyContent","info_circle_icon","date","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","tag","DetailsTagModal","handleClose","onClose","Modal","isLarge","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","query","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","ocpReportSummary","_item","DetailsWidgetModal","parentGroupBy","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","Button","variant","secondary","isDisabled","primary","Form","FormGroup","fieldId","Radio","isValid","checked","onChange","groupItem","historicalCostChart_styles_styles","historicalCostChart_HistoricalCostChart","historicalChart_styles_chartStyles","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpReportsActions","HistoricalChart","getSkeleton","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpDashboard","selectCurrentWidgets","HistoricalModal","noRatesState_styles_styles","NoRatesState","money_check_alt_icon","metric","priceListTable","rates","notAvailableText","Table","cells","rows","range_unit","value_unit","range_value","period","Header","Body","priceListModal","priceListProvider","find","providerUuid","uuid","priceList","store_priceList","ratesPerProvider","priceListError","priceListStatus","fetch","fetchPriceList","errorState","priceListRates","close","renderContent","detailsActions_tagKey","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isPriceListModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getPriceListModal","handlePriceListModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handlePriceListModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","position","detailsTable_styles_styles","emptyState","paddingTop","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","trunc","limitUnits","requestUnits","cpuDatum","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","left","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","paddingRight","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","summary","viewAllContainer","detailsWidget_reportType","detailsWidget_mapStateToProps","detailsWidget_mapDispatchToProps","DetailsWidget","isDetailsChartModalOpen","currentTab","getSummary","getViewAll","handleDetailsChartModalOpen","button","handleDetailsChartModalClose","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getDerivedCost","getTotalCost","getActions","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","substring","abs","percentage","iconOverride","getSortBy","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","detailsToolbar_styles_styles","paginationContainer","toolbarContainer","paddingLeft","detailsToolbar_tagKey","DetailsToolbar","activeFilters","currentFilterType","filterFields","currentValue","currentViewType","filterCategory","addQuery","isArray","field","getFilter","clearFilters","onFilterRemoved","filterAdded","onFilterAdded","filterLabel","getFilterLabel","filterText","charAt","toUpperCase","filterValue","handleExportClicked","onExportClicked","onValueKeyPress","stopPropagation","removeFilter","updated","selectFilterType","filterType","updateCurrentValue","prevState","equal","TextInput","onKeyPress","placeholder","isExportDisabled","pagination","Toolbar","ToolbarSection","ToolbarGroup","ToolbarItem","FormSelect","FormSelectOption","renderInput","external_link_square_alt_icon","headingLevel","resultsTotal","Chip","ocpDetails_styles_styles","ocpDetails","tableContainer","ocpDetails_reportType","ocpDetails_tagKey","ocpDetails_baseQuery","ocpDetails_mapStateToProps","ocpDetails_mapDispatchToProps","getFilterFields","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","exportText","handleFilterAdded","handleFilterRemoved","history","newFilterType","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","noProvidersState","loadingState"],"mappings":"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","file":"53f295b7ded01433d37c.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpDetails from './ocpDetails';\nexport default hot(module)(OcpDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    const test = i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n    return test;\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nconst ChartLabelTooltip = (_a) => {\n    var { content } = _a, props = __rest(_a, [\"content\"]);\n    return (React.createElement(Tooltip, { content: content(props.datum), enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props))));\n};\nexport { ChartLabelTooltip };\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentUsageData, 'chart.usage_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousUsageData,\n                            name: 'previousUsage',\n                            show: true,\n                            style: chartStyles.previousUsageData,\n                        },\n                        {\n                            data: currentUsageData,\n                            name: 'currentUsage',\n                            show: true,\n                            style: chartStyles.currentUsageData,\n                        },\n                        {\n                            data: previousRequestData,\n                            name: 'previousRequest',\n                            show: true,\n                            style: chartStyles.previousRequestData,\n                        },\n                        {\n                            data: currentRequestData,\n                            name: 'currentRequest',\n                            show: true,\n                            style: chartStyles.currentRequestData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: true, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: containerHeight } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ children, detailsLink, title, subTitle, subTitleTooltip = subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n            React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '440px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, Tooltip, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummaryAlt.styles';\nconst OcpReportSummaryAltBase = ({ children, detailsLink, status, subTitle, subTitleTooltip = subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(Tooltip, { content: subTitleTooltip, enableFlip: true },\n                        React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.chartSkeleton) }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { size: SkeletonSize.xs, className: css(styles.legendSkeleton) }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpReportSummaryAlt = translate()(OcpReportSummaryAltBase);\nexport { OcpReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    let derivedCost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        derivedCost = formatValue(report.meta.total.derived_cost ? report.meta.total.derived_cost.value : 0, report.meta.total.derived_cost\n            ? report.meta.total.derived_cost.units\n            : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        if (reportType !== \"cost\" /* cost */) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_dashboard.total_cost_tooltip', {\n                derivedCost,\n                infrastructureCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpReportSummaryDetails = translate()(OcpReportSummaryDetailsBase);\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItemBase = ({ formatOptions, formatValue, label, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpReportSummaryItem = translate()(OcpReportSummaryItemBase);\nexport { OcpReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { styles } from './ocpReportSummaryItems.styles';\nclass OcpReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpReportSummaryItems = translate()(OcpReportSummaryItemsBase);\nexport { OcpReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 200,\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { ChartLabelTooltip } from 'components/charts/chartLabelTooltip';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './costChart.styles';\nclass CostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const legendData = [];\n            const legendColorScale = [];\n            if (previousCostData) {\n                const [start] = getMonthRangeString(previousCostData, 'chart.cost_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousCostData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[0]);\n            }\n            if (currentCostData) {\n                const [start] = getMonthRangeString(currentCostData, 'chart.cost_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentCostData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[0]);\n            }\n            if (previousInfrastructureCostData) {\n                const [start] = getMonthRangeString(previousInfrastructureCostData, 'chart.cost_infrastructure_legend_label', 1);\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousInfrastructureCostData, true, true, 1),\n                });\n                legendColorScale.push(chartStyles.previousColorScale[1]);\n            }\n            if (currentInfrastructureCostData) {\n                const [start] = getMonthRangeString(currentInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                legendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentInfrastructureCostData, true, false),\n                });\n                legendColorScale.push(chartStyles.currentColorScale[1]);\n            }\n            this.setState({\n                chartDatum: {\n                    charts: [\n                        {\n                            data: previousCostData,\n                            name: 'previousCost',\n                            show: true,\n                            style: chartStyles.previousCostData,\n                        },\n                        {\n                            data: currentCostData,\n                            name: 'currentCost',\n                            show: true,\n                            style: chartStyles.currentCostData,\n                        },\n                        {\n                            data: previousInfrastructureCostData,\n                            name: 'previousInfrastructureCost',\n                            show: true,\n                            style: chartStyles.previousInfrastructureCostData,\n                        },\n                        {\n                            data: currentInfrastructureCostData,\n                            name: 'currentInfrastructureCost',\n                            show: true,\n                            style: chartStyles.currentInfrastructureCostData,\n                        },\n                    ],\n                    legend: {\n                        colorScale: legendColorScale,\n                        data: legendData,\n                        gutter: 55,\n                        onClick: this.handleLegendClick,\n                    },\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow, title } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 400\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), responsive: false, style: chartStyles.legend, title: title }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentInfrastructureCostData !==\n            this.props.currentInfrastructureCostData ||\n            prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentInfrastructure = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxCurrentUsage = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxPreviousInfrastructure = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxPreviousUsage = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentInfrastructure, maxCurrentUsage, maxPreviousInfrastructure, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, currentCostData, previousInfrastructureCostData, previousCostData, } = this.props;\n        const currentInfrastructureDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentCostData\n            ? getDate(getDateRange(currentCostData, true, true)[1])\n            : 0;\n        const previousInfrastructureDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousCostData\n            ? getDate(getDateRange(previousCostData, true, true)[1])\n            : 0;\n        return currentInfrastructureDate > 0 ||\n            currentUsageDate > 0 ||\n            previousInfrastructureDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentInfrastructureDate, currentUsageDate, previousInfrastructureDate, previousUsageDate)\n            : 31;\n    }\n    isLegendVisible() {\n        const { chartDatum } = this.state;\n        let result = false;\n        if (chartDatum && chartDatum.legend && chartDatum.legend.data) {\n            chartDatum.legend.data.forEach(data => {\n                if (data.name && data.name.trim() !== '') {\n                    result = true;\n                    return;\n                }\n            });\n        }\n        return result;\n    }\n    render() {\n        const { height, containerHeight = height, padding } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const legendVisible = this.isLegendVisible();\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: width > 400 ? containerHeight : containerHeight + 75 } },\n            React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: legendVisible ? this.getLegend(chartDatum.legend, width) : undefined, legendData: legendVisible ? chartDatum.legend.data : undefined, legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                Boolean(chartDatum && chartDatum) &&\n                    chartDatum.charts.map((chart, index) => {\n                        return this.getChart(chart, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { CostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { CostChart } from 'components/charts/costChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(CostChart, Object.assign({}, props))));\nexport { OcpReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryTrend.styles';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { ChartLabelTooltip } from '../chartLabelTooltip';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const previous = [\n                {\n                    data: previousUsageData,\n                    name: 'previousUsage',\n                    show: true,\n                    style: chartStyles.previousUsageData,\n                },\n                {\n                    data: previousRequestData,\n                    name: 'previousRequest',\n                    show: true,\n                    style: chartStyles.previousRequestData,\n                },\n                {\n                    data: previousLimitData,\n                    name: 'previousLimit',\n                    show: true,\n                    style: chartStyles.previousLimitData,\n                },\n            ];\n            const current = [\n                {\n                    data: currentUsageData,\n                    name: 'currentUsage',\n                    show: true,\n                    style: chartStyles.currentUsageData,\n                },\n                {\n                    data: currentRequestData,\n                    name: 'currentRequest',\n                    show: true,\n                    style: chartStyles.currentRequestData,\n                },\n                {\n                    data: currentLimitData,\n                    name: 'currentLimit',\n                    show: true,\n                    style: chartStyles.currentLimitData,\n                },\n            ];\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousUsageData) {\n                const [start] = getMonthRangeString(previousUsageData, 'chart.usage_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousUsageData, true, true, 1),\n                });\n            }\n            if (previousRequestData) {\n                const [start] = getMonthRangeString(previousRequestData, 'chart.requests_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousRequestData, true, true, 1),\n                });\n            }\n            if (previousLimitData) {\n                const [start] = getMonthRangeString(previousLimitData, 'chart.limit_legend_label', 1);\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousLimitData, true, true, 1),\n                });\n            }\n            const currentLegendData = [];\n            if (currentUsageData) {\n                const [start] = getMonthRangeString(currentLegendData, 'chart.usage_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentUsageData, true, false),\n                });\n            }\n            if (currentRequestData) {\n                const [start] = getMonthRangeString(currentRequestData, 'chart.requests_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentRequestData, true, false),\n                });\n            }\n            if (currentLimitData) {\n                const [start] = getMonthRangeString(currentLimitData, 'chart.limit_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentLimitData, true, false),\n                });\n            }\n            // Merge current and previous data into one legend row\n            const charts = [];\n            const colorScale = [];\n            const legendData = [];\n            for (let i = 0; i < current.length && previous.length; i++) {\n                charts.push(previous[i]);\n                charts.push(current[i]);\n                legendData.push(previousLegendData[i]);\n                legendData.push(currentLegendData[i]);\n                colorScale.push(chartStyles.previousColorScale[i]);\n                colorScale.push(chartStyles.currentColorScale[i]);\n            }\n            const legend = {\n                colorScale,\n                data: legendData,\n                onClick: this.handleLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            if (!(chartDatum && chartDatum.data && chartDatum.data.length)) {\n                return null;\n            }\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            const eventHandlers = {\n                onClick: () => {\n                    return [\n                        {\n                            target: 'data',\n                            mutation: props => {\n                                chartDatum.onClick(props);\n                                return null;\n                            },\n                        },\n                    ];\n                },\n            };\n            return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                    {\n                        target: 'data',\n                        eventHandlers,\n                    },\n                    {\n                        target: 'labels',\n                        eventHandlers,\n                    },\n                ], gutter: 0, height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infrastructureCost: {\n        marginTop: global_spacer_xl.value,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { parseQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'or:tag:';\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(val => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${val}`, onClick: () => this.handleGroupByClick(`${tagKey}${val}`) }, t('group_by.tag', { key: val }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag', { key: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const today = new Date();\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let derivedCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            derivedCost = formatValue(report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_details.title')),\n                Boolean(showContent) && React.createElement(GroupBy, { onItemClicked: onGroupByClicked })),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_details.total_cost_tooltip', {\n                            derivedCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.derived_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"div\", null, t('ocp_details.derived_cost_title')),\n                                    React.createElement(\"div\", null, t('ocp_details.derived_cost_desc')),\n                                    React.createElement(\"div\", { className: css(styles.infrastructureCost) }, t('ocp_details.infrastructure_cost_title')),\n                                    React.createElement(\"div\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, t('since_date', { month: today.getMonth(), date: 1 })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetView } from './detailsWidgetView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.widget_modal_title', {\n                parentGroupBy,\n                name: item.label,\n                groupBy,\n            }) },\n            React.createElement(DetailsWidgetView, { groupBy: parentGroupBy, item: item })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpExportActions, ocpExportSelectors } from 'store/ocpExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'or:tag:';\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpExportSelectors.selectExportError(state),\n        export: ocpExportSelectors.selectExport(state),\n        fetchStatus: ocpExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    itemsPerRow: 0,\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousInfrastructureCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousCostData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport { getDateRangeString, getMaxValue, getMonthRangeString, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { ChartLabelTooltip } from '../chartLabelTooltip';\nimport { chartStyles, styles } from './historicalCostChart.styles';\nclass HistoricalCostChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n            const previous = [\n                {\n                    data: previousCostData,\n                    name: 'previousCost',\n                    show: true,\n                    style: chartStyles.previousCostData,\n                },\n                {\n                    data: previousInfrastructureCostData,\n                    name: 'previousInfrastructureCost',\n                    show: true,\n                    style: chartStyles.previousInfrastructureCostData,\n                },\n            ];\n            const current = [\n                {\n                    data: currentCostData,\n                    name: 'currentCost',\n                    show: true,\n                    style: chartStyles.currentCostData,\n                },\n                {\n                    data: currentInfrastructureCostData,\n                    name: 'currentInfrastructureCost',\n                    show: true,\n                    style: chartStyles.currentInfrastructureCostData,\n                },\n            ];\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            const previousLegendData = [];\n            if (previousCostData) {\n                const [start] = getMonthRangeString(previousCostData, 'chart.cost_legend_label');\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(previousCostData, true, true),\n                });\n            }\n            if (previousInfrastructureCostData) {\n                const [start] = getMonthRangeString(previousInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                previousLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(previousInfrastructureCostData, true, true),\n                });\n            }\n            const currentLegendData = [];\n            if (currentCostData) {\n                const [start] = getMonthRangeString(currentCostData, 'chart.cost_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'minus',\n                    },\n                    tooltip: getDateRangeString(currentCostData, true, false),\n                });\n            }\n            if (currentInfrastructureCostData) {\n                const [start] = getMonthRangeString(currentInfrastructureCostData, 'chart.cost_infrastructure_legend_label');\n                currentLegendData.push({\n                    name: start,\n                    symbol: {\n                        type: 'dash',\n                    },\n                    tooltip: getDateRangeString(currentInfrastructureCostData, true, false),\n                });\n            }\n            // Merge current and previous data into one legend row\n            const charts = [];\n            const colorScale = [];\n            const legendData = [];\n            for (let i = 0; i < current.length && previous.length; i++) {\n                charts.push(previous[i]);\n                charts.push(current[i]);\n                legendData.push(previousLegendData[i]);\n                legendData.push(currentLegendData[i]);\n                colorScale.push(chartStyles.previousColorScale[i]);\n                colorScale.push(chartStyles.currentColorScale[i]);\n            }\n            const legend = {\n                colorScale,\n                data: legendData,\n                onClick: this.handleLegendClick,\n            };\n            this.setState({\n                chartDatum: {\n                    charts,\n                    legend,\n                },\n            });\n        };\n        this.handleLegendClick = props => {\n            const { chartDatum } = this.state;\n            const newDatum = Object.assign({}, chartDatum);\n            if (props.index >= 0 && newDatum.charts.length) {\n                newDatum.charts[props.index].show = !newDatum.charts[props.index].show;\n                this.setState({ chartDatum: newDatum });\n            }\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (chartDatum, index) => {\n            if (chartDatum.data && chartDatum.data.length && chartDatum.show) {\n                return (React.createElement(ChartArea, { data: chartDatum.data, interpolation: \"basis\", name: chartDatum.name, key: `historical-usage-chart-${chartDatum.name}-${index}`, style: chartDatum.style }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegend = (chartDatum, width) => {\n            const { legendItemsPerRow } = this.props;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 700\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            if (chartDatum && chartDatum.data && chartDatum.data.length) {\n                const eventHandlers = {\n                    onClick: () => {\n                        return [\n                            {\n                                target: 'data',\n                                mutation: props => {\n                                    chartDatum.onClick(props);\n                                    return null;\n                                },\n                            },\n                        ];\n                    },\n                };\n                return (React.createElement(ChartLegend, { colorScale: chartDatum.colorScale, data: chartDatum.data, events: [\n                        {\n                            target: 'data',\n                            eventHandlers,\n                        },\n                        {\n                            target: 'labels',\n                            eventHandlers,\n                        },\n                    ], gutter: 0, height: 25, itemsPerRow: itemsPerRow, labelComponent: React.createElement(ChartLabelTooltip, { content: this.getLegendTooltip }), style: chartStyles.legend }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getLegendTooltip = (chartDatum) => {\n            return chartDatum.tooltip ? chartDatum.tooltip : '';\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentCost' ||\n                datum.childName === 'previousCost') {\n                return i18next.t('chart.cost_tooltip', { value });\n            }\n            else if (datum.childName === 'currentInfrastructureCost' ||\n                datum.childName === 'previousInfrastructureCost') {\n                return i18next.t('chart.cost_infrastructure_tooltip', { value });\n            }\n            return value;\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentCostData !== this.props.currentCostData ||\n            prevProps.currentInfrastructureCostData !==\n                this.props.currentInfrastructureCostData ||\n            prevProps.previousCostData !== this.props.previousCostData ||\n            prevProps.previousInfrastructureCostData !==\n                this.props.previousInfrastructureCostData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentCostData, currentInfrastructureCostData, previousCostData, previousInfrastructureCostData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentCostData ? getMaxValue(currentCostData) : 0;\n        const maxCurrentRequest = currentInfrastructureCostData\n            ? getMaxValue(currentInfrastructureCostData)\n            : 0;\n        const maxPreviousLimit = previousCostData\n            ? getMaxValue(previousCostData)\n            : 0;\n        const maxPreviousRequest = previousInfrastructureCostData\n            ? getMaxValue(previousInfrastructureCostData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxPreviousLimit, maxPreviousRequest);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentInfrastructureCostData, previousInfrastructureCostData, } = this.props;\n        const currentRequestDate = currentInfrastructureCostData\n            ? getDate(getDateRange(currentInfrastructureCostData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousInfrastructureCostData\n            ? getDate(getDateRange(previousInfrastructureCostData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 || previousRequestDate > 0\n            ? Math.max(currentRequestDate, previousRequestDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { chartDatum, width } = this.state;\n        const container = (React.createElement(ChartVoronoiContainer, { constrainToVisibleArea: true, labels: this.getTooltipLabel, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, height: height, legendComponent: chartDatum ? this.getLegend(chartDatum.legend, width) : undefined, legendData: chartDatum ? chartDatum.legend.data : undefined, legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    Boolean(chartDatum && chartDatum.charts) &&\n                        chartDatum.charts.map((chart, index) => {\n                            return this.getChart(chart, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalCostChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalCostChart } from 'components/charts/historicalCostChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpReportsActions from 'store/ocpReports/ocpReportsActions';\nimport * as ocpReportsSelectors from 'store/ocpReports/ocpReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const currentInfrastructureCostData = transformOcpReport(currentCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        const previousCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousInfrastructureCostData = transformOcpReport(previousCostReport, 0 /* rolling */, 'date', 'infrastructureCost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalCostChart, { containerHeight: chartStyles.chartContainerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureCostData, title: t('ocp_details.historical.cost_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_details.historical.cpu_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_details.historical.memory_title'), xAxisLabel: t('ocp_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '50vh',\n        marginTop: global_spacer_xl.value,\n    },\n});\n","import { EmptyState as PfEmptyState, EmptyStateBody, EmptyStateIcon, Title, TitleSize, } from '@patternfly/react-core';\nimport { MoneyCheckAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './noRatesState.styles';\nconst NoRatesStateBase = ({ t, cluster }) => {\n    return (React.createElement(\"div\", { className: css(styles.container) },\n        React.createElement(PfEmptyState, null,\n            React.createElement(EmptyStateIcon, { icon: MoneyCheckAltIcon }),\n            React.createElement(Title, { size: TitleSize.lg }, t('no_rates_state.title')),\n            React.createElement(EmptyStateBody, null, t('no_rates_state.desc', { cluster })))));\n};\nexport const NoRatesState = translate()(NoRatesStateBase);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport React from 'react';\nimport { formatCurrency } from 'utils/formatValue';\nfunction getUsageRangeText(metric, t) {\n    return metric.range_value[0] === null && metric.range_value[1] === null\n        ? t('ocp_details.price_list.modal.no_range_set')\n        : `${metric.range_value[0] || ' '} - ${metric.range_value[2] || ' '} ${metric.range_unit}`;\n}\nconst PriceListTable = ({ rates, t }) => {\n    const notAvailableText = t('ocp_details.price_list.modal.not_available');\n    return (React.createElement(Table, { \"aria-label\": \"price-list-table\", cells: [\n            t('ocp_details.price_list.modal.metric'),\n            t('ocp_details.price_list.modal.value'),\n            t('ocp_details.price_list.modal.applied_usage_range'),\n            t('ocp_details.price_list.modal.applied_usage_date_range'),\n        ], rows: rates.map(metric => [\n            t(`ocp_details.price_list.modal.${metric.display}`, {\n                index: metric.index + 1,\n                unit: metric.range_unit,\n            }),\n            metric.value\n                ? formatCurrency(metric.value, metric.value_unit)\n                : notAvailableText,\n            getUsageRangeText(metric, t),\n            t(`ocp_details.price_list.modal.${metric.period}`),\n        ]) },\n        React.createElement(TableHeader, null),\n        React.createElement(TableBody, null)));\n};\nexport default PriceListTable;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { priceListActions, priceListSelectors } from 'store/priceList';\nimport { providersSelectors } from 'store/providers';\nimport { styles as chartStyles } from './historicalChart.styles';\nimport { modalOverride, styles } from './historicalModal.styles';\nimport { NoRatesState } from './noRatesState';\nimport PriceListTable from './priceListTable';\nclass PriceListModalBase extends React.Component {\n    componentDidUpdate() {\n        const { fetch, isOpen, providers, priceListStatus: status, name, } = this.props;\n        if (isOpen && status !== 1 /* inProgress */) {\n            const priceListProvider = providers.data.find(p => p.name === name);\n            fetch(priceListProvider ? priceListProvider.uuid : null);\n        }\n    }\n    renderContent() {\n        const { t, providers, name, priceListStatus, priceListError, priceList, } = this.props;\n        if (priceListStatus !== 2 /* complete */) {\n            return (React.createElement(Skeleton, { className: css(chartStyles.chartSkeleton), size: SkeletonSize.md }));\n        }\n        if (priceListError !== null) {\n            return React.createElement(ErrorState, { error: priceListError });\n        }\n        const priceListProvider = providers.data.find(p => p.name === name);\n        const priceListRates = priceListProvider && priceList[priceListProvider.uuid];\n        return priceListRates ? (React.createElement(PriceListTable, { t: t, rates: priceListRates })) : (React.createElement(NoRatesState, { cluster: name.toString() }));\n    }\n    render() {\n        const { t, isOpen, close, name } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: () => close(false), title: t('ocp_details.price_list.modal.title', { name }) }, this.renderContent()));\n    }\n}\nconst PriceListModal = connect(createMapStateToProps((state, props) => {\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, 'type=OCP');\n    const priceListProvider = providers.data.find(p => p.name === props.name);\n    const providerUuid = priceListProvider ? priceListProvider.uuid : null;\n    return {\n        priceList: priceListSelectors.ratesPerProvider(state, providerUuid),\n        priceListError: priceListSelectors.error(state, providerUuid),\n        priceListStatus: priceListSelectors.status(state, providerUuid),\n        providers,\n    };\n}), {\n    fetch: priceListActions.fetchPriceList,\n})(translate()(PriceListModalBase));\nexport default PriceListModal;\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nimport PriceListModal from './priceListModal';\nconst tagKey = 'or:tag:';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isPriceListModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getPriceListModal = () => {\n            const { item: { label }, } = this.props;\n            return (React.createElement(PriceListModal, { name: label, isOpen: this.state.isPriceListModalOpen, close: this.handlePriceListModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handlePriceListModalClose = (isOpen) => {\n            this.setState({ isPriceListModalOpen: isOpen });\n        };\n        this.handlePriceListModalOpen = () => {\n            this.setState({ isPriceListModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handlePriceListModalClose = this.handlePriceListModalClose.bind(this);\n        this.handlePriceListModalOpen = this.handlePriceListModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"price-list-action\", isDisabled: groupBy.includes(tagKey), onClick: this.handlePriceListModalOpen }, t('ocp_details.actions.price_list')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal(),\n            this.getPriceListModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        if (report && report.meta && report.meta.total) {\n            if (report.meta.total.limit !== null) {\n                const limit = Math.trunc(report.meta.total.limit.value);\n                const limitUnits = t(`units.${unitLookupKey(report.meta.total.limit.units)}`);\n                datum.limit = {\n                    legend: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    tooltip: t(`ocp_details.bullet.${labelKey}_limit`, {\n                        value: limit,\n                        units: limitUnits,\n                    }),\n                    value: Math.trunc(limit),\n                };\n            }\n            if (report.meta.total.request !== null) {\n                const request = Math.trunc(report.meta.total.request.value);\n                const requestUnits = t(`units.${unitLookupKey(report.meta.total.request.units)}`);\n                datum.ranges = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_requests`, {\n                            value: request,\n                            units: requestUnits,\n                        }),\n                        value: Math.trunc(request),\n                    },\n                ];\n            }\n            if (report.meta.total.usage !== null) {\n                const usage = Math.trunc(report.meta.total.usage.value);\n                const usageUnits = t(`units.${unitLookupKey(report.meta.total.usage.units)}`);\n                datum.usage = [\n                    {\n                        legend: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        tooltip: t(`ocp_details.bullet.${labelKey}_usage`, {\n                            value: usage,\n                            units: usageUnits,\n                        }),\n                        value: Math.trunc(usage),\n                    },\n                ];\n            }\n        }\n        return datum;\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                    ? [\n                        {\n                            tooltip: cpuDatum.limit.tooltip,\n                            y: cpuDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value ? [{ name: cpuDatum.limit.legend }] : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: cpuDatum.usage.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.usage[0].tooltip,\n                            y: cpuDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                    ? [{ name: cpuDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: cpuDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: cpuDatum.ranges[0].tooltip,\n                            y: cpuDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                    ? [{ name: cpuDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width })))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                    ? [\n                        {\n                            tooltip: memoryDatum.limit.tooltip,\n                            y: memoryDatum.limit.value,\n                        },\n                    ]\n                    : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                    ? [{ name: memoryDatum.limit.legend }]\n                    : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, padding: {\n                    bottom: 75,\n                    left: 10,\n                    right: 50,\n                    top: 50,\n                }, primarySegmentedMeasureData: memoryDatum.usage.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.usage[0].tooltip,\n                            y: memoryDatum.usage[0].value,\n                        },\n                    ]\n                    : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                    ? [{ name: memoryDatum.usage[0].legend }]\n                    : [], qualitativeRangeData: memoryDatum.ranges.length\n                    ? [\n                        {\n                            tooltip: memoryDatum.ranges[0].tooltip,\n                            y: memoryDatum.ranges[0].value,\n                        },\n                    ]\n                    : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                    ? [{ name: memoryDatum.ranges[0].legend }]\n                    : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    summary: {\n        paddingTop: global_spacer_md.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpQuery';\nimport { OcpReportSummaryItem, OcpReportSummaryItems, } from 'components/reports/ocpReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpReportItems } from 'utils/getComputedOcpReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isDetailsChartModalOpen: false,\n        };\n        this.getItems = (currentTab) => {\n            const { report } = this.props;\n            const computedItems = getComputedOcpReportItems({\n                report,\n                idKey: currentTab,\n            });\n            return computedItems;\n        };\n        this.getSummary = () => {\n            const { report, reportFetchStatus, t } = this.props;\n            return (React.createElement(React.Fragment, null,\n                t('group_by.details', { groupBy: 'project' }),\n                React.createElement(\"div\", { className: css(styles.summary) },\n                    React.createElement(OcpReportSummaryItems, { idKey: \"project\", report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => (React.createElement(OcpReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label.toString(), totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost })))),\n                    this.getViewAll())));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, t } = this.props;\n            const { isDetailsChartModalOpen } = this.state;\n            const currentTab = 'project';\n            const computedItems = this.getItems(currentTab);\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleDetailsChartModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_details.view_all', { value: currentTab })),\n                    React.createElement(DetailsWidgetModal, { groupBy: currentTab, isOpen: isDetailsChartModalOpen, item: item, onClose: this.handleDetailsChartModalClose, parentGroupBy: groupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleDetailsChartModalClose = (isOpen) => {\n            this.setState({ isDetailsChartModalOpen: isOpen });\n        };\n        this.handleDetailsChartModalOpen = event => {\n            this.setState({ isDetailsChartModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { reportFetchStatus } = this.props;\n        return (React.createElement(\"div\", null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (this.getSummary())));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            project: '*',\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        report,\n        reportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nconst DetailsWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        Boolean(groupBy === 'cluster') && (React.createElement(DetailsWidget, { groupBy: groupBy, item: item })))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst DetailsTableItem = translate()(connect()(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'or:tag:';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'derived_cost',\n                        title: t('ocp_details.derived_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const derivedCost = this.getDerivedCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, derivedCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_on_cloud_details.empty_state'))));\n        };\n        this.getDerivedCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.derivedCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.derivedCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report &&\n                report.meta &&\n                report.meta.total &&\n                report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructureCost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.infrastructureCost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const today = new Date();\n            const date = today.getDate();\n            const month = (((today.getMonth() - 1) % 12) + 12) % 12;\n            const value = formatCurrency(Math.abs(item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            let iconOverride = 'iconOverride';\n            if (item.deltaPercent !== null && item.deltaValue < 0) {\n                iconOverride += ' decrease';\n            }\n            if (item.deltaPercent !== null && item.deltaValue > 0) {\n                iconOverride += ' increase';\n            }\n            return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                    t('percent', { value: percentage }),\n                    Boolean(item.deltaPercent !== null && item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                    Boolean(item.deltaPercent !== null && item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, Boolean(item.deltaPercent !== null && item.deltaValue > 0)\n                    ? Boolean(date < 31)\n                        ? t('ocp_details.increase_since_date', { date, month, value })\n                        : t('ocp_details.increase_since_last_month', {\n                            date,\n                            month,\n                            value,\n                        })\n                    : Boolean(item.deltaPercent !== null && item.deltaValue < 0)\n                        ? Boolean(date < 31)\n                            ? t('ocp_details.decrease_since_date', { date, month, value })\n                            : t('ocp_details.decrease_since_last_month', {\n                                date,\n                                month,\n                                value,\n                            })\n                        : t('ocp_details.no_change_since_date', { date, month }))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    paginationContainer: {\n        width: '100%',\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Chip, FormSelect, FormSelectOption, TextInput, Title, TitleSize, Toolbar, ToolbarGroup, ToolbarItem, ToolbarSection, } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsToolbar.styles';\nconst tagKey = 'or:tag:';\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeFilters: [],\n            currentFilterType: this.props.filterFields[0],\n            currentValue: '',\n            currentViewType: 'list',\n            filterCategory: undefined,\n            report: undefined,\n        };\n        this.addQuery = (query) => {\n            const activeFilters = [];\n            Object.keys(query.group_by).forEach(key => {\n                if (query.group_by[key] !== '*') {\n                    if (Array.isArray(query.group_by[key])) {\n                        query.group_by[key].forEach(value => {\n                            const field = key.id || key;\n                            const filter = this.getFilter(field, value);\n                            activeFilters.push(filter);\n                        });\n                    }\n                    else {\n                        const field = key.id || key;\n                        const filter = this.getFilter(field, query.group_by[key]);\n                        activeFilters.push(filter);\n                    }\n                }\n            });\n            this.setState({ activeFilters });\n        };\n        this.clearFilters = (event) => {\n            const { currentFilterType } = this.state;\n            this.setState({ activeFilters: [] });\n            this.props.onFilterRemoved(currentFilterType.id, '');\n            event.preventDefault();\n        };\n        // Note: Active filters are set upon page refresh -- don't need to do that here\n        this.filterAdded = (field, value) => {\n            const { currentFilterType } = this.state;\n            this.props.onFilterAdded(currentFilterType.id, value);\n        };\n        this.getFilter = (field, value) => {\n            const { currentFilterType } = this.state;\n            const filterLabel = this.getFilterLabel(field, value);\n            return {\n                field: field.indexOf(tagKey) === 0 ? field : currentFilterType.id,\n                label: filterLabel,\n                value,\n            };\n        };\n        this.getFilterLabel = (field, value) => {\n            let filterText = '';\n            if (field.title) {\n                filterText = field.title;\n            }\n            else {\n                filterText = field;\n            }\n            const index = filterText.indexOf(tagKey);\n            if (index === 0) {\n                filterText = 'Tag: ' + filterText.slice(tagKey.length) + ': ';\n            }\n            else {\n                filterText =\n                    filterText.charAt(0).toUpperCase() + filterText.slice(1) + ': ';\n            }\n            if (value.filterCategory) {\n                filterText += `${value.filterCategory.title ||\n                    value.filterCategory}-${value.filterValue.title || value.filterValue}`;\n            }\n            else if (value.title) {\n                filterText += value.title;\n            }\n            else {\n                filterText += value;\n            }\n            return filterText;\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n        this.onValueKeyPress = (e) => {\n            const { currentValue, currentFilterType } = this.state;\n            if (e.key === 'Enter' && currentValue && currentValue.length > 0) {\n                this.setState({ currentValue: '' });\n                this.filterAdded(currentFilterType, currentValue);\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n        this.removeFilter = filter => {\n            const { activeFilters } = this.state;\n            const index = activeFilters.indexOf(filter);\n            if (index > -1) {\n                const updated = [\n                    ...activeFilters.slice(0, index),\n                    ...activeFilters.slice(index + 1),\n                ];\n                this.setState({ activeFilters: updated });\n                this.props.onFilterRemoved(filter.field, filter.value);\n            }\n        };\n        this.selectFilterType = filterType => {\n            const { currentFilterType } = this.state;\n            if (currentFilterType !== filterType) {\n                this.setState({\n                    currentValue: '',\n                    currentFilterType: filterType,\n                });\n            }\n        };\n        this.updateCurrentValue = (currentValue) => {\n            this.setState({ currentValue });\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { filterFields, query, report } = this.props;\n        if (report && !isEqual(report, prevProps.report)) {\n            this.addQuery(query);\n        }\n        if (!isEqual(filterFields, prevProps.filterFields)) {\n            this.setState({\n                currentFilterType: this.props.filterFields[0],\n            });\n        }\n    }\n    renderInput() {\n        const { currentFilterType, currentValue } = this.state;\n        if (!currentFilterType) {\n            return null;\n        }\n        return (React.createElement(TextInput, { id: \"filter\", onChange: this.updateCurrentValue, onKeyPress: this.onValueKeyPress, placeholder: currentFilterType.placeholder, value: currentValue }));\n    }\n    render() {\n        const { filterFields, isExportDisabled, pagination, t } = this.props;\n        const { activeFilters } = this.state;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(FormSelect, { \"aria-label\": t('ocp_details.toolbar.filter_type_aria_label') }, filterFields.map(({ id, label }) => {\n                                return (React.createElement(FormSelectOption, { key: `filter-type-${id}`, label: label, value: id }));\n                            }))),\n                        React.createElement(ToolbarItem, null, this.renderInput())),\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                                React.createElement(\"span\", { className: css(styles.export) }, t('ocp_details.toolbar.export')),\n                                React.createElement(ExternalLinkSquareAltIcon, null)))),\n                    React.createElement(ToolbarGroup, { style: { marginLeft: 'auto' } },\n                        React.createElement(ToolbarItem, null, pagination))),\n                React.createElement(ToolbarSection, { \"aria-label\": t('ocp_details.toolbar.filter_results_aria_label') },\n                    React.createElement(ToolbarGroup, null,\n                        React.createElement(ToolbarItem, null,\n                            React.createElement(Title, { size: TitleSize.md, headingLevel: \"h5\" }, t('ocp_details.toolbar.results', {\n                                value: this.props.resultsTotal,\n                            })))),\n                    activeFilters.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, t('ocp_details.toolbar.active_filters'))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null, activeFilters.map((item, index) => (React.createElement(Chip, { style: { paddingRight: '20px' }, key: `applied-filter-${index}`, onClick: () => this.removeFilter(item) }, item.label))))),\n                        React.createElement(ToolbarGroup, null,\n                            React.createElement(ToolbarItem, null,\n                                React.createElement(Button, { onClick: this.clearFilters, variant: \"plain\" }, t('ocp_details.toolbar.clear_filters'))))))))));\n    }\n}\nconst DetailsToolbar = translate()(DetailsToolbarBase);\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, parseQuery } from 'api/ocpQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpReportsActions, ocpReportsSelectors } from 'store/ocpReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'or:tag:';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getFilterFields = (groupById) => {\n            const { t } = this.props;\n            if (groupById === 'cluster') {\n                return [\n                    {\n                        id: 'cluster',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.cluster_select'),\n                        placeholder: t('ocp_details.filter.cluster_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'node') {\n                return [\n                    {\n                        id: 'node',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.node_select'),\n                        placeholder: t('ocp_details.filter.node_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else if (groupById === 'project') {\n                return [\n                    {\n                        id: 'project',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.project_select'),\n                        placeholder: t('ocp_details.filter.project_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            else {\n                // Default for group by project tags\n                return [\n                    {\n                        id: 'tag',\n                        label: t('ocp_details.filter.name'),\n                        title: t('ocp_details.filter.tag_select'),\n                        placeholder: t('ocp_details.filter.tag_placeholder'),\n                        filterType: 'text',\n                    },\n                ];\n            }\n            return [];\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const filterFields = this.getFilterFields(groupByTagKey ? 'tag' : groupById);\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_details.export_link'), filterFields: filterFields, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report, resultsTotal: report ? report.meta.count : 0 }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (newQuery.group_by[newFilterType]) {\n                if (newQuery.group_by[newFilterType] === '*') {\n                    newQuery.group_by[newFilterType] = filterValue;\n                }\n                else if (!newQuery.group_by[newFilterType].includes(filterValue)) {\n                    newQuery.group_by[newFilterType] = [\n                        newQuery.group_by[newFilterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.group_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            const groupByTagKey = this.getGroupByTagKey();\n            const newFilterType = filterType === 'tag' ? `${tagKey}${groupByTagKey}` : filterType;\n            if (filterValue === '') {\n                newQuery.group_by = {\n                    [newFilterType]: '*',\n                };\n            }\n            else if (!Array.isArray(newQuery.group_by[newFilterType])) {\n                newQuery.group_by[newFilterType] = '*';\n            }\n            else {\n                const index = newQuery.group_by[newFilterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.group_by[newFilterType] = [\n                        ...query.group_by[newFilterType].slice(0, index),\n                        ...query.group_by[newFilterType].slice(index + 1),\n                    ];\n                }\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp?${getQuery(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpDetails) },\n            React.createElement(DetailsHeader, { onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n"],"sourceRoot":""}