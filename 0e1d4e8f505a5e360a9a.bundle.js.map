{"version":3,"file":"0e1d4e8f505a5e360a9a.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/details/gcpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/gcpBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/gcpBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedGcpReportItems.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/gcpDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/gcpDetails/gcpDetails.tsx","webpack://koku-ui/./src/pages/views/details/gcpDetails/index.ts"],"sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { gcpCostOverviewSelectors } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpCostOverviewSelectors.selectWidgets(state),\n        widgets: gcpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { gcpHistoricalDataSelectors } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: gcpHistoricalDataSelectors.selectWidgets(state),\n        widgets: gcpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.gcpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"gcp\" /* gcp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.GCPDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"gcp\" /* gcp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"gcp\" /* gcp */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst GcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default GcpBreakdown;\n","import GcpBreakdown from './gcpBreakdown';\nexport default GcpBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.gcp_project) {\n        return 'gcp_project';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isBetaFeature } from 'utils/feature';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'gcp_project', value: 'gcp_project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst tagReportPathsType = \"gcp\" /* gcp */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.GCPDetailsTitle)),\n                isBetaFeature() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './gcpDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/gcpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"gcp\" /* gcp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.Cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.gcpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.GCPDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/gcpQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"gcp\" /* gcp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'account' }), key: 'account' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'gcp_project' }), key: 'gcp_project' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service' }), key: 'service' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'region' }), key: 'region' },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"gcp\" /* gcp */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    gcpDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/gcpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedGcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './gcpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"gcp\" /* gcp */;\nclass GcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.GCPDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empty data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"gcp\" /* gcp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.gcpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(GcpDetails));\n","import GcpDetails from './gcpDetails';\nexport default GcpDetails;\n"],"names":["mapStateToProps","state","props","selectWidgets","gcpCostOverview","widgets","CostOverview","injectIntl","connect","gcpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","account","gcp_project","instance_type","project","region","service","styles","costValue","marginTop","global_spacer_lg","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","backgroundColor","global_BackgroundColor_light_100","padding","headerContent","display","justifyContent","headerContentLeft","minHeight","paddingBottom","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","onGroupBySelected","providersError","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","showTags","Boolean","format","units","DetailsHeader","emptyState","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","gcpDetails","content","paginationContainer","marginLeft","marginRight","global_spacer_md","tableContainer","limit","offset","GcpDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui"],"sourceRoot":""}