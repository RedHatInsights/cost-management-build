{"version":3,"sources":["webpack:///./src/pages/dashboard/components/dashboardBase.tsx","webpack:///./node_modules/react-router-dom/es/Link.js","webpack:///./src/pages/dashboard/components/dashboardWidget.styles.ts","webpack:///./src/pages/dashboard/components/dashboardWidgetBase.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsCloudDashboard/awsCloudDashboard.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/dashboard/awsDashboard/awsDashboard.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureCloudDashboard/azureCloudDashboard.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboardWidget.tsx","webpack:///./src/pages/dashboard/azureDashboard/azureDashboard.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.styles.ts","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboardWidget.tsx","webpack:///./src/pages/dashboard/ocpUsageDashboard/ocpUsageDashboard.tsx","webpack:///./src/pages/overview/overview.styles.ts","webpack:///./src/pages/overview/perspective.styles.ts","webpack:///./src/pages/overview/perspective.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/pages/overview/index.ts"],"names":["DashboardBase","DashboardWidget","selectWidgets","widgets","react_default","a","createElement","Grid","gutter","map","widgetId","widget","Boolean","details","showHorizontal","GridItem","sm","key","lg","xl","xl2","_extends","Object","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","_possibleConstructorReturn","self","ReferenceError","isModifiedEvent","event","metaKey","altKey","ctrlKey","shiftKey","Link_Link","_React$Component","Link","_temp","_this","instance","Constructor","TypeError","_classCallCheck","this","_len","args","Array","_key","apply","concat","handleClick","props","onClick","defaultPrevented","button","preventDefault","history","context","router","_this$props","replace","to","push","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_inherits","render","_props","innerRef","obj","keys","indexOf","_objectWithoutProperties","browser_default","undefined","location","esm_history","href","createHref","ref","Component","propTypes","prop_types_default","func","string","bool","oneOfType","object","isRequired","defaultProps","contextTypes","shape","es_Link","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","styles","tabs","marginTop","esm","tabItems","dashboardWidgetBase_DashboardWidgetBase","[object Object]","super","state","activeTabKey","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","awsQuery","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","getCostChart","getTrendChart","getUsageChart","currentReport","previousReport","t","trend","units","getUnits","title","titleKey","computedReportItem","currentInfrastructureData","chartUtils","type","previousInfrastructureData","currentUsageData","previousUsageData","reportSummary","currentCostData","currentInfrastructureCostData","formatDatumValue","formatValue","formatDatumOptions","formatOptions","previousCostData","previousInfrastructureCostData","currentData","previousData","showUsageLegendLabel","currentRequestData","previousRequestData","getDetails","costLabel","getDetailsLabel","costKey","report","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","handleInsightsNavClick","getDetailsLinkTitle","groupBy","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","subTitle","getSubTitle","getTabs","getTitle","today","Date","month","get_month_default","endDate","format_default","startDate","start_of_month_default","count","get_date_default","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","getTabTitle","style","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","meta","total","usage","id","label","toString","Tabs","isFilled","activeKey","onSelect","handleTabClick","getVerticalLayout","appNavPath","insights","chrome","appNavClick","secondaryNav","tabIndex","updateTab","setState","fetchReports","awsCloudDashboardWidget_getIdKeyForTab","mapStateToProps","common","awsCloudDashboard","selectWidget","queries","selectWidgetQueries","currentQuery","current","previousQuery","previous","tabsQuery","reports","selectReport","reportType","selectReportFetchStatus","mapDispatchToProps","fetchWidgetReports","changeWidgetTab","AwsCloudDashboardWidget","es","react_redux_es","awsCloudDashboard_mapStateToProps","selectCurrentWidgets","awsCloudDashboard_awsCloudDashboard","awsDashboardWidget_getIdKeyForTab","awsDashboardWidget_mapStateToProps","awsDashboard","awsDashboardWidget_mapDispatchToProps","AwsDashboardWidget","awsDashboard_mapStateToProps","awsDashboard_awsDashboard","azureCloudDashboardWidget_getIdKeyForTab","azureCloudDashboardWidget_mapStateToProps","azureCloudDashboard","azureCloudDashboardWidget_mapDispatchToProps","AzureCloudDashboardWidget","azureCloudDashboard_mapStateToProps","azureCloudDashboard_azureCloudDashboard","azureDashboardWidget_getIdKeyForTab","azureDashboardWidget_mapStateToProps","azureDashboard","azureReports","azureDashboardWidget_mapDispatchToProps","AzureDashboardWidget","azureDashboard_mapStateToProps","azureDashboard_azureDashboard","ocpCloudDashboardWidget_getIdKeyForTab","ocpCloudDashboardWidget_mapStateToProps","ocpCloudDashboard","ocpCloudReports","ocpCloudDashboardWidget_mapDispatchToProps","OcpCloudDashboardWidget","ocpCloudDashboard_mapStateToProps","ocpCloudDashboard_ocpCloudDashboard","ocpDashboardWidget_styles_chartStyles","ocpDashboardWidget_getIdKeyForTab","ocpDashboardWidget_mapStateToProps","ocpDashboard","ocpReports","ocpDashboardWidget_mapDispatchToProps","OcpDashboardWidget","ocpDashboard_mapStateToProps","ocpDashboard_ocpDashboard","ocpSupplementaryDashboardWidget_styles_chartStyles","ocpSupplementaryDashboardWidget_getIdKeyForTab","ocpSupplementaryDashboardWidget_mapStateToProps","ocpSupplementaryDashboard","ocpSupplementaryDashboardWidget_mapDispatchToProps","OcpSupplementaryDashboardWidget","ocpSupplementaryDashboard_mapStateToProps","ocpSupplementaryDashboard_ocpSupplementaryDashboard","ocpUsageDashboardWidget_getIdKeyForTab","ocpUsageDashboardWidget_mapStateToProps","ocpUsageDashboard","ocpUsageDashboardWidget_mapDispatchToProps","OcpUsageDashboardWidget","ocpUsageDashboard_mapStateToProps","ocpUsageDashboard_ocpUsageDashboard","overview_styles_styles","info","marginLeft","verticalAlign","infoIcon","fontSize","infoTitle","fontWeight","perspective","marginBottom","headerOverride","index_esm","perspective_styles_styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginRight","var","Perspective","defaultState","isPerspectiveOpen","getDropDownItems","options","option","DropdownItem","component","getCurrentLabel","currentItem","onItemClicked","handleSelect","handleToggle","dropdownItems","Dropdown","toggle","DropdownToggle","onToggle","isOpen","overview_getIdKeyForTab","ocpOptions","infrastructureOptions","infrastructureAwsOptions","infrastructureAzureOptions","infrastructureOcpOptions","overview_mapStateToProps","awsProvidersQueryString","providersQuery","providers","awsProviders","selectProviders","awsProvidersError","selectProvidersError","awsProvidersFetchStatus","selectProvidersFetchStatus","azureProvidersQueryString","azureProviders","azureProvidersError","azureProvidersFetchStatus","ocpProvidersQueryString","ocpProviders","ocpProvidersError","ocpProvidersFetchStatus","overview","currentInfrastructurePerspective","currentOcpPerspective","showPopover","getAvailableTabs","isAwsAvailable","isAzureAvailable","isOcpAvailable","isOcpCloudAvailable","contentRef","createRef","getCurrentTab","getPerspective","handlePerspectiveClick","tabContentId","tabContentRef","getTabContent","val","TabContent","handlePopoverClick","show","error","isLoading","noAwsProviders","noAzureProviders","noOcpProviders","noProviders","showTabs","Fragment","className","Title","size","sizes","Popover","aria-label","enableFlip","bodyContent","info_circle_icon","page-type","errorState","noProvidersState","loadingState","__webpack_exports__"],"mappings":"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","file":"0f7bb3b93be63668be9f.bundle.js","sourcesContent":["import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return Boolean(widget.details.showHorizontal) ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"invariant\";\nimport { createLocation } from \"history\";\n\nvar isModifiedEvent = function isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n};\n\n/**\n * The public API for rendering a history-aware <a>.\n */\n\nvar Link = function (_React$Component) {\n  _inherits(Link, _React$Component);\n\n  function Link() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Link);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {\n      if (_this.props.onClick) _this.props.onClick(event);\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && // ignore everything but left clicks\n      !_this.props.target && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n\n          var history = _this.context.router.history;\n          var _this$props = _this.props,\n              replace = _this$props.replace,\n              to = _this$props.to;\n\n\n          if (replace) {\n            history.replace(to);\n          } else {\n            history.push(to);\n          }\n        }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Link.prototype.render = function render() {\n    var _props = this.props,\n        replace = _props.replace,\n        to = _props.to,\n        innerRef = _props.innerRef,\n        props = _objectWithoutProperties(_props, [\"replace\", \"to\", \"innerRef\"]); // eslint-disable-line no-unused-vars\n\n    invariant(this.context.router, \"You should not use <Link> outside a <Router>\");\n\n    invariant(to !== undefined, 'You must specify the \"to\" property');\n\n    var history = this.context.router.history;\n\n    var location = typeof to === \"string\" ? createLocation(to, null, null, history.location) : to;\n\n    var href = history.createHref(location);\n    return React.createElement(\"a\", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));\n  };\n\n  return Link;\n}(React.Component);\n\nLink.propTypes = {\n  onClick: PropTypes.func,\n  target: PropTypes.string,\n  replace: PropTypes.bool,\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  innerRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n};\nLink.defaultProps = {\n  replace: false\n};\nLink.contextTypes = {\n  router: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n      replace: PropTypes.func.isRequired,\n      createHref: PropTypes.func.isRequired\n    }).isRequired\n  }).isRequired\n};\n\n\nexport default Link;","import { global_spacer_2xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartAltHeight: 180,\n    chartHeight: 80,\n    containerAltHeight: 200,\n    containerTrendHeight: 150,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformReport, } from 'components/charts/common/chartUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType } = this.props;\n            if (chartType === \"cost\" /* cost */) {\n                return this.getCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height);\n            }\n            else {\n                return null;\n            }\n        };\n        // This chart displays cost and infrastructure cost\n        this.getCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, trend.type, 'date', 'infrastructureCost');\n            const previousInfrastructureData = transformReport(previousReport, trend.type, 'date', 'infrastructureCost');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', computedReportItem);\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', computedReportItem);\n            return (React.createElement(ReportSummaryCost, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentUsageData, currentInfrastructureCostData: currentInfrastructureData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousCostData: previousUsageData, previousInfrastructureCostData: previousInfrastructureData, title: title }));\n        };\n        // This chart displays cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, details, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementaryCost, etc.\n            // Data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousData: previousData, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: units }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height) => {\n            const { currentReport, previousReport, t, trend } = this.props;\n            const units = this.getUnits();\n            const title = t(trend.titleKey, { units: t(`units.${units}`) });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details } = this.props;\n            const units = this.getUnits();\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, costLabel: this.getDetailsLabel(details.costKey, units), formatOptions: details.formatOptions, formatValue: formatValue, report: currentReport, requestLabel: this.getDetailsLabel(details.requestKey, units), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey, units) }));\n        };\n        this.getDetailsLabel = (key, units) => {\n            const { t } = this.props;\n            return key ? t(key, { units: t(`units.${units}`) }) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return (React.createElement(Link, { to: this.buildDetailsLink(currentTab), onClick: this.handleInsightsNavClick }, this.getDetailsLinkTitle(currentTab)));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, true)));\n        };\n        this.getSubTitle = () => {\n            const { t } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'D');\n            const startDate = formatDate(startOfMonth(today), 'D');\n            return t('aws_dashboard.widget_subtitle', {\n                count: getDate(today),\n                endDate,\n                month,\n                startDate,\n            });\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, details, getIdKeyForTab, tabsReport, topItems, trend, } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem].total) {\n                    totalValue = tabsReport.meta.total[computedReportItem].total.value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: topItems.formatOptions, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: details.units ? details.units : this.getUnits(), value: reportItem[computedReportItem] }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getTitle = () => {\n            const { t, titleKey } = this.props;\n            const today = new Date();\n            const month = getMonth(today);\n            const endDate = formatDate(today, 'Do');\n            const startDate = formatDate(startOfMonth(today), 'Do');\n            return t(titleKey, { endDate, month, startDate });\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            if (details.units) {\n                return details.units;\n            }\n            let units;\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                units = hasUsage\n                    ? unitLookupKey(currentReport.meta.total.usage.units)\n                    : '';\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem].total;\n                units = hasCost\n                    ? unitLookupKey(currentReport.meta.total[computedReportItem].total.units)\n                    : '';\n            }\n            return units;\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, subTitle: this.getSubTitle(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight),\n                Boolean(availableTabs) && (React.createElement(\"div\", { style: styles.tabs }, this.getTabs()))));\n        };\n        this.handleInsightsNavClick = () => {\n            const { details } = this.props;\n            if (details.appNavPath) {\n                insights.chrome.appNavClick({\n                    id: details.appNavPath,\n                    secondaryNav: true,\n                });\n            }\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchReports, id, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        fetchReports(widgetId);\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal\n            ? this.getHorizontalLayout()\n            : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase, };\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardActions, awsCloudDashboardSelectors, } from 'store/dashboard/awsCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsCloudDashboardActions.fetchWidgetReports,\n    updateTab: awsCloudDashboardActions.changeWidgetTab,\n};\nconst AwsCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCloudDashboardSelectors } from 'store/dashboard/awsCloudDashboard';\nimport { AwsCloudDashboardWidget } from './awsCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsCloudDashboardWidget,\n        selectWidgets: awsCloudDashboardSelectors.selectWidgets(state),\n        widgets: awsCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/dashboard/awsDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardActions, azureCloudDashboardSelectors, } from 'store/dashboard/azureCloudDashboard';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: reportSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureCloudDashboardActions.fetchWidgetReports,\n    updateTab: azureCloudDashboardActions.changeWidgetTab,\n};\nconst AzureCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureCloudDashboardSelectors } from 'store/dashboard/azureCloudDashboard';\nimport { AzureCloudDashboardWidget } from './azureCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureCloudDashboardWidget,\n        selectWidgets: azureCloudDashboardSelectors.selectWidgets(state),\n        widgets: azureCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureCloudDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors, } from 'store/dashboard/azureDashboard';\nimport { azureReportsSelectors } from 'store/reports/azureReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: azureReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: azureReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { ocpCloudReportsSelectors } from 'store/reports/ocpCloudReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 180,\n    containerAltHeight: 275,\n};\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/dashboard/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/reports/ocpReports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpDashboard;\n","export const chartStyles = {\n    chartAltHeight: 180,\n    containerAltHeight: 275,\n};\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardActions, ocpSupplementaryDashboardSelectors, } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { ocpReportsSelectors } from 'store/reports/ocpReports';\nimport { chartStyles } from './ocpSupplementaryDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpSupplementaryDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpSupplementaryDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpSupplementaryDashboardActions.fetchWidgetReports,\n    updateTab: ocpSupplementaryDashboardActions.changeWidgetTab,\n};\nconst OcpSupplementaryDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpSupplementaryDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpSupplementaryDashboardSelectors } from 'store/dashboard/ocpSupplementaryDashboard';\nimport { OcpSupplementaryDashboardWidget } from './ocpSupplementaryDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpSupplementaryDashboardWidget,\n        selectWidgets: ocpSupplementaryDashboardSelectors.selectWidgets(state),\n        widgets: ocpSupplementaryDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpSupplementaryDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpSupplementaryDashboard;\n","import { DashboardWidgetBase, } from 'pages/dashboard/components/dashboardWidgetBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardActions, ocpUsageDashboardSelectors, } from 'store/dashboard/ocpUsageDashboard';\nimport { ocpCloudReportsSelectors } from 'store/reports/ocpCloudReports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpUsageDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpUsageDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.current), currentReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current), previousReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabsReport: ocpCloudReportsSelectors.selectReport(state, widget.reportType, queries.tabs), tabsReportFetchStatus: ocpCloudReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpUsageDashboardActions.fetchWidgetReports,\n    updateTab: ocpUsageDashboardActions.changeWidgetTab,\n};\nconst OcpUsageDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpUsageDashboardWidget };\n","import { DashboardBase } from 'pages/dashboard/components/dashboardBase';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpUsageDashboardSelectors } from 'store/dashboard/ocpUsageDashboard';\nimport { OcpUsageDashboardWidget } from './ocpUsageDashboardWidget';\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        DashboardWidget: OcpUsageDashboardWidget,\n        selectWidgets: ocpUsageDashboardSelectors.selectWidgets(state),\n        widgets: ocpUsageDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpUsageDashboard = translate()(connect(mapStateToProps, {})(DashboardBase));\nexport default OcpUsageDashboard;\n","import { global_FontSize_md, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = {\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    perspective: {\n        marginBottom: global_spacer_lg.value,\n        marginTop: global_spacer_lg.value,\n    },\n    tabs: {\n        marginTop: global_spacer_lg.value,\n    },\n};\nexport const headerOverride = css `\n  &.pf-c-page__main-section {\n    --pf-c-page__main-section--PaddingBottom: 0;\n  }\n`;\n","import { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, t } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, t(option.label))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, t } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = t(option.label);\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = event => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { t } = this.props;\n        const { isPerspectiveOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(\"label\", { style: styles.perspectiveLabel }, t('overview.perspective.label')),\n            React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst Perspective = translate()(PerspectiveBase);\nexport { Perspective };\n","import { Popover, Tab, TabContent, Tabs, Title, TitleSize, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport AwsCloudDashboard from 'pages/dashboard/awsCloudDashboard/awsCloudDashboard';\nimport AwsDashboard from 'pages/dashboard/awsDashboard/awsDashboard';\nimport AzureCloudDashboard from 'pages/dashboard/azureCloudDashboard/azureCloudDashboard';\nimport AzureDashboard from 'pages/dashboard/azureDashboard/azureDashboard';\nimport OcpCloudDashboard from 'pages/dashboard/ocpCloudDashboard/ocpCloudDashboard';\nimport OcpDashboard from 'pages/dashboard/ocpDashboard/ocpDashboard';\nimport OcpSupplementaryDashboard from 'pages/dashboard/ocpSupplementaryDashboard/ocpSupplementaryDashboard';\nimport OcpUsageDashboard from 'pages/dashboard/ocpUsageDashboard/ocpUsageDashboard';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { headerOverride, styles } from './overview.styles';\nimport { Perspective } from './perspective';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [\n    { label: 'overview.perspective.all', value: 'all' },\n    { label: 'overview.perspective.supplementary', value: 'supplementary' },\n];\n// Infrastructure options\nconst infrastructureOptions = [\n    { label: 'overview.perspective.all_cloud', value: 'all_cloud' },\n];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [\n    { label: 'overview.perspective.aws', value: 'aws' },\n    { label: 'overview.perspective.aws_cloud', value: 'aws_cloud' },\n];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [\n    { label: 'overview.perspective.azure', value: 'azure' },\n    { label: 'overview.perspective.azure_cloud', value: 'azure_cloud' },\n];\n// Infrastructure Ocp options\nconst infrastructureOcpOptions = [\n    { label: 'overview.perspective.ocp_usage', value: 'ocp_usage' },\n];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n            currentInfrastructurePerspective: infrastructureOptions[0].value,\n            currentOcpPerspective: ocpOptions[0].value,\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const availableTabs = [];\n            const isAwsAvailable = awsProviders && awsProviders.meta && awsProviders.meta.count;\n            const isAzureAvailable = azureProviders && azureProviders.meta && azureProviders.meta.count;\n            const isOcpAvailable = ocpProviders && ocpProviders.meta && ocpProviders.meta.count;\n            const isOcpCloudAvailable = isOcpAvailable && isAwsAvailable;\n            if (isOcpAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (isAwsAvailable || isAzureAvailable || isOcpCloudAvailable) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n        };\n        this.getPerspective = () => {\n            const { awsProviders, azureProviders, ocpProviders } = this.props;\n            const { currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            let currentItem = currentOcpPerspective;\n            let options = [...ocpOptions];\n            // Dynamically show options if providers are available\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                const isAwsAvailable = awsProviders && awsProviders.meta && awsProviders.meta.count;\n                const isAzureAvailable = azureProviders && azureProviders.meta && azureProviders.meta.count;\n                const isOcpAvailable = ocpProviders && ocpProviders.meta && ocpProviders.meta.count;\n                currentItem = currentInfrastructurePerspective;\n                options = [\n                    ...infrastructureOptions,\n                    ...(isAwsAvailable && infrastructureAwsOptions),\n                    ...(isAzureAvailable && infrastructureAzureOptions),\n                    ...(isOcpAvailable && infrastructureOcpOptions),\n                ];\n            }\n            return (React.createElement(Perspective, { currentItem: currentItem, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: this.getTabTitle(tab) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective, } = this.state;\n            if (activeTabKey !== index) {\n                return null;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"all_cloud\" /* allCloud */) {\n                    return React.createElement(OcpCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    return React.createElement(AwsDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"aws_cloud\" /* awsFiltered */) {\n                    return React.createElement(AwsCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    return React.createElement(AzureDashboard, null);\n                }\n                else if (currentInfrastructurePerspective ===\n                    \"azure_cloud\" /* azureCloud */) {\n                    return React.createElement(AzureCloudDashboard, null);\n                }\n                else if (currentInfrastructurePerspective === \"ocp_usage\" /* ocpUsage */) {\n                    return React.createElement(OcpUsageDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpCloudDashboard, null); // default\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                if (currentOcpPerspective === \"all\" /* all */) {\n                    return React.createElement(OcpDashboard, null);\n                }\n                else if (currentOcpPerspective === \"supplementary\" /* supplementary */) {\n                    return React.createElement(OcpSupplementaryDashboard, null);\n                }\n                else {\n                    return React.createElement(OcpDashboard, null); // default\n                }\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return t('overview.infrastructure');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.handlePerspectiveClick = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            }), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    render() {\n        const { awsProviders, awsProvidersError, awsProvidersFetchStatus, azureProviders, azureProvidersError, azureProvidersFetchStatus, ocpProviders, ocpProvidersError, ocpProvidersFetchStatus, t, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const error = awsProvidersError || azureProvidersError || ocpProvidersError;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */;\n        const noAwsProviders = awsProviders !== undefined &&\n            awsProviders.meta !== undefined &&\n            awsProviders.meta.count === 0 &&\n            awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = azureProviders !== undefined &&\n            azureProviders.meta !== undefined &&\n            azureProviders.meta.count === 0 &&\n            azureProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = ocpProviders !== undefined &&\n            ocpProviders.meta !== undefined &&\n            ocpProviders.meta.count === 0 &&\n            ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noOcpProviders;\n        const showTabs = !(error || noProviders || isLoading);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"section\", { className: `pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light ${showTabs ? headerOverride : ''}` },\n                React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                    React.createElement(Title, { size: TitleSize['2xl'] },\n                        t('overview.title'),\n                        Boolean(showTabs) && (React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_details.supplementary_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp_cloud')),\n                                    React.createElement(\"p\", null, t('overview.ocp_cloud_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.ocp')),\n                                    React.createElement(\"p\", null, t('overview.ocp_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.aws')),\n                                    React.createElement(\"p\", null, t('overview.aws_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('overview.azure')),\n                                    React.createElement(\"p\", null, t('overview.azure_desc'))) },\n                                React.createElement(InfoCircleIcon, { style: styles.info, onClick: this.handlePopoverClick })))))),\n                Boolean(showTabs) && (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                    React.createElement(\"div\", { style: styles.perspective }, this.getPerspective())))),\n            React.createElement(\"section\", { className: \"pf-l-page__main-section pf-c-page__main-section\", \"page-type\": \"cost-management-overview\" }, Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (this.getTabContent(availableTabs)))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    return {\n        awsProviders,\n        awsProvidersError,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersError,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        ocpProviders,\n        ocpProvidersError,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n    };\n});\nconst Overview = translate()(connect(mapStateToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n"],"sourceRoot":""}