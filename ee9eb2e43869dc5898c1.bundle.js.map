{"version":3,"file":"ee9eb2e43869dc5898c1.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/api.ts","webpack://koku-ui/./src/api/costModels.ts","webpack://koku-ui/./src/api/providers.ts","webpack://koku-ui/./src/api/queries/awsQuery.ts","webpack://koku-ui/./src/api/queries/azureQuery.ts","webpack://koku-ui/./src/api/queries/gcpQuery.ts","webpack://koku-ui/./src/api/queries/ibmQuery.ts","webpack://koku-ui/./src/api/queries/ocpCloudQuery.ts","webpack://koku-ui/./src/api/queries/ocpQuery.ts","webpack://koku-ui/./src/api/queries/query.ts","webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/api/reports/awsOcpReports.ts","webpack://koku-ui/./src/api/reports/awsReports.ts","webpack://koku-ui/./src/api/reports/azureOcpReports.ts","webpack://koku-ui/./src/api/reports/azureReports.ts","webpack://koku-ui/./src/api/reports/gcpOcpReports.ts","webpack://koku-ui/./src/api/reports/gcpReports.ts","webpack://koku-ui/./src/api/reports/ibmReports.ts","webpack://koku-ui/./src/api/reports/ocpCloudReports.ts","webpack://koku-ui/./src/api/reports/ocpReports.ts","webpack://koku-ui/./src/api/resources/awsOcpResource.ts","webpack://koku-ui/./src/api/resources/awsResource.ts","webpack://koku-ui/./src/api/resources/azureOcpResource.ts","webpack://koku-ui/./src/api/resources/azureResource.ts","webpack://koku-ui/./src/api/resources/gcpOcpResource.ts","webpack://koku-ui/./src/api/resources/gcpResource.ts","webpack://koku-ui/./src/api/resources/ibmResource.ts","webpack://koku-ui/./src/api/resources/ocpResource.ts","webpack://koku-ui/./src/api/resources/resourceUtils.ts","webpack://koku-ui/./src/components/pageTitle/pageTitle.tsx","webpack://koku-ui/./src/pages/state/maintenance/maintenanceState.tsx","webpack://koku-ui/./src/pages/state/maintenance/index.ts","webpack://koku-ui/./src/pages/state/maintenance/maintenance.tsx","webpack://koku-ui/./src/app.tsx","webpack://koku-ui/./src/components/async/asyncComponent.tsx","webpack://koku-ui/./src/components/exports/exports.styles.ts","webpack://koku-ui/./src/components/exports/exportsLink.tsx","webpack://koku-ui/./src/components/i18n/intl.ts","webpack://koku-ui/./src/pages/state/notAuthorized/notAuthorizedState.tsx","webpack://koku-ui/./src/pages/state/notAuthorized/index.ts","webpack://koku-ui/./src/pages/state/notAuthorized/notAuthorized.tsx","webpack://koku-ui/./src/components/permissions/permissions.tsx","webpack://koku-ui/./src/components/permissions/permissionsComponent.tsx","webpack://koku-ui/./src/components/permissions/index.ts","webpack://koku-ui/./src/locales/messages.ts","webpack://koku-ui/./src/pages/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/costModels/createCostModelWizard/parseError.ts","webpack://koku-ui/./src/pages/state/loading/loading.tsx","webpack://koku-ui/./src/pages/state/loading/index.ts","webpack://koku-ui/./src/pages/state/notAvailable/notAvailable.tsx","webpack://koku-ui/./src/pages/state/notAvailable/index.ts","webpack://koku-ui/./src/routes.tsx","webpack://koku-ui/./src/store/accountSettings/accountSettingsCommon.ts","webpack://koku-ui/./src/store/accountSettings/accountSettingsActions.ts","webpack://koku-ui/./src/api/accountSettings.ts","webpack://koku-ui/./src/store/accountSettings/accountSettingsReducer.ts","webpack://koku-ui/./src/store/accountSettings/accountSettingsSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/awsCostOverview/awsCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/azureCostOverview/azureCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/gcpCostOverview/gcpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ibmCostOverview/ibmCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewCommon.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewWidgets.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewReducer.ts","webpack://koku-ui/./src/store/breakdown/costOverview/ocpCostOverview/ocpCostOverviewSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/awsHistoricalData/awsHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/azureHistoricalData/azureHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/gcpHistoricalData/gcpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ibmHistoricalData/ibmHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataCommon.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataWidgets.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataReducer.ts","webpack://koku-ui/./src/store/breakdown/historicalData/ocpHistoricalData/ocpHistoricalDataSelectors.ts","webpack://koku-ui/./src/store/common.ts","webpack://koku-ui/./src/store/costModels/actions.ts","webpack://koku-ui/./src/store/costModels/reducer.ts","webpack://koku-ui/./src/store/costModels/selectors.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsDashboard/awsDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/awsOcpDashboard/awsOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureDashboard/azureDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/azureOcpDashboard/azureOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/gcpDashboard/gcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/gcpOcpDashboard/gcpOcpDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ibmDashboard/ibmDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpCloudDashboard/ocpCloudDashboardReducer.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardCommon.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardSelectors.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardActions.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardWidgets.ts","webpack://koku-ui/./src/store/dashboard/ocpDashboard/ocpDashboardReducer.ts","webpack://koku-ui/./src/store/djangoUtils/pagination.ts","webpack://koku-ui/./src/store/djangoUtils/query.ts","webpack://koku-ui/./src/store/export/exportCommon.ts","webpack://koku-ui/./src/store/export/exportSelectors.ts","webpack://koku-ui/./src/store/export/exportActions.tsx","webpack://koku-ui/./src/api/export/exportUtils.ts","webpack://koku-ui/./src/api/export/awsExport.ts","webpack://koku-ui/./src/api/export/awsOcpExport.ts","webpack://koku-ui/./src/api/export/azureExport.ts","webpack://koku-ui/./src/api/export/azureOcpExport.ts","webpack://koku-ui/./src/api/export/gcpExport.ts","webpack://koku-ui/./src/api/export/gcpOcpExport.ts","webpack://koku-ui/./src/api/export/ibmExport.ts","webpack://koku-ui/./src/api/export/ocpCloudExport.ts","webpack://koku-ui/./src/api/export/ocpExport.ts","webpack://koku-ui/./src/store/export/exportReducer.ts","webpack://koku-ui/./src/api/forecasts/awsForecast.ts","webpack://koku-ui/./src/api/forecasts/awsOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/azureForecast.ts","webpack://koku-ui/./src/api/forecasts/azureOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/gcpForecast.ts","webpack://koku-ui/./src/api/forecasts/gcpOcpForecast.ts","webpack://koku-ui/./src/api/forecasts/ibmForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpCloudForecast.ts","webpack://koku-ui/./src/api/forecasts/ocpForecast.ts","webpack://koku-ui/./src/store/forecasts/forecastCommon.ts","webpack://koku-ui/./src/store/forecasts/forecastSelectors.ts","webpack://koku-ui/./src/store/forecasts/forecastActions.ts","webpack://koku-ui/./src/api/forecasts/forecastUtils.ts","webpack://koku-ui/./src/store/forecasts/forecastReducer.ts","webpack://koku-ui/./src/store/priceList/reducer.ts","webpack://koku-ui/./src/store/priceList/actions.ts","webpack://koku-ui/./src/store/rootReducer.ts","webpack://koku-ui/./src/store/store.ts","webpack://koku-ui/./src/store/metrics/actions.ts","webpack://koku-ui/./src/api/metrics.ts","webpack://koku-ui/./src/store/metrics/reducer.ts","webpack://koku-ui/./src/store/metrics/selectors.ts","webpack://koku-ui/./src/api/orgs/awsOrgs.ts","webpack://koku-ui/./src/store/orgs/orgCommon.ts","webpack://koku-ui/./src/store/orgs/orgSelectors.ts","webpack://koku-ui/./src/store/orgs/orgActions.ts","webpack://koku-ui/./src/api/orgs/orgUtils.ts","webpack://koku-ui/./src/store/orgs/orgReducer.ts","webpack://koku-ui/./src/store/providers/providersCommon.ts","webpack://koku-ui/./src/store/providers/providersActions.ts","webpack://koku-ui/./src/store/providers/providersReducer.ts","webpack://koku-ui/./src/store/providers/providersSelectors.ts","webpack://koku-ui/./src/store/rbac/actions.ts","webpack://koku-ui/./src/api/rbac.ts","webpack://koku-ui/./src/store/rbac/reducer.ts","webpack://koku-ui/./src/store/rbac/selectors.ts","webpack://koku-ui/./src/api/reports/ocpUsageReports.ts","webpack://koku-ui/./src/store/reports/reportCommon.ts","webpack://koku-ui/./src/store/reports/reportSelectors.ts","webpack://koku-ui/./src/store/reports/reportActions.ts","webpack://koku-ui/./src/api/reports/reportUtils.ts","webpack://koku-ui/./src/store/reports/reportReducer.ts","webpack://koku-ui/./src/store/resources/resourceCommon.ts","webpack://koku-ui/./src/store/resources/resourceSelectors.ts","webpack://koku-ui/./src/store/resources/resourceActions.ts","webpack://koku-ui/./src/store/resources/resourceReducer.ts","webpack://koku-ui/./src/store/sourceSettings/actions.ts","webpack://koku-ui/./src/store/sourceSettings/reducer.ts","webpack://koku-ui/./src/store/sourceSettings/selectors.ts","webpack://koku-ui/./src/api/tags/awsOcpTags.ts","webpack://koku-ui/./src/api/tags/awsTags.ts","webpack://koku-ui/./src/api/tags/azureOcpTags.ts","webpack://koku-ui/./src/api/tags/azureTags.ts","webpack://koku-ui/./src/api/tags/gcpOcpTags.ts","webpack://koku-ui/./src/api/tags/gcpTags.ts","webpack://koku-ui/./src/api/tags/ibmTags.ts","webpack://koku-ui/./src/api/tags/ocpCloudTags.ts","webpack://koku-ui/./src/api/tags/ocpTags.ts","webpack://koku-ui/./src/store/tags/tagCommon.ts","webpack://koku-ui/./src/store/tags/tagSelectors.ts","webpack://koku-ui/./src/store/tags/tagActions.ts","webpack://koku-ui/./src/api/tags/tagUtils.ts","webpack://koku-ui/./src/store/tags/tagReducer.ts","webpack://koku-ui/./src/store/ui/uiReducer.ts","webpack://koku-ui/./src/store/ui/uiSelectors.ts","webpack://koku-ui/./src/store/ui/uiActions.ts","webpack://koku-ui/./src/store/userAccess/userAccessCommon.ts","webpack://koku-ui/./src/store/userAccess/userAccessActions.ts","webpack://koku-ui/./src/api/userAccess.ts","webpack://koku-ui/./src/store/userAccess/userAccessReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessSelectors.ts","webpack://koku-ui/./src/utils/feature.ts","webpack://koku-ui/./src/utils/cookie.ts","webpack://koku-ui/./src/utils/localStorage.ts","webpack://koku-ui/./src/utils/paths.ts","webpack://koku-ui/./src/utils/userAccess.ts"],"sourcesContent":["import { authInterceptor as insightsAuthInterceptor } from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nexport function initApi({ version }) {\n    axios.defaults.baseURL = `/api/cost-management/${version}/`;\n    axios.interceptors.request.use(authInterceptor);\n    axios.interceptors.request.use(insightsAuthInterceptor);\n}\nexport function authInterceptor(reqConfig) {\n    return Object.assign(Object.assign({}, reqConfig), { headers: Object.assign({}, reqConfig.headers) });\n}\n","import axios from 'axios';\nexport function fetchCostModels(query = '') {\n    return axios.get(`cost-models/${query && '?'}${query}`);\n}\nexport function fetchCostModel(uuid) {\n    return axios.get(`cost-models/${uuid}/`);\n}\nexport function addCostModel(request) {\n    return axios.post('cost-models/', request);\n}\nexport function updateCostModel(uuid, request) {\n    return axios.put(`cost-models/${uuid}/`, request);\n}\nexport function deleteCostModel(uuid) {\n    return axios.delete(`cost-models/${uuid}/`);\n}\n","import axios from 'axios';\nexport function fetchProviders(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`sources/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`sources/${queryString}`);\n    }\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import * as utils from './query';\n// filter_by props are converted and returned with logical OR/AND prefix\nexport function getQuery(query) {\n    return utils.getQuery(query);\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return utils.getQueryRoute(query);\n}\nexport function parseQuery(query) {\n    return utils.parseQuery(query);\n}\n","import { parse, stringify } from 'qs';\nexport const logicalOrPrefix = 'or:'; // logical OR prefix for group_by\nexport const logicalAndPrefix = 'and:'; // logical AND prefix for group_by\nexport const tagPrefix = 'tag:'; // Tag prefix for group_by\nexport const breakdownDescKey = 'breakdown_desc'; // Used to display a description in the breakdown header\nexport const breakdownGroupByKey = 'breakdown_group_by'; // Used to display a breadcrumb in the breakdown header\nexport const breakdownTitleKey = 'breakdown_title'; // Used to display a title in the breakdown header\nexport const orgUnitIdKey = 'org_unit_id'; // Org unit ID for group_by\nexport const orgUnitNameKey = 'org_unit_name'; // Org unit name for group_by\nexport const tagKey = 'tag'; // Tag key for group_by\n// Converts filter_by props to filter props\nexport function convertFilterBy(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined });\n    for (const key of Object.keys(query.filter_by)) {\n        if (!newQuery.filter) {\n            newQuery.filter = {};\n        }\n        if (newQuery.filter[key]) {\n            if (!Array.isArray(newQuery.filter[key])) {\n                newQuery.filter[key] = newQuery.filter[key] !== '*' ? [newQuery.filter[key]] : [];\n            }\n            newQuery.filter[key].push(query.filter_by[key]);\n        }\n        else {\n            newQuery.filter[key] = query.filter_by[key];\n        }\n    }\n    return newQuery;\n}\n// filter_by props are converted\nexport function getQuery(query) {\n    return stringify(convertFilterBy(query), { encode: false, indices: false });\n}\n// filter_by props are not converted\nexport function getQueryRoute(query) {\n    return stringify(query, { encode: false, indices: false });\n}\n// Returns given key without logical OR/AND prefix\nfunction parseKey(val) {\n    let key = val;\n    let index = val.indexOf(logicalOrPrefix);\n    if (index !== -1) {\n        key = val.substring(index + logicalOrPrefix.length);\n    }\n    else {\n        index = val.indexOf(logicalAndPrefix);\n        if (index !== -1) {\n            key = val.substring(index + logicalAndPrefix.length);\n        }\n    }\n    return key;\n}\n// Returns query without filter_by prefix\nexport function parseFilterByPrefix(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        const filterByKey = parseKey(key);\n        newQuery.filter_by[filterByKey] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function parseGroupByPrefix(query) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        const groupByKey = parseKey(key);\n        newQuery.group_by[groupByKey] = query.group_by[key];\n    }\n    return newQuery;\n}\nexport function parseQuery(query) {\n    const newQuery = parse(query, { ignoreQueryPrefix: true });\n    return parseFilterByPrefix(parseGroupByPrefix(newQuery));\n}\n","import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/aws/costs/',\n    [\"database\" /* database */]: 'reports/aws/costs/',\n    [\"network\" /* network */]: 'reports/aws/costs/',\n    [\"storage\" /* storage */]: 'reports/aws/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/aws/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/azure/costs/',\n    [\"database\" /* database */]: 'reports/azure/costs/',\n    [\"network\" /* network */]: 'reports/azure/costs/',\n    [\"storage\" /* storage */]: 'reports/azure/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/azure/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/gcp/costs/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/gcp/costs/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\n// Todo: update to use ibm backend apis when they become available\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/gcp/costs/',\n    [\"database\" /* database */]: 'reports/gcp/costs/',\n    [\"network\" /* network */]: 'reports/gcp/costs/',\n    [\"storage\" /* storage */]: 'reports/gcp/storage/',\n    [\"instance_type\" /* instanceType */]: 'reports/gcp/instance-types/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"database\" /* database */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"instance_type\" /* instanceType */]: 'reports/openshift/infrastructures/all/instance-types/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"network\" /* network */]: 'reports/openshift/infrastructures/all/costs/',\n    [\"storage\" /* storage */]: 'reports/openshift/infrastructures/all/storage/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/aws-accounts/',\n    [\"region\" /* region */]: 'resource-types/aws-regions/',\n    [\"service\" /* service */]: 'resource-types/aws-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?openshift=true&${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?openshift=true&${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/aws-accounts/',\n    [\"region\" /* region */]: 'resource-types/aws-regions/',\n    [\"service\" /* service */]: 'resource-types/aws-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"resource_location\" /* resourceLocation */]: 'resource-types/azure-regions/',\n    [\"subscription_guid\" /* subscriptionGuid */]: 'resource-types/azure-subscription-guids/',\n    [\"service_name\" /* serviceName */]: 'resource-types/azure-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?openshift=true&${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?openshift=true&${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"resource_location\" /* resourceLocation */]: 'resource-types/azure-regions/',\n    [\"subscription_guid\" /* subscriptionGuid */]: 'resource-types/azure-subscription-guids/',\n    [\"service_name\" /* serviceName */]: 'resource-types/azure-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"gcp_project\" /* gcpProject */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?openshift=true&${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?openshift=true&${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"gcp_project\" /* gcpProject */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"account\" /* account */]: 'resource-types/gcp-accounts/',\n    [\"project\" /* project */]: 'resource-types/gcp-projects/',\n    [\"region\" /* region */]: 'resource-types/gcp-regions/',\n    [\"service\" /* service */]: 'resource-types/gcp-services/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ResourceTypePaths = {\n    [\"cluster\" /* cluster */]: 'resource-types/openshift-clusters/',\n    [\"node\" /* node */]: 'resource-types/openshift-nodes/',\n    [\"project\" /* project */]: 'resource-types/openshift-projects/',\n};\nexport function runResource(resourceType, query) {\n    const insights = window.insights;\n    const path = ResourceTypePaths[resourceType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import { runResource as runAwsOcpResource } from './awsOcpResource';\nimport { runResource as runAwsResource } from './awsResource';\nimport { runResource as runAzureOcpResource } from './azureOcpResource';\nimport { runResource as runAzureResource } from './azureResource';\nimport { runResource as runGcpOcpResource } from './gcpOcpResource';\nimport { runResource as runGcpResource } from './gcpResource';\nimport { runResource as runIbmResource } from './ibmResource';\nimport { runResource as runOcpResource } from './ocpResource';\n// Temporary check until typeahead is implemented for all filters\nexport function isResourceTypeValid(resourcePathsType, resourceType) {\n    let result = false;\n    if (resourcePathsType === \"aws\" /* aws */ ||\n        resourcePathsType === \"aws_ocp\" /* awsOcp */ ||\n        resourcePathsType === \"azure\" /* azure */ ||\n        resourcePathsType === \"azure_ocp\" /* azureOcp */ ||\n        resourcePathsType === \"gcp\" /* gcp */ ||\n        resourcePathsType === \"gcp_ocp\" /* gcpOcp */ ||\n        resourcePathsType === \"ibm\" /* ibm */ ||\n        resourcePathsType === \"ibm_ocp\" /* ibmOcp */ ||\n        resourcePathsType === \"ocp\" /* ocp */ ||\n        resourcePathsType === \"ocp_cloud\" /* ocpCloud */) {\n        switch (resourceType) {\n            case \"account\" /* account */:\n            case \"cluster\" /* cluster */:\n            case \"gcp_project\" /* gcpProject */:\n            case \"node\" /* node */:\n            case \"project\" /* project */:\n            case \"region\" /* region */:\n            case \"resource_location\" /* resourceLocation */:\n            case \"service\" /* service */:\n            case \"service_name\" /* serviceName */:\n            case \"subscription_guid\" /* subscriptionGuid */:\n                result = true;\n                break;\n        }\n    }\n    return result;\n}\nexport function runResource(resourcePathsType, resourceType, query) {\n    let forecast;\n    switch (resourcePathsType) {\n        case \"aws\" /* aws */:\n            forecast = runAwsResource(resourceType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            forecast = runAwsOcpResource(resourceType, query);\n            break;\n        case \"azure\" /* azure */:\n            forecast = runAzureResource(resourceType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            forecast = runAzureOcpResource(resourceType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            forecast = runGcpResource(resourceType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            forecast = runGcpOcpResource(resourceType, query);\n            break;\n        case \"ibm\" /* ibm */:\n            forecast = runIbmResource(resourceType, query);\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            forecast = runOcpResource(resourceType, query);\n            break;\n    }\n    return forecast;\n}\n","import messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router';\nimport { paths, routes } from 'routes';\nclass PageTitleBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n    }\n    getPath() {\n        const { location } = this.props;\n        // cost models may include :uuid\n        const _pathname = location.pathname && location.pathname.startsWith(paths.costModels) ? paths.costModels : location.pathname;\n        const currRoute = routes.find(({ path }) => path === _pathname);\n        return currRoute ? currRoute.path : undefined;\n    }\n    getPageTitle() {\n        const path = this.getPath();\n        switch (path) {\n            case paths.explorer:\n                return messages.PageTitleExplorer;\n            case paths.overview:\n                return messages.PageTitleOverview;\n            case paths.awsDetails:\n            case paths.awsDetailsBreakdown:\n                return messages.PageTitleAWS;\n            case paths.azureDetails:\n            case paths.azureDetailsBreakdown:\n                return messages.PageTitleAzure;\n            case paths.costModels:\n                return messages.PageTitleCostModels;\n            case paths.gcpDetails:\n            case paths.gcpDetailsBreakdown:\n                return messages.PageTitleGCP;\n            case paths.ibmDetails:\n            case paths.ibmDetailsBreakdown:\n                return messages.PageTitleIBM;\n            case paths.ocpDetails:\n            case paths.ocpDetailsBreakdown:\n                return messages.PageTitleOCP;\n            default:\n                return messages.PageTitleDefault;\n        }\n    }\n    render() {\n        const { children = null, intl } = this.props;\n        // Set page title\n        document.title = intl.formatMessage(this.getPageTitle());\n        return children;\n    }\n}\nconst PageTitle = injectIntl(withRouter(PageTitleBase));\nexport { PageTitle };\n","import { Stack, StackItem } from '@patternfly/react-core';\nimport Maintenance from '@redhat-cloud-services/frontend-components/Maintenance';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass MaintenanceStateBase extends React.Component {\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(Maintenance, { description: React.createElement(Stack, null,\n                React.createElement(StackItem, null, intl.formatMessage(messages.MaintenanceEmptyStateDesc)),\n                React.createElement(StackItem, null, intl.formatMessage(messages.MaintenanceEmptyStateInfo, {\n                    url: (React.createElement(\"a\", { href: intl.formatMessage(messages.RedHatStatusUrl), rel: \"noreferrer\", target: \"_blank\" }, \"\\\"status page\\\"\")),\n                })),\n                React.createElement(StackItem, null, intl.formatMessage(messages.MaintenanceEmptyStateThanks))) }));\n    }\n}\nconst MaintenanceState = injectIntl(MaintenanceStateBase);\nexport { MaintenanceState };\n","import Maintenance from './maintenance';\nexport default Maintenance;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { MaintenanceState } from './maintenanceState';\nconst Maintenance = () => {\n    return (React.createElement(Main, null,\n        React.createElement(MaintenanceState, null)));\n};\nexport default withRouter(Maintenance);\n","import { PageTitle } from 'components/pageTitle/pageTitle';\nimport Maintenance from 'pages/state/maintenance';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { createMapStateToProps } from 'store/common';\nimport { Routes, routes } from './routes';\nexport class App extends React.Component {\n    constructor() {\n        super(...arguments);\n        // Todo: Will Insights provide a flag to enable maintenance mode?\n        // https://docs.google.com/document/d/1VLs7vFczWUzyIpH6EUsTEpJugDsjeuh4a_azs6IJbC0/edit#\n        this.state = { maintenanceMode: false };\n    }\n    componentDidMount() {\n        const { history, location } = this.props;\n        insights.chrome.init();\n        insights.chrome.identifyApp('cost-management');\n        if (location && location.pathname) {\n            insights.chrome.appAction(location.pathname);\n        }\n        this.appNav = insights.chrome.on('APP_NAVIGATION', event => {\n            var _a, _b;\n            let currRoute = routes.find(({ path }) => path.includes(event.navId));\n            /**\n             * Condition is required until new nav changes are propagated to each environment.\n             * Eventually will be avaiable as a hook value to replace event listening.\n             */\n            if (!currRoute && typeof ((_a = event === null || event === void 0 ? void 0 : event.domEvent) === null || _a === void 0 ? void 0 : _a.href) === 'string') {\n                const appPathname = (_b = event === null || event === void 0 ? void 0 : event.domEvent) === null || _b === void 0 ? void 0 : _b.href.replace(this.props.basename.replace(/^\\/beta\\//, '/'), '/');\n                currRoute = routes.find(({ path }) => path.includes(appPathname));\n            }\n            if (event.domEvent && currRoute) {\n                history.push(currRoute.path);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { location } = this.props;\n        if (location && location.pathname !== prevProps.location.pathname) {\n            window.scrollTo(0, 0);\n            insights.chrome.appAction(location.pathname);\n        }\n    }\n    componentWillUnmount() {\n        this.appNav();\n        insights.chrome.appAction(undefined);\n    }\n    render() {\n        const { maintenanceMode } = this.state;\n        const route = maintenanceMode ? React.createElement(Maintenance, null) : React.createElement(Routes, null);\n        return React.createElement(PageTitle, null, route);\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = { history };\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(App);\n","import React from 'react';\nexport function asyncComponent(loader) {\n    let LoadedComponent = null;\n    class Async extends React.Component {\n        constructor() {\n            super(...arguments);\n            this.state = {\n                isLoading: !LoadedComponent,\n            };\n        }\n        componentDidMount() {\n            if (!this.state.isLoading) {\n                return;\n            }\n            loader().then(Comp => {\n                LoadedComponent = Comp.default ? Comp.default : Comp;\n                this.setState({ isLoading: false });\n            });\n        }\n        render() {\n            const { isLoading } = this.state;\n            return isLoading ? null : React.createElement(LoadedComponent, Object.assign({}, this.props));\n        }\n    }\n    return Async;\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    exportsIcon: {\n        marginLeft: global_spacer_md.value,\n        marginRight: global_spacer_sm.value,\n    },\n    exportsLink: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n};\n","import { AlertActionLink, Button } from '@patternfly/react-core';\nimport { AngleDoubleLeftIcon } from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { uiSelectors } from 'store/ui';\nimport { uiActions } from 'store/ui';\nimport { styles } from './exports.styles';\nclass ExportsLinkBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleToggle = event => {\n            const { closeExportDrawer, isOpen, onClick, openExportDrawer } = this.props;\n            if (isOpen) {\n                closeExportDrawer();\n            }\n            else {\n                openExportDrawer();\n            }\n            event.preventDefault();\n            if (onClick) {\n                onClick(isOpen);\n            }\n            return false;\n        };\n    }\n    render() {\n        const { intl, isActionLink } = this.props;\n        // @redhat-cloud-services/frontend-components-notifications does not expose PatternFly's actionLinks prop\n        if (isActionLink) {\n            return (React.createElement(\"div\", { className: \"pf-c-alert__action-group\" },\n                React.createElement(AlertActionLink, { onClick: this.handleToggle }, intl.formatMessage(messages.ExportsTitle))));\n        }\n        return (React.createElement(\"div\", { style: styles.exportsLink },\n            React.createElement(Button, { variant: \"link\", onClick: this.handleToggle },\n                React.createElement(\"span\", { style: styles.exportsIcon },\n                    React.createElement(AngleDoubleLeftIcon, null)),\n                intl.formatMessage(messages.ExportsTitle))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const isOpen = uiSelectors.selectIsExportsDrawerOpen(state);\n    return {\n        isOpen,\n    };\n});\nconst mapDispatchToProps = {\n    closeExportDrawer: uiActions.closeExportsDrawer,\n    openExportDrawer: uiActions.openExportsDrawer,\n};\nconst ExportsLink = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ExportsLinkBase));\nexport { ExportsLink };\n","import { createIntl, createIntlCache } from 'react-intl';\n// eslint-disable-next-line no-restricted-imports\nimport messages from '../../../locales/data.json';\nconst locale = navigator.language.split(/[-_]/)[0] || 'en';\nexport const getLocale = () => {\n    return locale;\n};\nconst cache = createIntlCache();\nexport const intl = createIntl({\n    defaultLocale: 'en',\n    locale,\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    messages: messages[locale],\n}, cache);\n","import _NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport { paths } from 'routes';\nclass NotAuthorizedStateBase extends React.Component {\n    render() {\n        const { intl, pathname } = this.props;\n        let msg;\n        switch (pathname) {\n            case paths.awsDetails:\n            case paths.awsDetailsBreakdown:\n                msg = messages.NotAuthorizedStateAws;\n                break;\n            case paths.azureDetails:\n            case paths.azureDetailsBreakdown:\n                msg = messages.NotAuthorizedStateAzure;\n                break;\n            case paths.costModels:\n                msg = messages.NotAuthorizedStateCostModels;\n                break;\n            case paths.gcpDetails:\n            case paths.gcpDetailsBreakdown:\n                msg = messages.NotAuthorizedStateGcp;\n                break;\n            case paths.ibmDetails:\n            case paths.ibmDetailsBreakdown:\n                msg = messages.NotAuthorizedStateIbm;\n                break;\n            case paths.ocpDetails:\n            case paths.ocpDetailsBreakdown:\n                msg = messages.NotAuthorizedStateOcp;\n                break;\n            case paths.explorer:\n            default:\n                msg = messages.CostManagement;\n                break;\n        }\n        return React.createElement(_NotAuthorized, { serviceName: intl.formatMessage(msg) });\n    }\n}\nconst NotAuthorizedState = injectIntl(withRouter(NotAuthorizedStateBase));\nexport { NotAuthorizedState };\n","import NotAuthorized from './notAuthorized';\nexport default NotAuthorized;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { NotAuthorizedState } from './notAuthorizedState';\nconst NotAuthorized = ({ pathname, title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(NotAuthorizedState, { pathname: pathname }))));\n};\nexport default withRouter(NotAuthorized);\n","import { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport Loading from 'pages/state/loading';\nimport NotAuthorized from 'pages/state/notAuthorized';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { paths, routes } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { userAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { hasAwsAccess, hasAzureAccess, hasCostModelAccess, hasGcpAccess, hasIbmAccess, hasOcpAccess, } from 'utils/userAccess';\nclass PermissionsBase extends React.Component {\n    getRoutePath() {\n        const { location } = this.props;\n        // cost models may include UUID in path\n        const _pathname = location.pathname && location.pathname.startsWith(paths.costModels) ? paths.costModels : location.pathname;\n        const currRoute = routes.find(({ path }) => path === _pathname);\n        return currRoute ? currRoute.path : undefined;\n    }\n    hasPermissions() {\n        const { userAccess, userAccessFetchStatus } = this.props;\n        if (!(userAccess && userAccessFetchStatus === 2 /* complete */)) {\n            return false;\n        }\n        const aws = hasAwsAccess(userAccess);\n        const azure = hasAzureAccess(userAccess);\n        const costModel = hasCostModelAccess(userAccess);\n        const gcp = hasGcpAccess(userAccess);\n        const ibm = hasIbmAccess(userAccess);\n        const ocp = hasOcpAccess(userAccess);\n        const path = this.getRoutePath();\n        switch (path) {\n            case paths.explorer:\n            case paths.overview:\n                return aws || azure || costModel || gcp || ibm || ocp;\n            case paths.awsDetails:\n            case paths.awsDetailsBreakdown:\n                return aws;\n            case paths.azureDetails:\n            case paths.azureDetailsBreakdown:\n                return azure;\n            case paths.costModels:\n                return costModel;\n            case paths.gcpDetails:\n            case paths.gcpDetailsBreakdown:\n                return gcp;\n            case paths.ibmDetails:\n            case paths.ibmDetailsBreakdown:\n                return ibm;\n            case paths.ocpDetails:\n            case paths.ocpDetailsBreakdown:\n                return ocp;\n            default:\n                return false;\n        }\n    }\n    render() {\n        const { children = null, location, userAccessFetchStatus, userAccessError } = this.props;\n        if (userAccessFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, null);\n        }\n        else if (userAccessError) {\n            return React.createElement(NotAvailable, null);\n        }\n        else if (this.hasPermissions()) {\n            return children;\n        }\n        // Page access denied because user doesn't have RBAC permissions and is not an org admin\n        return React.createElement(NotAuthorized, { pathname: location.pathname });\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const userAccessQueryString = getUserAccessQuery(userAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"all\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"all\" /* all */, userAccessQueryString);\n    return {\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst Permissions = withRouter(connect(mapStateToProps, undefined)(PermissionsBase));\nexport { Permissions };\n","import { asyncComponent } from 'components/async';\nimport React from 'react';\nconst PermissionsWrapper = asyncComponent(() => import(/* webpackChunkName: \"permissionsWrapper\" */ 'components/permissions/permissionsWrapper'));\n// Permissions component wrapper for AsyncComponent\nexport function permissionsComponent(AysncComponent) {\n    class PermissionsComponent extends React.Component {\n        render() {\n            return (React.createElement(PermissionsWrapper, null,\n                React.createElement(AysncComponent, Object.assign({}, this.props))));\n        }\n    }\n    return PermissionsComponent;\n}\n","import { Permissions } from './permissions';\nexport * from './permissionsComponent';\nexport default Permissions;\n","/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\nexport default defineMessages({\n    AWS: {\n        defaultMessage: 'Amazon Web Services',\n        description: 'Amazon Web Services',\n        id: 'AWS',\n    },\n    AWSComputeTitle: {\n        defaultMessage: 'Compute (EC2) instances usage',\n        description: 'Compute (EC2) instances usage',\n        id: 'AWSComputeTitle',\n    },\n    AWSCostTrendTitle: {\n        defaultMessage: 'Amazon Web Services cumulative cost comparison ({units})',\n        description: 'Amazon Web Services cumulative cost comparison ({units})',\n        id: 'AWSCostTrendTitle',\n    },\n    AWSDailyCostTrendTitle: {\n        defaultMessage: 'Amazon Web Services daily cost comparison ({units})',\n        description: 'Amazon Web Services daily cost comparison ({units})',\n        id: 'AWSDailyCostTrendTitle',\n    },\n    AWSDashboardCostTitle: {\n        defaultMessage: 'Amazon Web Services cost',\n        description: 'Amazon Web Services cost',\n        id: 'AWSDashboardCostTitle',\n    },\n    AWSDesc: {\n        defaultMessage: 'Raw cost from Amazon Web Services infrastructure.',\n        description: 'Raw cost from Amazon Web Services infrastructure.',\n        id: 'AWSDesc',\n    },\n    AWSDetailsTableAriaLabel: {\n        defaultMessage: 'Amazon Web Services details table',\n        description: 'Amazon Web Services details table',\n        id: 'AWSDetailsTable',\n    },\n    AWSDetailsTitle: {\n        defaultMessage: 'Amazon Web Services Details',\n        description: 'Amazon Web Services Details',\n        id: 'AWSDetailsTitle',\n    },\n    AWSOcpDashboardCostTitle: {\n        defaultMessage: 'Amazon Web Services filtered by OpenShift cost',\n        description: 'Amazon Web Services filtered by OpenShift cost',\n        id: 'AWSOcpDashboardCostTitle',\n    },\n    Azure: {\n        defaultMessage: 'Microsoft Azure',\n        description: 'Microsoft Azure',\n        id: 'Azure',\n    },\n    AzureComputeTitle: {\n        defaultMessage: 'Virtual machines usage',\n        description: 'Virtual machines usage',\n        id: 'AzureComputeTitle',\n    },\n    AzureCostTrendTitle: {\n        defaultMessage: 'Microsoft Azure cumulative cost comparison ({units})',\n        description: 'Microsoft Azure cumulative cost comparison ({units})',\n        id: 'AzureCostTrendTitle',\n    },\n    AzureDailyCostTrendTitle: {\n        defaultMessage: 'Microsoft Azure daily cost comparison ({units})',\n        description: 'Microsoft Azure daily cost comparison ({units})',\n        id: 'AzureDailyCostTrendTitle',\n    },\n    AzureDashboardCostTitle: {\n        defaultMessage: 'Microsoft Azure cost',\n        description: 'Microsoft Azure cost',\n        id: 'AzureDashboardCostTitle',\n    },\n    AzureDesc: {\n        defaultMessage: 'Raw cost from Azure infrastructure.',\n        description: 'Raw cost from Azure infrastructure.',\n        id: 'AzureDesc',\n    },\n    AzureDetailsTableAriaLabel: {\n        defaultMessage: 'Microsoft Azure details table',\n        description: 'Microsoft Azure details table',\n        id: 'AzureDetailsTable',\n    },\n    AzureDetailsTitle: {\n        defaultMessage: 'Microsoft Azure details',\n        description: 'Microsoft Azure details',\n        id: 'AzureDetailsTitle',\n    },\n    AzureOcpDashboardCostTitle: {\n        defaultMessage: 'Microsoft Azure filtered by OpenShift cost',\n        description: 'Microsoft Azure filtered by OpenShift cost',\n        id: 'AzureOcpDashboardCostTitle',\n    },\n    Back: {\n        defaultMessage: 'Back',\n        description: 'Back',\n        id: 'Back',\n    },\n    BreakdownBackToDetails: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {Back to {value} account details} ' +\n            'cluster {Back to {value} cluster details} ' +\n            'gcp_project {Back to {value} GCP project details} ' +\n            'instance_type {Back to {value} instance type details} ' +\n            'node {Back to {value} node details} ' +\n            'org_unit_id {Back to {value} organizational unit details} ' +\n            'project {Back to {value} project details} ' +\n            'region {Back to {value} region details} ' +\n            'resource_location {Back to {value} region details} ' +\n            'service {Back to {value} service details} ' +\n            'service_name {Back to {value} service details} ' +\n            'subscription_guid {Back to {value} account details} ' +\n            'tag {Back to {value} tag details} ' +\n            'other {}}',\n        description: 'Back to {value} {groupBy} details',\n        id: 'BreakdownBackToDetails',\n    },\n    BreakdownBackToDetailsAriaLabel: {\n        defaultMessage: 'Back to details',\n        description: 'Back to details',\n        id: 'BreakdownBackToDetailsAriaLabel',\n    },\n    BreakdownBackToTitles: {\n        defaultMessage: '{value, select, ' +\n            'aws {Amazon Web Services} ' +\n            'azure {Microsoft Azure} ' +\n            'gcp {Google Cloud Platform} ' +\n            'ibm {IBM Cloud - Top 5 Costliest} ' +\n            'ocp {OpenShift} ' +\n            'other {}}',\n        description: 'Breakdown back to page titles',\n        id: 'BreakdownBackToTitles',\n    },\n    BreakdownCostBreakdownAriaLabel: {\n        defaultMessage: 'A description of markup, raw cost and usage cost',\n        description: 'A description of markup, raw cost and usage cost',\n        id: 'BreakdownCostBreakdownAriaLabel',\n    },\n    BreakdownCostBreakdownTitle: {\n        defaultMessage: 'Cost breakdown',\n        description: 'A description of markup, raw cost and usage cost',\n        id: 'BreakdownCostBreakdownTitle',\n    },\n    BreakdownCostChartAriaDesc: {\n        defaultMessage: 'Breakdown of markup, raw, and usage costs',\n        description: 'Breakdown of markup, raw, and usage costs',\n        id: 'BreakdownCostChartAriaDesc',\n    },\n    BreakdownCostChartTooltip: {\n        defaultMessage: '{name}: {value}',\n        description: '{name}: {value}',\n        id: 'BreakdownCostChartTooltip',\n    },\n    BreakdownCostOverviewTitle: {\n        defaultMessage: 'Cost overview',\n        description: 'Cost overview',\n        id: 'BreakdownCostOverviewTitle',\n    },\n    BreakdownHistoricalDataTitle: {\n        defaultMessage: 'Historical data',\n        description: 'Historical data',\n        id: 'BreakdownHistoricalDataTitle',\n    },\n    BreakdownSummaryTitle: {\n        defaultMessage: '{value, select, ' +\n            'account {Cost by accounts} ' +\n            'cluster {Cost by clusters} ' +\n            'gcp_project {Cost by GCP projects} ' +\n            'instance_type {Cost by instance types} ' +\n            'node {Cost by Node} ' +\n            'org_unit_id {Cost by organizational units} ' +\n            'project {Cost by projects} ' +\n            'region {Cost by regions} ' +\n            'resource_location {Cost by regions} ' +\n            'service {Cost by services} ' +\n            'service_name {Cost by services} ' +\n            'subscription_guid {Cost by accounts} ' +\n            'tag {Cost by tags} ' +\n            'other {}}',\n        description: 'Cost by {value}',\n        id: 'BreakdownSummaryTitle',\n    },\n    BreakdownTitle: {\n        defaultMessage: '{value}',\n        description: 'breakdown title',\n        id: 'BreakdownTitle',\n    },\n    BreakdownTotalCostDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {{value} total cost (January {startDate})} other {{value} total cost (January {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {{value} total cost (February {startDate})} other {{value} total cost (February {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {{value} total cost (March {startDate})} other {{value} total cost (March {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {{value} total cost (April {startDate})} other {{value} total cost (April {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {{value} total cost (May {startDate})} other {{value} total cost (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {{value} total cost (June {startDate})} other {{value} total cost (June {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {{value} total cost (July {startDate})} other {{value} total cost (July {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {{value} total cost (August {startDate})} other {{value} total cost (August {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {{value} total cost (September {startDate})} other {{value} total cost (September {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {{value} total cost (October {startDate})} other {{value} total cost (October {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {{value} total cost (November {startDate})} other {{value} total cost (November {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {{value} total cost (December {startDate})} other {{value} total cost (December {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Break down total cost by date',\n        id: 'BreakdownTotalCostDate',\n    },\n    CalculationType: {\n        defaultMessage: 'Calculation type',\n        description: 'Calculation type',\n        id: 'CalculationType',\n    },\n    Cancel: {\n        defaultMessage: 'Cancel',\n        description: 'Cancel',\n        id: 'Cancel',\n    },\n    ChartCostForecastConeLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Cost confidence (Jan {startDate})} other {Cost confidence (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Cost confidence (Feb {startDate})} other {Cost confidence (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Cost confidence (Mar {startDate})} other {Cost confidence (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Cost confidence (Apr {startDate})} other {Cost confidence (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Cost confidence (May {startDate})} other {Cost confidence (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Cost confidence (Jun {startDate})} other {Cost confidence (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Cost confidence (Jul {startDate})} other {Cost confidence (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Cost confidence (Aug {startDate})} other {Cost confidence (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Cost confidence (Sep {startDate})} other {Cost confidence (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Cost confidence (Oct {startDate})} other {Cost confidence (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Cost confidence (Nov {startDate})} other {Cost confidence (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Cost confidence (Dec {startDate})} other {Cost confidence (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Cost forecast cone date label',\n        id: 'ChartCostForecastConeLegendLabel',\n    },\n    ChartCostForecastConeLegendNoDataLabel: {\n        defaultMessage: 'Cost confidence (no data)',\n        description: 'Cost confidence (no data)',\n        id: 'ChartCostForecastConeLegendNoDataLabel',\n    },\n    ChartCostForecastConeLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Cost confidence (Jan)} ' +\n            '1 {Cost confidence (Feb)} ' +\n            '2 {Cost confidence (Mar)} ' +\n            '3 {Cost confidence (Apr)} ' +\n            '4 {Cost confidence (May)} ' +\n            '5 {Cost confidence (Jun)} ' +\n            '6 {Cost confidence (Jul)} ' +\n            '7 {Cost confidence (Aug)} ' +\n            '8 {Cost confidence (Sep)} ' +\n            '9 {Cost confidence (Oct)} ' +\n            '10 {Cost confidence (Nov)} ' +\n            '11 {Cost confidence (Dec)} ' +\n            'other {}}',\n        description: 'Cost confidence forecast date label tooltip',\n        id: 'ChartCostForecastConeLegendTooltip',\n    },\n    ChartCostForecastConeTooltip: {\n        defaultMessage: '{value0} - {value1}',\n        description: '{value0} - {value1}',\n        id: 'ChartCostForecastConeTooltip',\n    },\n    ChartCostForecastLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Cost forecast (Jan {startDate})} other {Cost forecast (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Cost forecast (Feb {startDate})} other {Cost forecast (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Cost forecast (Mar {startDate})} other {Cost forecast (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Cost forecast (Apr {startDate})} other {Cost forecast (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Cost forecast (May {startDate})} other {Cost forecast (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Cost forecast (Jun {startDate})} other {Cost forecast (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Cost forecast (Jul {startDate})} other {Cost forecast (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Cost forecast (Aug {startDate})} other {Cost forecast (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Cost forecast (Sep {startDate})} other {Cost forecast (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Cost forecast (Oct {startDate})} other {Cost forecast (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Cost forecast (Nov {startDate})} other {Cost forecast (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Cost forecast (Dec {startDate})} other {Cost forecast (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Cost forecast date label',\n        id: 'ChartCostForecastLegendLabel',\n    },\n    ChartCostForecastLegendNoDataLabel: {\n        defaultMessage: 'Cost forecast (no data)',\n        description: 'Cost forecast (no data)',\n        id: 'ChartCostForecastLegendNoDataLabel',\n    },\n    ChartCostForecastLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Cost forecast (Jan)} ' +\n            '1 {Cost forecast (Feb)} ' +\n            '2 {Cost forecast (Mar)} ' +\n            '3 {Cost forecast (Apr)} ' +\n            '4 {Cost forecast (May)} ' +\n            '5 {Cost forecast (Jun)} ' +\n            '6 {Cost forecast (Jul)} ' +\n            '7 {Cost forecast (Aug)} ' +\n            '8 {Cost forecast (Sep)} ' +\n            '9 {Cost forecast (Oct)} ' +\n            '10 {Cost forecast (Nov)} ' +\n            '11 {Cost forecast (Dec)} ' +\n            'other {}}',\n        description: 'Cost forecast date label tooltip',\n        id: 'ChartCostForecastLegendTooltip',\n    },\n    ChartCostInfrastructureForecastConeLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Infrastructure confidence (Jan {startDate})} other {Infrastructure confidence (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Infrastructure confidence (Feb {startDate})} other {Infrastructure confidence (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Infrastructure confidence (Mar {startDate})} other {Infrastructure confidence (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Infrastructure confidence (Apr {startDate})} other {Infrastructure confidence (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Infrastructure confidence (May {startDate})} other {Infrastructure confidence (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Infrastructure confidence (Jun {startDate})} other {Infrastructure confidence (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Infrastructure confidence (Jul {startDate})} other {Infrastructure confidence (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Infrastructure confidence (Aug {startDate})} other {Infrastructure confidence (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Infrastructure confidence (Sep {startDate})} other {Infrastructure confidence (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Infrastructure confidence (Oct {startDate})} other {Infrastructure confidence (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Infrastructure confidence (Nov {startDate})} other {Infrastructure confidence (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Infrastructure confidence (Dec {startDate})} other {Infrastructure confidence (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Infrastructure date label',\n        id: 'ChartCostInfrastructureForecastConeLegendLabel',\n    },\n    ChartCostInfrastructureForecastConeLegendNoDataLabel: {\n        defaultMessage: 'Infrastructure confidence (no data)',\n        description: 'Infrastructure confidence (no data)',\n        id: 'ChartCostInfrastructureForecastConeLegendNoDataLabel',\n    },\n    ChartCostInfrastructureForecastConeLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Infrastructure confidence (Jan)} ' +\n            '1 {Infrastructure confidence (Feb)} ' +\n            '2 {Infrastructure confidence (Mar)} ' +\n            '3 {Infrastructure confidence (Apr)} ' +\n            '4 {Infrastructure confidence (May)} ' +\n            '5 {Infrastructure confidence (Jun)} ' +\n            '6 {Infrastructure confidence (Jul)} ' +\n            '7 {Infrastructure confidence (Aug)} ' +\n            '8 {Infrastructure confidence (Sep)} ' +\n            '9 {Infrastructure confidence (Oct)} ' +\n            '10 {Infrastructure confidence (Nov)} ' +\n            '11 {Infrastructure confidence (Dec)} ' +\n            'other {}}',\n        description: 'Infrastructure date label tooltip',\n        id: 'ChartCostInfrastructureForecastConeLegendTooltip',\n    },\n    ChartCostInfrastructureForecastLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Infrastructure forecast (Jan {startDate})} other {Infrastructure forecast (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Infrastructure forecast (Feb {startDate})} other {Infrastructure forecast (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Infrastructure forecast (Mar {startDate})} other {Infrastructure forecast (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Infrastructure forecast (Apr {startDate})} other {Infrastructure forecast (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Infrastructure forecast (May {startDate})} other {Infrastructure forecast (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Infrastructure forecast (Jun {startDate})} other {Infrastructure forecast (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Infrastructure forecast (Jul {startDate})} other {Infrastructure forecast (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Infrastructure forecast (Aug {startDate})} other {Infrastructure forecast (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Infrastructure forecast (Sep {startDate})} other {Infrastructure forecast (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Infrastructure forecast (Oct {startDate})} other {Infrastructure forecast (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Infrastructure forecast (Nov {startDate})} other {Infrastructure forecast (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Infrastructure forecast (Dec {startDate})} other {Infrastructure forecast (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Infrastructure date label',\n        id: 'ChartCostInfrastructureForecastLegendLabel',\n    },\n    ChartCostInfrastructureForecastLegendNoDataLabel: {\n        defaultMessage: 'Infrastructure forecast (no data)',\n        description: 'Infrastructure forecast (no data)',\n        id: 'ChartCostInfrastructureForecastLegendNoDataLabel',\n    },\n    ChartCostInfrastructureForecastLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Infrastructure forecast (Jan)} ' +\n            '1 {Infrastructure forecast (Feb)} ' +\n            '2 {Infrastructure forecast (Mar)} ' +\n            '3 {Infrastructure forecast (Apr)} ' +\n            '4 {Infrastructure forecast (May)} ' +\n            '5 {Infrastructure forecast (Jun)} ' +\n            '6 {Infrastructure forecast (Jul)} ' +\n            '7 {Infrastructure forecast (Aug)} ' +\n            '8 {Infrastructure forecast (Sep)} ' +\n            '9 {Infrastructure forecast (Oct)} ' +\n            '10 {Infrastructure forecast (Nov)} ' +\n            '11 {Infrastructure forecast (Dec)} ' +\n            'other {}}',\n        description: 'Infrastructure date label tooltip',\n        id: 'ChartCostInfrastructureForecastLegendTooltip',\n    },\n    ChartCostInfrastructureLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Infrastructure cost (Jan {startDate})} other {Infrastructure cost (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Infrastructure cost (Feb {startDate})} other {Infrastructure cost (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Infrastructure cost (Mar {startDate})} other {Infrastructure cost (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Infrastructure cost (Apr {startDate})} other {Infrastructure cost (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Infrastructure cost (May {startDate})} other {Infrastructure cost (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Infrastructure cost (Jun {startDate})} other {Infrastructure cost (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Infrastructure cost (Jul {startDate})} other {Infrastructure cost (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Infrastructure cost (Aug {startDate})} other {Infrastructure cost (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Infrastructure cost (Sep {startDate})} other {Infrastructure cost (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Infrastructure cost (Oct {startDate})} other {Infrastructure cost (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Infrastructure cost (Nov {startDate})} other {Infrastructure cost (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Infrastructure cost (Dec {startDate})} other {Infrastructure cost (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Infrastructure cost label',\n        id: 'ChartCostInfrastructureLegendLabel',\n    },\n    ChartCostInfrastructureLegendNoDataLabel: {\n        defaultMessage: 'Infrastructure cost (no data)',\n        description: 'Infrastructure cost (no data)',\n        id: 'ChartCostInfrastructureLegendNoDataLabel',\n    },\n    ChartCostInfrastructureLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Infrastructure cost (Jan)} ' +\n            '1 {Infrastructure cost (Feb)} ' +\n            '2 {Infrastructure cost (Mar)} ' +\n            '3 {Infrastructure cost (Apr)} ' +\n            '4 {Infrastructure cost (May)} ' +\n            '5 {Infrastructure cost (Jun)} ' +\n            '6 {Infrastructure cost (Jul)} ' +\n            '7 {Infrastructure cost (Aug)} ' +\n            '8 {Infrastructure cost (Sep)} ' +\n            '9 {Infrastructure cost (Oct)} ' +\n            '10 {Infrastructure cost (Nov)} ' +\n            '11 {Infrastructure cost (Dec)} ' +\n            'other {}}',\n        description: 'Infrastructure cost label tooltip',\n        id: 'ChartCostInfrastructureLegendTooltip',\n    },\n    ChartCostLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Cost (Jan {startDate})} other {Cost (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Cost (Feb {startDate})} other {Cost (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Cost (Mar {startDate})} other {Cost (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Cost (Apr {startDate})} other {Cost (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Cost (May {startDate})} other {Cost (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Cost (Jun {startDate})} other {Cost (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Cost (Jul {startDate})} other {Cost (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Cost (Aug {startDate})} other {Cost (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Cost (Sep {startDate})} other {Cost (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Cost (Oct {startDate})} other {Cost (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Cost (Nov {startDate})} other {Cost (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Cost (Dec {startDate})} other {Cost (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Cost date label',\n        id: 'ChartCostLegendLabel',\n    },\n    ChartCostLegendNoDataLabel: {\n        defaultMessage: 'Cost (no data)',\n        description: 'Cost (no data)',\n        id: 'ChartCostLegendNoDataLabel',\n    },\n    ChartCostLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Cost (Jan)} ' +\n            '1 {Cost (Feb)} ' +\n            '2 {Cost (Mar)} ' +\n            '3 {Cost (Apr)} ' +\n            '4 {Cost (May)} ' +\n            '5 {Cost (Jun)} ' +\n            '6 {Cost (Jul)} ' +\n            '7 {Cost (Aug)} ' +\n            '8 {Cost (Sep)} ' +\n            '9 {Cost (Oct)} ' +\n            '10 {Cost (Nov)} ' +\n            '11 {Cost (Dec)} ' +\n            'other {}}',\n        description: 'Cost (month)',\n        id: 'ChartCostLegendTooltip',\n    },\n    ChartCostSupplementaryLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Supplementary cost (Jan {startDate})} other {Supplementary cost (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Supplementary cost (Feb {startDate})} other {Supplementary cost (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Supplementary cost (Mar {startDate})} other {Supplementary cost (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Supplementary cost (Apr {startDate})} other {Supplementary cost (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Supplementary cost (May {startDate})} other {Supplementary cost (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Supplementary cost (Jun {startDate})} other {Supplementary cost (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Supplementary cost (Jul {startDate})} other {Supplementary cost (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Supplementary cost (Aug {startDate})} other {Supplementary cost (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Supplementary cost (Sep {startDate})} other {Supplementary cost (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Supplementary cost (Oct {startDate})} other {Supplementary cost (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Supplementary cost (Nov {startDate})} other {Supplementary cost (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Supplementary cost (Dec {startDate})} other {Supplementary cost (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Supplementary cost date label',\n        id: 'ChartCostSupplementaryLegendLabel',\n    },\n    ChartCostSupplementaryLegendNoDataLabel: {\n        defaultMessage: 'Supplementary cost (no data)',\n        description: 'Supplementary cost (no data)',\n        id: 'ChartCostSupplementaryLegendNoDataLabel',\n    },\n    ChartCostSupplementaryLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Supplementary cost (Jan)} ' +\n            '1 {Supplementary cost (Feb)} ' +\n            '2 {Supplementary cost (Mar)} ' +\n            '3 {Supplementary cost (Apr)} ' +\n            '4 {Supplementary cost (May)} ' +\n            '5 {Supplementary cost (Jun)} ' +\n            '6 {Supplementary cost (Jul)} ' +\n            '7 {Supplementary cost (Aug)} ' +\n            '8 {Supplementary cost (Sep)} ' +\n            '9 {Supplementary cost (Oct)} ' +\n            '10 {Supplementary cost (Nov)} ' +\n            '11 {Supplementary cost (Dec)} ' +\n            'other {}}',\n        description: 'Supplementary cost (month)',\n        id: 'ChartCostSupplementaryLegendTooltip',\n    },\n    ChartDateRange: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Jan {startDate} {year}} other {{startDate}-{endDate} Jan {year}}}} ' +\n            '1 {{count, plural, one {Feb {startDate} {year}} other {{startDate}-{endDate} Feb {year}}}} ' +\n            '2 {{count, plural, one {Mar {startDate} {year}} other {{startDate}-{endDate} Mar {year}}}} ' +\n            '3 {{count, plural, one {Apr {startDate} {year}} other {{startDate}-{endDate} Apr {year}}}} ' +\n            '4 {{count, plural, one {May {startDate} {year}} other {{startDate}-{endDate} May {year}}}} ' +\n            '5 {{count, plural, one {Jun {startDate} {year}} other {{startDate}-{endDate} Jun {year}}}} ' +\n            '6 {{count, plural, one {Jul {startDate} {year}} other {{startDate}-{endDate} Jul {year}}}} ' +\n            '7 {{count, plural, one {Aug {startDate} {year}} other {{startDate}-{endDate} Aug {year}}}} ' +\n            '8 {{count, plural, one {Sep {startDate} {year}} other {{startDate}-{endDate} Sep {year}}}} ' +\n            '9 {{count, plural, one {Oct {startDate} {year}} other {{startDate}-{endDate} Oct {year}}}} ' +\n            '10 {{count, plural, one {Nov {startDate} {year}} other {{startDate}-{endDate} Nov {year}}}} ' +\n            '11 {{count, plural, one {Dec {startDate} {year}} other {{startDate}-{endDate} Dec {year}}}} ' +\n            'other {}}',\n        description: 'Date range that handles singular and plural',\n        id: 'ChartDateRange',\n    },\n    ChartDayOfTheMonth: {\n        defaultMessage: 'Day {day}',\n        description: 'The day of the month',\n        id: 'ChartDayOfTheMonth',\n    },\n    ChartLimitLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Limit (Jan {startDate})} other {Limit (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Limit (Feb {startDate})} other {Limit (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Limit (Mar {startDate})} other {Limit (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Limit (Apr {startDate})} other {Limit (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Limit (May {startDate})} other {Limit (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Limit (Jun {startDate})} other {Limit (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Limit (Jul {startDate})} other {Limit (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Limit (Aug {startDate})} other {Limit (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Limit (Sep {startDate})} other {Limit (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Limit (Oct {startDate})} other {Limit (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Limit (Nov {startDate})} other {Limit (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Limit (Dec {startDate})} other {Limit (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Limit date label',\n        id: 'ChartLimitLegendLabel',\n    },\n    ChartLimitLegendNoDataLabel: {\n        defaultMessage: 'Limit (no data)',\n        description: 'Limit (no data)',\n        id: 'ChartLimitLegendNoDataLabel',\n    },\n    ChartLimitLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Limit (Jan)} ' +\n            '1 {Limit (Feb)} ' +\n            '2 {Limit (Mar)} ' +\n            '3 {Limit (Apr)} ' +\n            '4 {Limit (May)} ' +\n            '5 {Limit (Jun)} ' +\n            '6 {Limit (Jul)} ' +\n            '7 {Limit (Aug)} ' +\n            '8 {Limit (Sep)} ' +\n            '9 {Limit (Oct)} ' +\n            '10 {Limit (Nov)} ' +\n            '11 {Limit (Dec)} ' +\n            'other {}}',\n        description: 'Limit (month)',\n        id: 'ChartLimitLegendTooltip',\n    },\n    ChartNoData: {\n        defaultMessage: 'no data',\n        description: 'no data',\n        id: 'ChartNoData',\n    },\n    ChartOthers: {\n        defaultMessage: '{count, plural, one {{count} Other} other {{count} Others}}',\n        description: 'Other || Others',\n        id: 'ChartOthers',\n    },\n    ChartRequestsLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Requests (Jan {startDate})} other {Requests (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Requests (Feb {startDate})} other {Requests (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Requests (Mar {startDate})} other {Requests (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Requests (Apr {startDate})} other {Requests (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Requests (May {startDate})} other {Requests (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Requests (Jun {startDate})} other {Requests (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Requests (Jul {startDate})} other {Requests (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Requests (Aug {startDate})} other {Requests (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Requests (Sep {startDate})} other {Requests (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Requests (Oct {startDate})} other {Requests (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Requests (Nov {startDate})} other {Requests (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Requests (Dec {startDate})} other {Requests (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Requests date label',\n        id: 'ChartRequestLegendLabel',\n    },\n    ChartRequestsLegendNoDataLabel: {\n        defaultMessage: 'Requests (no data)',\n        description: 'Requests (no data)',\n        id: 'ChartRequestsLegendNoDataLabel',\n    },\n    ChartRequestsLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Requests (Jan)} ' +\n            '1 {Requests (Feb)} ' +\n            '2 {Requests (Mar)} ' +\n            '3 {Requests (Apr)} ' +\n            '4 {Requests (May)} ' +\n            '5 {Requests (Jun)} ' +\n            '6 {Requests (Jul)} ' +\n            '7 {Requests (Aug)} ' +\n            '8 {Requests (Sep)} ' +\n            '9 {Requests (Oct)} ' +\n            '10 {Requests (Nov)} ' +\n            '11 {Requests (Dec)} ' +\n            'other {}}',\n        description: 'Requests (month)',\n        id: 'ChartRequestLegendTooltip',\n    },\n    ChartUsageLegendLabel: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {Usage (Jan {startDate})} other {Usage (Jan {startDate}-{endDate})}}} ' +\n            '1 {{count, plural, one {Usage (Feb {startDate})} other {Usage (Feb {startDate}-{endDate})}}} ' +\n            '2 {{count, plural, one {Usage (Mar {startDate})} other {Usage (Mar {startDate}-{endDate})}}} ' +\n            '3 {{count, plural, one {Usage (Apr {startDate})} other {Usage (Apr {startDate}-{endDate})}}} ' +\n            '4 {{count, plural, one {Usage (May {startDate})} other {Usage (May {startDate}-{endDate})}}} ' +\n            '5 {{count, plural, one {Usage (Jun {startDate})} other {Usage (Jun {startDate}-{endDate})}}} ' +\n            '6 {{count, plural, one {Usage (Jul {startDate})} other {Usage (Jul {startDate}-{endDate})}}} ' +\n            '7 {{count, plural, one {Usage (Aug {startDate})} other {Usage (Aug {startDate}-{endDate})}}} ' +\n            '8 {{count, plural, one {Usage (Sep {startDate})} other {Usage (Sep {startDate}-{endDate})}}} ' +\n            '9 {{count, plural, one {Usage (Oct {startDate})} other {Usage (Oct {startDate}-{endDate})}}} ' +\n            '10 {{count, plural, one {Usage (Nov {startDate})} other {Usage (Nov {startDate}-{endDate})}}} ' +\n            '11 {{count, plural, one {Usage (Dec {startDate})} other {Usage (Dec {startDate}-{endDate})}}} ' +\n            'other {}}',\n        description: 'Usage (month {startDate})',\n        id: 'ChartUsageLegendLabel',\n    },\n    ChartUsageLegendNoDataLabel: {\n        defaultMessage: 'Usage (no data)',\n        description: 'Usage (no data)',\n        id: 'ChartUsageLegendNoDataLabel',\n    },\n    ChartUsageLegendTooltip: {\n        defaultMessage: '{month, select, ' +\n            '0 {Usage (Jan)} ' +\n            '1 {Usage (Feb)} ' +\n            '2 {Usage (Mar)} ' +\n            '3 {Usage (Apr)} ' +\n            '4 {Usage (May)} ' +\n            '5 {Usage (Jun)} ' +\n            '6 {Usage (Jul)} ' +\n            '7 {Usage (Aug)} ' +\n            '8 {Usage (Sep)} ' +\n            '9 {Usage (Oct)} ' +\n            '10 {Usage (Nov)} ' +\n            '11 {Usage (Dec)} ' +\n            'other {}}',\n        description: 'Usage (month)',\n        id: 'ChartUsageLegendTooltip',\n    },\n    Close: {\n        defaultMessage: 'Close',\n        description: 'Close',\n        id: 'Close',\n    },\n    Clusters: {\n        defaultMessage: 'Clusters',\n        description: 'Clusters',\n        id: 'Clusters',\n    },\n    Cost: {\n        defaultMessage: 'Cost',\n        description: 'Cost',\n        id: 'Cost',\n    },\n    CostCalculations: {\n        defaultMessage: 'Cost calculations',\n        description: 'Cost calculations',\n        id: 'CostCalculations',\n    },\n    CostManagement: {\n        defaultMessage: 'Cost Management',\n        description: 'Cost Management',\n        id: 'CostManagement',\n    },\n    CostModels: {\n        defaultMessage: 'Cost Models',\n        description: 'Cost Models',\n        id: 'CostModels',\n    },\n    CostModelsAddTagValues: {\n        defaultMessage: 'Add more tag values',\n        description: 'Add more tag values',\n        id: 'CostModelsAddTagValues',\n    },\n    CostModelsAssignSources: {\n        defaultMessage: '{count, plural, one {Assign source} other {Assign sources}}',\n        description: 'Assign sources -- plural or singular',\n        id: 'CostModelsAssignSources',\n    },\n    CostModelsAssignSourcesErrorDescription: {\n        defaultMessage: 'You cannot assign a source at this time. Try refreshing this page. If the problem persists, contact your organization administrator or visit our {url} for known outages.',\n        description: 'You cannot assign a source at this time',\n        id: 'CostModelsAssignSourcesErrorDescription',\n    },\n    CostModelsAssignSourcesErrorTitle: {\n        defaultMessage: 'This action is temporarily unavailable',\n        description: 'This action is temporarily unavailable',\n        id: 'CostModelsAssignSourcesErrorTitle',\n    },\n    CostModelsAssignSourcesParen: {\n        defaultMessage: 'Assign source(s)',\n        description: 'Assign source(s)',\n        id: 'CostModelsAssignSourcesParen',\n    },\n    CostModelsAssignedSources: {\n        defaultMessage: 'Assigned sources',\n        description: 'Assigned sourcess',\n        id: 'CostModelsAssignedSources',\n    },\n    CostModelsAvailableSources: {\n        defaultMessage: 'The following sources are assigned to my production cost model:',\n        description: 'The following sources are assigned to my production cost model:',\n        id: 'CostModelsAvailableSources',\n    },\n    CostModelsCanDelete: {\n        defaultMessage: 'This action will delete {name} cost model from the system. This action cannot be undone',\n        description: 'This action will delete {name} cost model from the system. This action cannot be undone',\n        id: 'CostModelsCanDelete',\n    },\n    CostModelsCanNotDelete: {\n        defaultMessage: 'The following sources are assigned to {name} cost model:',\n        description: 'The following sources are assigned to {name} cost model:',\n        id: 'CostModelsCanNotDelete',\n    },\n    CostModelsDelete: {\n        defaultMessage: 'Delete cost model',\n        description: 'Delete cost model',\n        id: 'CostModelsDelete',\n    },\n    CostModelsDeleteDesc: {\n        defaultMessage: 'This action will delete {costModel} cost model from the system. This action cannot be undone.',\n        description: 'This action will delete {costModel} cost model from the system. This action cannot be undone.',\n        id: 'CostModelsDeleteDesc',\n    },\n    CostModelsDeleteSource: {\n        defaultMessage: 'You must unassign any sources before you can delete this cost model.',\n        description: 'You must unassign any sources before you can delete this cost model.',\n        id: 'CostModelsDeleteSource',\n    },\n    CostModelsDescTooLong: {\n        defaultMessage: 'Should not exceed 500 characters',\n        description: 'Should not exceed 500 characters',\n        id: 'CostModelsDescTooLong',\n    },\n    CostModelsDetailsAssignSourcesTitle: {\n        defaultMessage: 'Assign sources',\n        description: 'Assign sources',\n        id: 'CostModelsDetailsAssignSourcesTitle',\n    },\n    CostModelsDistributionDesc: {\n        defaultMessage: 'The following is the type of metric that is set to be used when distributing costs to the project level breakdowns.',\n        description: 'The following is the type of metric that is set to be used when distributing costs to the project level breakdowns.',\n        id: 'CostModelsDistributionDesc',\n    },\n    CostModelsDistributionEdit: {\n        defaultMessage: 'Edit distribution',\n        description: 'Edit distribution',\n        id: 'CostModelsDistributionEdit',\n    },\n    CostModelsEmptyState: {\n        defaultMessage: 'What is your hybrid cloud costing you?',\n        description: 'What is your hybrid cloud costing you?',\n        id: 'CostModelsEmptyState',\n    },\n    CostModelsEmptyStateDesc: {\n        defaultMessage: 'Create a cost model to start calculating your hybrid cloud costs using custom price lists, markups, or both. Click on the button below to begin the journey.',\n        description: 'Create a cost model to start calculating your hybrid cloud costs using custom price lists, markups, or both. Click on the button below to begin the journey.',\n        id: 'CostModelsEmptyStateDesc',\n    },\n    CostModelsEmptyStateLearnMore: {\n        defaultMessage: 'Read about setting up a cost model',\n        description: 'Read about setting up a cost model',\n        id: 'CostModelsEmptyStateLearnMore',\n    },\n    CostModelsEnterTagKey: {\n        defaultMessage: 'Enter a tag key',\n        description: 'Enter a tag key',\n        id: 'CostModelsEnterTagKey',\n    },\n    CostModelsEnterTagRate: {\n        defaultMessage: 'Enter rate by tag',\n        description: 'Enter rate by tag',\n        id: 'CostModelsEnterTagRate',\n    },\n    CostModelsEnterTagValue: {\n        defaultMessage: 'Enter a tag value',\n        description: 'Enter a tag value',\n        id: 'CostModelsEnterTagValue',\n    },\n    CostModelsExamplesDoubleMarkup: {\n        defaultMessage: 'A markup rate of (+) 100% doubles the base costs of your source(s).',\n        description: 'A markup rate of (+) 100% doubles the base costs of your source(s).',\n        id: 'CostModelsExamplesDoubleMarkup',\n    },\n    CostModelsExamplesNoAdjust: {\n        defaultMessage: 'A markup or discount rate of (+/-) 0% (the default) makes no adjustments to the base costs of your source(s).',\n        description: 'A markup or discount rate of (+/-) 0% (the default) makes no adjustments to the base costs of your source(s).',\n        id: 'CostModelsExamplesNoAdjust',\n    },\n    CostModelsExamplesReduceSeventyfive: {\n        defaultMessage: 'A discount rate of (-) 25% reduces the base costs of your source(s) to 75% of the original value.',\n        description: 'A discount rate of (-) 25% reduces the base costs of your source(s) to 75% of the original value.',\n        id: 'CostModelsExamplesReduceSeventyfive',\n    },\n    CostModelsExamplesReduceZero: {\n        defaultMessage: 'A discount rate of (-) 100% reduces the base costs of your source(s) to 0.',\n        description: 'A discount rate of (-) 100% reduces the base costs of your source(s) to 0.',\n        id: 'CostModelsExamplesReduceZero',\n    },\n    CostModelsFilterPlaceholder: {\n        defaultMessage: 'Filter by name...',\n        description: 'Filter by name',\n        id: 'CostModelsFilterPlaceholder',\n    },\n    CostModelsFilterTagKey: {\n        defaultMessage: 'Filter by tag key',\n        description: 'Filter by tag key',\n        id: 'CostModelsFilterTagKey',\n    },\n    CostModelsInfoTooLong: {\n        defaultMessage: 'Should not exceed 100 characters',\n        description: 'Should not exceed 100 characters',\n        id: 'CostModelsInfoTooLong',\n    },\n    CostModelsLastChange: {\n        defaultMessage: 'Last change',\n        description: 'Last change',\n        id: 'CostModelsLastChange',\n    },\n    CostModelsPopover: {\n        defaultMessage: 'A cost model allows you to associate a price to metrics provided by your sources to charge for utilization of resources. {learnMore}',\n        description: 'A cost model allows you to associate a price to metrics provided by your sources to charge for utilization of resources. {learnMore}',\n        id: 'CostModelsPopover',\n    },\n    CostModelsPopoverAriaLabel: {\n        defaultMessage: 'Cost model info popover',\n        description: 'Cost model info popover',\n        id: 'CostModelsPopoverAriaLabel',\n    },\n    CostModelsRateTooLong: {\n        defaultMessage: 'Should not exceed 10 decimals',\n        description: 'Should not exceed 10 decimals',\n        id: 'CostModelsRateTooLong',\n    },\n    CostModelsReadOnly: {\n        defaultMessage: 'You have read only permissions',\n        description: 'You have read only permissions',\n        id: 'CostModelsReadOnly',\n    },\n    CostModelsRefreshDialog: {\n        defaultMessage: 'Refresh this dialog',\n        description: 'Refresh this dialog',\n        id: 'CostModelsRefreshDialog',\n    },\n    CostModelsRequiredField: {\n        defaultMessage: 'This field is required',\n        description: 'This field is required',\n        id: 'CostModelsRequiredField',\n    },\n    CostModelsRouterErrorTitle: {\n        defaultMessage: 'Fail routing to cost model',\n        description: 'cost models router error title',\n        id: 'CostModelsRouterErrorTitle',\n    },\n    CostModelsRouterServerError: {\n        defaultMessage: 'Server error: could not get the cost model.',\n        description: 'Server error: could not get the cost model.',\n        id: 'CostModelsRouterServerError',\n    },\n    CostModelsSourceDelete: {\n        defaultMessage: 'Unassign',\n        description: 'Unassign',\n        id: 'CostModelsSourceDelete',\n    },\n    CostModelsSourceDeleteSource: {\n        defaultMessage: 'Unassign source',\n        description: 'Unassign source',\n        id: 'CostModelsSourceDeleteSource',\n    },\n    CostModelsSourceDeleteSourceDesc: {\n        defaultMessage: 'This will remove the assignment of {source} from the {costModel} cost model. You can then assign the cost model to a new source.',\n        description: 'This will remove the assignment of {source} from the {costModel} cost model. You can then assign the cost model to a new source.',\n        id: 'CostModelsSourceDeleteSourceDesc',\n    },\n    CostModelsSourceEmptyStateDesc: {\n        defaultMessage: 'Select the source(s) you want to apply this cost model to.',\n        description: 'Select the source(s) you want to apply this cost model to.',\n        id: 'CostModelsSourceEmptyStateDesc',\n    },\n    CostModelsSourceEmptyStateTitle: {\n        defaultMessage: 'No sources are assigned',\n        description: 'No sources are assigned',\n        id: 'CostModelsSourceEmptyStateTitle',\n    },\n    CostModelsSourceTableAriaLabel: {\n        defaultMessage: 'Sources table',\n        description: 'Sources table',\n        id: 'CostModelsSourcesTableAriaLabel',\n    },\n    CostModelsSourceTablePaginationAriaLabel: {\n        defaultMessage: 'Sources table pagination controls',\n        description: 'Sources table pagination controls',\n        id: 'CostModelsSourceTablePaginationAriaLabel',\n    },\n    CostModelsSourceType: {\n        defaultMessage: 'Source type',\n        description: 'Source type',\n        id: 'CostModelsSourceType',\n    },\n    CostModelsTableAriaLabel: {\n        defaultMessage: 'Cost models table',\n        description: 'Cost models table',\n        id: 'CostModelsTableAriaLabel',\n    },\n    CostModelsTagRateTableAriaLabel: {\n        defaultMessage: 'Tag rates',\n        description: 'Tag rates',\n        id: 'CostModelsTagRateTableAriaLabel',\n    },\n    CostModelsTagRateTableDefault: {\n        defaultMessage: 'Default',\n        description: 'Default',\n        id: 'CostModelsTagRateTableDefault',\n    },\n    CostModelsTagRateTableKey: {\n        defaultMessage: 'Tag key',\n        description: 'Tag key',\n        id: 'CostModelsTagRateTableKey',\n    },\n    CostModelsTagRateTableRate: {\n        defaultMessage: 'Rate',\n        description: 'Rate',\n        id: 'CostModelsTagRateTableRate',\n    },\n    CostModelsTagRateTableValue: {\n        defaultMessage: 'Tag value',\n        description: 'Tag value',\n        id: 'CostModelsTagRateTableValue',\n    },\n    CostModelsUUIDEmptyState: {\n        defaultMessage: 'Cost model can not be found',\n        description: 'Cost model can not be found',\n        id: 'CostModelsUUIDEmptyState',\n    },\n    CostModelsUUIDEmptyStateDesc: {\n        defaultMessage: 'Cost model with uuid: {uuid} does not exist.',\n        description: 'Cost model with uuid: {uuid} does not exist.',\n        id: 'CostModelsUUIDEmptyStateDesc',\n    },\n    CostModelsWizardCreateCostModel: {\n        defaultMessage: 'Create cost model',\n        description: 'Create cost model',\n        id: 'CostModelsWizardCreateCostModel',\n    },\n    CostModelsWizardCreatePriceList: {\n        defaultMessage: 'Create a price list',\n        description: 'Create a price list',\n        id: 'CostModelsWizardCreatePriceList',\n    },\n    CostModelsWizardEmptySourceTypeLabel: {\n        defaultMessage: 'Select source type',\n        description: 'Select source type',\n        id: 'CostModelsWizardEmptySourceTypeLabel',\n    },\n    CostModelsWizardEmptyStateCreate: {\n        defaultMessage: 'To create a price list, begin by clicking the {value} button.',\n        description: 'To create a price list, begin by clicking the {Create rate} button.',\n        id: 'CostModelsWizardEmptyStateCreate',\n    },\n    CostModelsWizardEmptyStateOtherTime: {\n        defaultMessage: 'You can create a price list or modify one at a later time.',\n        description: 'You can create a price list or modify one at a later time.',\n        id: 'CostModelsWizardEmptyStateOtherTime',\n    },\n    CostModelsWizardEmptyStateSkipStep: {\n        defaultMessage: 'To skip this step, click the {value} button.',\n        description: 'To skip this step, click the {next} button.',\n        id: 'CostModelsWizardEmptyStateSkipStep',\n    },\n    CostModelsWizardEmptyStateTitle: {\n        defaultMessage: 'A price list has not been created.',\n        description: 'A price list has not been created.',\n        id: 'CostModelsWizardEmptyStateTitle',\n    },\n    CostModelsWizardGeneralInfoTitle: {\n        defaultMessage: 'Enter general information',\n        description: 'Enter general information',\n        id: 'CostModelsWizardGeneralInfoTitle',\n    },\n    CostModelsWizardNoRatesAdded: {\n        defaultMessage: 'No rates were added to the price list',\n        description: 'No rates were added to the price list',\n        id: 'CostModelsWizardNoRatesAdded',\n    },\n    CostModelsWizardOnboardAWS: {\n        defaultMessage: 'Amazon Web Services (AWS)',\n        description: 'Amazon Web Services (AWS)',\n        id: 'CostModelsWizardOnboardAWS',\n    },\n    CostModelsWizardOnboardOCP: {\n        defaultMessage: 'Red Hat OpenShift Container Platform',\n        description: 'Red Hat OpenShift Container Platform',\n        id: 'CostModelsWizardOnboardOCP',\n    },\n    CostModelsWizardPriceListMetric: {\n        defaultMessage: 'Select the metric you want to assign a price to, and specify a measurement unit and rate. You can optionally set multiple rates for particular tags.',\n        description: 'Select the metric you want to assign a price to, and specify a measurement unit and rate. You can optionally set multiple rates for particular tags.',\n        id: 'CostModelsWizardPriceListMetric',\n    },\n    CostModelsWizardRateAriaLabel: {\n        defaultMessage: 'Assign rate',\n        description: 'Assign rate',\n        id: 'CostModelsWizardRateAriaLabel',\n    },\n    CostModelsWizardReviewMarkDiscount: {\n        defaultMessage: 'Markup/Discount',\n        description: 'No Markup/Discount',\n        id: 'CostModelsWizardReviewMarkDiscount',\n    },\n    CostModelsWizardReviewStatusSubDetails: {\n        defaultMessage: 'Review and confirm your cost model configuration and assignments. Click {create} to create the cost model, or {back} to revise.',\n        description: 'Review and confirm your cost model configuration and assignments. Click {Create} to create the cost model, or {Back} to revise.',\n        id: 'CostModelsWizardReviewStatusSubDetails',\n    },\n    CostModelsWizardReviewStatusSubTitle: {\n        defaultMessage: 'Costs for resources connected to the assigned sources will now be calculated using the newly created {value} cost model.',\n        description: 'Costs for resources connected to the assigned sources will now be calculated using the newly created {value} cost model.',\n        id: 'CostModelsWizardReviewStatusSubTitle',\n    },\n    CostModelsWizardReviewStatusTitle: {\n        defaultMessage: 'Creation successful',\n        description: 'Creation successful',\n        id: 'CostModelsWizardReviewStatusTitle',\n    },\n    CostModelsWizardSourceCaption: {\n        defaultMessage: '{value, select, ' +\n            'aws {Select from the following Amazon Web Services sources:} ' +\n            'azure {Select from the following Microsoft Azure sources:} ' +\n            'gcp {Select from the following Google Cloud Platform sources:} ' +\n            'ocp {Select from the following Red Hat OpenShift sources:} ' +\n            'other {}}',\n        description: 'Select from the following {value} sources:',\n        id: 'CostModelsWizardSourceCaption',\n    },\n    CostModelsWizardSourceErrorDescription: {\n        defaultMessage: 'Try refreshing this step or you can skip this step (as it is optional) and assign the source to the cost model at a later time. If the problem persists, contact your organization administrator or visit our {url} for known outages.',\n        description: 'This step is temporarily unavailable',\n        id: 'CostModelsWizardSourceErrorDescription',\n    },\n    CostModelsWizardSourceErrorTitle: {\n        defaultMessage: 'This step is temporarily unavailable',\n        description: 'This step is temporarily unavailable',\n        id: 'CostModelsWizardSourceErrorTitle',\n    },\n    CostModelsWizardSourceSubtitle: {\n        defaultMessage: 'Select one or more sources to this cost model. You can skip this step and assign the cost model to a source at a later time. A source will be unavailable for selection if a cost model is already assigned to it.',\n        description: 'Select one or more sources to this cost model. You can skip this step and assign the cost model to a source at a later time. A source will be unavailable for selection if a cost model is already assigned to it.',\n        id: 'CostModelsWizardSourceSubtitle',\n    },\n    CostModelsWizardSourceTableAriaLabel: {\n        defaultMessage: 'Assign sources to cost model table',\n        description: 'Assign sources to cost model table',\n        id: 'CostModelsWizardSourceTableAriaLabel',\n    },\n    CostModelsWizardSourceTableCostModel: {\n        defaultMessage: 'Cost model assigned',\n        description: 'Cost model assigned',\n        id: 'CostModelsWizardSourceTableCostModel',\n    },\n    CostModelsWizardSourceTableDefaultCostModel: {\n        defaultMessage: 'Default cost model',\n        description: 'Default cost model',\n        id: 'CostModelsWizardSourceTableDefaultCostModel',\n    },\n    CostModelsWizardSourceTitle: {\n        defaultMessage: 'Assign sources to the cost model (optional)',\n        description: 'Assign sources to the cost model (optional)',\n        id: 'CostModelsWizardSourceTitle',\n    },\n    CostModelsWizardSourceWarning: {\n        defaultMessage: 'This source is assigned to {costModel} cost model. You will have to unassigned it first',\n        description: 'This source is assigned to {costModel} cost model. You will have to unassigned it first',\n        id: 'CostModelsWizardSourceWarning',\n    },\n    CostModelsWizardStepsGenInfo: {\n        defaultMessage: 'Enter information',\n        description: 'Enter information',\n        id: 'CostModelsWizardStepsGenInfo',\n    },\n    CostModelsWizardStepsPriceList: {\n        defaultMessage: 'Price list',\n        description: 'Price list',\n        id: 'CostModelsWizardStepsPriceList',\n    },\n    CostModelsWizardStepsReview: {\n        defaultMessage: 'Review details',\n        description: 'Review details',\n        id: 'CostModelsWizardStepsReview',\n    },\n    CostModelsWizardStepsSources: {\n        defaultMessage: 'Assign a source to the cost model',\n        description: 'Assign a source to the cost model',\n        id: 'CostModelsWizardStepsSources',\n    },\n    CostModelsWizardSubTitleTable: {\n        defaultMessage: 'The following is a list of rates you have set so far for this price list.',\n        description: 'The following is a list of rates you have set so far for this price list.',\n        id: 'CostModelsWizardSubTitleTable',\n    },\n    CostModelsWizardWarningSources: {\n        defaultMessage: 'Cannot assign cost model to a source that is already assigned to another one',\n        description: 'No Cannot assign cost model to a source that is already assigned to another one',\n        id: 'CostModelsWizardWarningSources',\n    },\n    CostTypeAmortized: {\n        defaultMessage: 'Amortized',\n        description: 'Amortized cost type',\n        id: 'CostTypeAmortized',\n    },\n    CostTypeAmortizedDesc: {\n        defaultMessage: 'Recurring and/or upfront costs are distributed evenly across the month',\n        description: 'Recurring and/or upfront costs are distributed evenly across the month',\n        id: 'CostTypeAmortizedDesc',\n    },\n    CostTypeBlended: {\n        defaultMessage: 'Blended',\n        description: 'Blended cost type',\n        id: 'CostTypeBlended',\n    },\n    CostTypeBlendedDesc: {\n        defaultMessage: 'Using a blended rate to calcuate cost usage',\n        description: 'Using a blended rate to calcuate cost usage',\n        id: 'CostTypeBlendedDesc',\n    },\n    CostTypeLabel: {\n        defaultMessage: 'Show cost as',\n        description: 'Show cost as',\n        id: 'CostTypeLabel',\n    },\n    CostTypeUnblended: {\n        defaultMessage: 'Unblended',\n        description: 'Unblended cost type',\n        id: 'CostTypeUnblended',\n    },\n    CostTypeUnblendedDesc: {\n        defaultMessage: 'Usage cost on the day you are charged',\n        description: 'Usage cost on the day you are charged',\n        id: 'CostTypeUnblendedDesc',\n    },\n    CpuTitle: {\n        defaultMessage: 'CPU',\n        description: 'CPU',\n        id: 'CPUTitle',\n    },\n    Create: {\n        defaultMessage: 'Create',\n        description: 'Create',\n        id: 'Create',\n    },\n    CreateCostModelConfirmMsg: {\n        defaultMessage: 'Are you sure you want to stop creating a cost model? All settings will be discarded.',\n        description: 'Are you sure you want to stop creating a cost model? All settings will be discarded.',\n        id: 'CreateCostModelConfirmMsg',\n    },\n    CreateCostModelDesc: {\n        defaultMessage: 'A cost model allows you to associate a price to metrics provided by your sources to charge for utilization of resources.',\n        description: 'A cost model allows you to associate a price to metrics provided by your sources to charge for utilization of resources.',\n        id: 'CreateCostModelDesc',\n    },\n    CreateCostModelExit: {\n        defaultMessage: 'Exit cost model creation',\n        description: 'Exit cost model creation',\n        id: 'CreateCostModelExit',\n    },\n    CreateCostModelExitYes: {\n        defaultMessage: 'Yes, I want to exit',\n        description: 'Yes, I want to exit',\n        id: 'CreateCostModelExitYes',\n    },\n    CreateCostModelNoContinue: {\n        defaultMessage: 'No, I want to continue',\n        description: 'No, I want to continue',\n        id: 'CreateCostModelNoContinue',\n    },\n    CreateCostModelTitle: {\n        defaultMessage: 'Create a cost model',\n        description: 'Create a cost model',\n        id: 'CreateCostModelTitle',\n    },\n    CreateRate: {\n        defaultMessage: 'Create rate',\n        description: 'Create rate',\n        id: 'CreateRate',\n    },\n    Currency: {\n        defaultMessage: 'Currency',\n        description: 'Currency',\n        id: 'Currency',\n    },\n    CurrencyAbbreviations: {\n        defaultMessage: '{symbol, select, ' +\n            'billion {{value} B} ' +\n            'million {{value} M} ' +\n            'quadrillion {{value} q} ' +\n            'thousand {{value} K} ' +\n            'trillion {{value} t} ' +\n            'other {}}',\n        description: 'str.match(/([\\\\D]*)([\\\\d.,]+)([\\\\D]*)/)',\n        id: 'CurrencyAbbreviations',\n    },\n    // See https://www.localeplanet.com/icu/currency.html\n    CurrencyOptions: {\n        defaultMessage: '{units, select, ' +\n            'AUD {AUD (A$) - Australian Dollar}' +\n            'CAD {CAD (CA$) - Canadian Dollar}' +\n            'CHF {CHF (CHF) - Swiss Franc}' +\n            'CNY {CNY (CN¥) - Chinese Yuan}' +\n            'DKK {DKK (DKK) - Danish Krone}' +\n            'EUR {EUR (€) - Euro}' +\n            'GBP {GBP (£) - British Pound}' +\n            'HKD {HKD (HK$) - Hong Kong Dollar}' +\n            'JPY {JPY (¥) - Japanese Yen}' +\n            'NOK {NOK (NOK) - Norwegian Krone}' +\n            'NZD {NZD (NZ$) - New Zealand Dollar}' +\n            'SEK {SEK (SEK) - Swedish Krona}' +\n            'SGD {SGD (SGD) - Singapore Dollar}' +\n            'USD {USD ($) - United States Dollar} ' +\n            'ZAR {ZAR (ZAR) - South African Rand}' +\n            'other {}}',\n        description: 'return the proper unit label based on key: \"units\"',\n        id: 'CurrencyOptions',\n    },\n    // See https://www.localeplanet.com/icu/currency.html\n    CurrencyUnits: {\n        defaultMessage: '{units, select, ' +\n            'AUD {A$}' +\n            'CAD {CA$}' +\n            'CHF {CHF}' +\n            'CNY {CN¥}' +\n            'DKK {DKK}' +\n            'EUR {€}' +\n            'GBP {£}' +\n            'HKD {HK$}' +\n            'JPY {¥}' +\n            'NOK {NOK}' +\n            'NZD {NZ$}' +\n            'SEK {SEK}' +\n            'SGD {SGD}' +\n            'USD {$} ' +\n            'ZAR {ZAR}' +\n            'other {}}',\n        description: 'return the proper unit label based on key: \"units\"',\n        id: 'CurrencyUnits',\n    },\n    DashboardCumulativeCostComparison: {\n        defaultMessage: 'Cumulative cost comparison ({units})',\n        description: 'Cumulative cost comparison ({units})',\n        id: 'DashboardCumulativeCostComparison',\n    },\n    DashboardDailyUsageComparison: {\n        defaultMessage: 'Daily usage comparison ({units})',\n        description: 'Daily usage comparison ({units})',\n        id: 'DashboardDailyUsageComparison',\n    },\n    DashboardDatabaseTitle: {\n        defaultMessage: 'Database services cost',\n        description: 'Database services cost',\n        id: 'DashboardDatabaseTitle',\n    },\n    DashboardNetworkTitle: {\n        defaultMessage: 'Network services cost',\n        description: 'Network services cost',\n        id: 'DashboardNetworkTitle',\n    },\n    DashboardStorageTitle: {\n        defaultMessage: 'Storage services usage',\n        description: 'Storage services usage',\n        id: 'DashboardStorageTitle',\n    },\n    DashboardTotalCostTooltip: {\n        defaultMessage: 'This total cost is the sum of the infrastructure cost {infrastructureCost} and supplementary cost {supplementaryCost}',\n        description: 'total cost is the sum of the infrastructure cost and supplementary cost',\n        id: 'DashboardTotalCostTooltip',\n    },\n    Delete: {\n        defaultMessage: 'Delete',\n        description: 'Delete',\n        id: 'Delete',\n    },\n    Description: {\n        defaultMessage: 'Description',\n        description: 'Description',\n        id: 'Description',\n    },\n    DetailsActionsExport: {\n        defaultMessage: 'Export data',\n        description: 'Export data',\n        id: 'DetailsActionsExport',\n    },\n    DetailsActionsPriceList: {\n        defaultMessage: 'View all price lists',\n        description: 'View all price lists',\n        id: 'DetailsActionsPriceList',\n    },\n    DetailsClustersModalTitle: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {account {name} clusters} ' +\n            'cluster {cluster {name} clusters} ' +\n            'gcp_project {GCP project {name} clusters} ' +\n            'instance_type {instance type {name} clusters} ' +\n            'node {node {name} clusters} ' +\n            'org_unit_id {organizational unit {name} clusters} ' +\n            'project {project {name} clusters} ' +\n            'region {region {name} clusters} ' +\n            'resource_location {region {name} clusters} ' +\n            'service {service {name} clusters} ' +\n            'service_name {service {name} clusters} ' +\n            'subscription_guid {account {name} clusters} ' +\n            'tag {tags {name} clusters} ' +\n            'other {}}',\n        description: '{groupBy} {name} clusters',\n        id: 'DetailsClustersModalTitle',\n    },\n    DetailsColumnManagementTitle: {\n        defaultMessage: 'Manage columns',\n        description: 'Manage columns',\n        id: 'DetailsColumnManagementTitle',\n    },\n    DetailsCostValue: {\n        defaultMessage: 'Cost: {value}',\n        description: 'Cost value',\n        id: 'DetailsCostValue',\n    },\n    DetailsEmptyState: {\n        defaultMessage: 'Processing data to generate a list of all services that sums to a total cost...',\n        description: 'Processing data to generate a list of all services that sums to a total cost...',\n        id: 'DetailsEmptyState',\n    },\n    DetailsMoreClusters: {\n        defaultMessage: ', {value} more...',\n        description: ', {value} more...',\n        id: 'DetailsMoreClusters',\n    },\n    DetailsResourceNames: {\n        defaultMessage: '{value, select, ' +\n            'account {Account names} ' +\n            'cluster {Cluster names} ' +\n            'gcp_project {GCP project names} ' +\n            'instance_type {Instance type names} ' +\n            'node {Node names} ' +\n            'org_unit_id {Organizational unit names} ' +\n            'project {Project names} ' +\n            'region {Region names} ' +\n            'resource_location {Region names} ' +\n            'service {Service names} ' +\n            'service_name {Service names} ' +\n            'subscription_guid {Account names} ' +\n            'tag {Tag names} ' +\n            'other {}}',\n        description: 'details table resource names',\n        id: 'DetailsResourceNames',\n    },\n    DetailsSummaryModalTitle: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {{name} accounts} ' +\n            'cluster {{name} clusters} ' +\n            'gcp_project {{name} GCP projects} ' +\n            'instance_type {{name} instance types} ' +\n            'node {{name} nodes} ' +\n            'org_unit_id {{name} organizational units} ' +\n            'project {{name} projects} ' +\n            'region {{name} regions} ' +\n            'resource_location {{name} regions} ' +\n            'service {{name} services} ' +\n            'service_name {{name} services} ' +\n            'subscription_guid {{name} accounts} ' +\n            'tag {{name} tags} ' +\n            'other {}}',\n        description: ', {value} more...',\n        id: 'DetailsSummaryModalTitle',\n    },\n    DetailsUnusedRequestsLabel: {\n        defaultMessage: 'Unrequested capacity',\n        description: 'Unrequested capacity',\n        id: 'DetailsUnusedRequestsLabel',\n    },\n    DetailsUnusedUnits: {\n        defaultMessage: '{units} ({percentage}% of capacity)',\n        description: '{units} ({percentage}% of capacity)',\n        id: 'DetailsUnusedUsageUnits',\n    },\n    DetailsUnusedUsageLabel: {\n        defaultMessage: 'Unused capacity',\n        description: 'Unused capacity',\n        id: 'DetailsUnusedUsageLabel',\n    },\n    DetailsUsageCapacity: {\n        defaultMessage: 'Capacity - {value} {units}',\n        description: 'Capacity - {value} {units}',\n        id: 'DetailsUsageCapacity',\n    },\n    DetailsUsageLimit: {\n        defaultMessage: 'Limit - {value} {units}',\n        description: 'Limit - {value} {units}',\n        id: 'DetailsUsageLimit',\n    },\n    DetailsUsageRequests: {\n        defaultMessage: 'Requests - {value} {units}',\n        description: 'Requests - {value} {units}',\n        id: 'DetailsUsageRequests',\n    },\n    DetailsUsageUsage: {\n        defaultMessage: 'Usage - {value} {units}',\n        description: 'Usage - {value} {units}',\n        id: 'DetailsUsageUsage',\n    },\n    DetailsViewAll: {\n        defaultMessage: '{value, select, ' +\n            'account {View all accounts} ' +\n            'cluster {View all clusters} ' +\n            'gcp_project {View all GCP projects} ' +\n            'instance_type {View all instance types} ' +\n            'node {View all nodes} ' +\n            'org_unit_id {View all organizational units} ' +\n            'project {View all projects} ' +\n            'region {View all regions} ' +\n            'resource_location {View all regions} ' +\n            'service {View all Services} ' +\n            'service_name {View all services} ' +\n            'subscription_guid {View all accounts} ' +\n            'tag {View all tags} ' +\n            'other {}}',\n        description: 'View all {value}',\n        id: 'DetailsViewAll',\n    },\n    DiscountMinus: {\n        defaultMessage: 'Discount (-)',\n        description: 'Discount (-)',\n        id: 'DiscountMinus',\n    },\n    DistributionModelDesc: {\n        defaultMessage: 'This choice is for users to direct how their raw costs are distributed either by CPU or Memory on the project level breakdowns.',\n        description: 'This choice is for users to direct how their raw costs are distributed either by CPU or Memory on the project level breakdowns.',\n        id: 'DistributionModelDesc',\n    },\n    DistributionType: {\n        defaultMessage: 'Distribution type',\n        description: 'Distribution type',\n        id: 'DistributionType',\n    },\n    DocsAddOcpSources: {\n        defaultMessage: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/adding_an_openshift_container_platform_source_to_cost_management',\n        description: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/adding_an_openshift_container_platform_source_to_cost_management',\n        id: 'DocsAddOcpSources',\n    },\n    DocsConfigCostModels: {\n        defaultMessage: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models/index#assembly-setting-up-cost-models',\n        description: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models/index#assembly-setting-up-cost-models',\n        id: 'DocsConfigCostModels',\n    },\n    DocsCostModelTerminology: {\n        defaultMessage: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models/index#cost-model-terminology',\n        description: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models/index#cost-model-terminology',\n        id: 'DocsCostModelTerminology',\n    },\n    DocsUsingCostModels: {\n        defaultMessage: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models',\n        description: 'https://access.redhat.com/documentation/en-us/cost_management_service/2021/html-single/using_cost_models',\n        id: 'DocsUsingCostModels',\n    },\n    Download: {\n        defaultMessage: 'Download',\n        description: 'download',\n        id: 'Download',\n    },\n    Edit: {\n        defaultMessage: 'Edit',\n        description: 'Edit',\n        id: 'Edit',\n    },\n    EditCostModel: {\n        defaultMessage: 'Edit cost model',\n        description: 'Edit cost model',\n        id: 'EditCostModel',\n    },\n    EditMarkup: {\n        defaultMessage: 'Edit markup',\n        description: 'Edit markup',\n        id: 'EditMarkup',\n    },\n    EditMarkupOrDiscount: {\n        defaultMessage: 'Edit markup or discount',\n        description: 'Edit markup or discount',\n        id: 'EditMarkupOrDiscount',\n    },\n    EmptyFilterSourceStateSubtitle: {\n        defaultMessage: 'Sorry, no source with the given filter was found.',\n        description: 'Sorry, no source with the given filter was found.',\n        id: 'EmptyFilterSourceStateSubtitle',\n    },\n    EmptyFilterStateSubtitle: {\n        defaultMessage: 'Sorry, no data with the given filter was found.',\n        description: 'Sorry, no data with the given filter was found.',\n        id: 'EmptyFilterStateSubtitle',\n    },\n    EmptyFilterStateTitle: {\n        defaultMessage: 'No match found',\n        description: 'No match found',\n        id: 'EmptyFilterStateTitle',\n    },\n    EqualsSymbol: {\n        defaultMessage: '=',\n        description: 'equals',\n        id: 'EqualsSymbol',\n    },\n    ErrorStateNotAuthorizedDesc: {\n        defaultMessage: 'Contact the cost management administrator to provide access to this application',\n        description: 'Contact the cost management administrator to provide access to this application',\n        id: 'ErrorStateNotAuthorizedDesc',\n    },\n    ErrorStateNotAuthorizedTitle: {\n        defaultMessage: \"You don't have access to the Cost management application\",\n        description: \"You don't have access to the Cost management application\",\n        id: 'ErrorStateNotAuthorizedTitle',\n    },\n    ErrorStateUnexpectedDesc: {\n        defaultMessage: 'We encountered an unexpected error. Contact your administrator.',\n        description: 'We encountered an unexpected error. Contact your administrator.',\n        id: 'ErrorStateUnexpectedDesc',\n    },\n    ErrorStateUnexpectedTitle: {\n        defaultMessage: 'Oops!',\n        description: 'Oops!',\n        id: 'ErrorStateUnexpectedTitle',\n    },\n    ExamplesTitle: {\n        defaultMessage: 'Examples',\n        description: 'Examples',\n        id: 'ExamplesTitle',\n    },\n    ExpiresOn: {\n        defaultMessage: 'Expires on',\n        description: 'Expires on',\n        id: 'ExpiresOn',\n    },\n    ExplorerChartDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {Jan {date}} ' +\n            '1 {Feb {date}} ' +\n            '2 {Mar {date}} ' +\n            '3 {Apr {date}} ' +\n            '4 {May {date}} ' +\n            '5 {Jun {date}} ' +\n            '6 {Jul {date}} ' +\n            '7 {Aug {date}} ' +\n            '8 {Sep {date}} ' +\n            '9 {Oct {date}} ' +\n            '10 {Nov {date}} ' +\n            '11 {Dec {date}} ' +\n            'other {}}',\n        description: 'Month {date}',\n        id: 'ExplorerDateColumn',\n    },\n    ExplorerChartTitle: {\n        defaultMessage: '{value, select, ' +\n            'aws {Amazon Web Services - Top 5 Costliest} ' +\n            'aws_ocp {Amazon Web Services filtered by OpenShift - Top 5 Costliest} ' +\n            'azure {Microsoft Azure - Top 5 Costliest} ' +\n            'azure_ocp {Microsoft Azure filtered by OpenShift - Top 5 Costliest} ' +\n            'gcp {Google Cloud Platform - Top 5 Costliest} ' +\n            'gcp_ocp {Google Cloud Platform filtered by OpenShift - Top 5 Costliest} ' +\n            'ibm {IBM Cloud - Top 5 Costliest} ' +\n            'ibm_ocp {IBM Cloud filtered by OpenShift - Top 5 Costliest} ' +\n            'ocp {All OpenShift - Top 5 Costliest} ' +\n            'ocp_cloud {All cloud filtered by OpenShift - Top 5 Costliest} ' +\n            'other {}}',\n        description: 'Explorer chart title',\n        id: 'ExplorerChartTitle',\n    },\n    ExplorerDateRange: {\n        defaultMessage: '{value, select, ' +\n            'current_month_to_date {Month to date} ' +\n            'last_ninety_days {Last 90 days} ' +\n            'last_sixty_days {Last 60 days} ' +\n            'last_thirty_days {Last 30 days} ' +\n            'previous_month_to_date {Previous month and month to date} ' +\n            'other {}}',\n        description: 'date range based on {value}',\n        id: 'ExplorerDateRange',\n    },\n    ExplorerMonthDate: {\n        defaultMessage: '{month} {date}',\n        description: 'Cost {month} {date}',\n        id: 'ExplorerMonthDate',\n    },\n    ExplorerTableAriaLabel: {\n        defaultMessage: 'Cost Explorer table',\n        description: 'Cost Explorer table',\n        id: 'ExplorerTableAriaLabel',\n    },\n    ExplorerTitle: {\n        defaultMessage: 'Cost Explorer',\n        description: 'Cost Explorer title',\n        id: 'ExplorerTitle',\n    },\n    ExportAggregateType: {\n        defaultMessage: 'Aggregate type',\n        description: 'Aggregate type',\n        id: 'ExportAggregateType',\n    },\n    ExportAll: {\n        defaultMessage: 'Export all',\n        description: 'Export all',\n        id: 'ExportAll',\n    },\n    ExportDesc: {\n        defaultMessage: 'The active selections from the table plus the values here will be used to generate an export file. When the file is available, download it from the {value} view.',\n        description: 'Export description',\n        id: 'ExportAll',\n    },\n    ExportError: {\n        defaultMessage: 'Something went wrong, please try fewer selections',\n        description: 'Export error',\n        id: 'ExportError',\n    },\n    ExportFileName: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {{resolution, select, daily {{provider}_accounts_daily_{startDate}_{endDate}} monthly {{provider}_accounts_monthly_{startDate}_{endDate}} other {}}} ' +\n            'cluster {{resolution, select, daily {{provider}_clusters_daily_{startDate}_{endDate}} monthly {{provider}_clusters_monthly_{startDate}_{endDate}} other {}}} ' +\n            'gcp_project {{resolution, select, daily {{provider}_gcp-projects_daily_{startDate}_{endDate}} monthly {{provider}_gcp-projects_monthly_{startDate}_{endDate}} other {}}} ' +\n            'instance_type {{resolution, select, daily {{provider}_instances_daily_{startDate}_{endDate}} monthly {{provider}_instances_monthly_{startDate}_{endDate}} other {}}} ' +\n            'node {{resolution, select, daily {{provider}_node_daily_{startDate}_{endDate}} monthly {{provider}_node_monthly_{startDate}_{endDate}} other {}}} ' +\n            'org_unit_id {{resolution, select, daily {{provider}_orgs_daily_{startDate}_{endDate}} monthly {{provider}_orgs_monthly_{startDate}_{endDate}} other {}}} ' +\n            'project {{resolution, select, daily {{provider}_projects_daily_{startDate}_{endDate}} monthly {{provider}_projects_monthly_{startDate}_{endDate}} other {}}} ' +\n            'region {{resolution, select, daily {{provider}_regions_daily_{startDate}_{endDate}} monthly {{provider}_regions_monthly_{startDate}_{endDate}} other {}}} ' +\n            'resource_location {{resolution, select, daily {{provider}_regions_daily_{startDate}_{endDate}} monthly {{provider}_regions_monthly_{startDate}_{endDate}} other {}}} ' +\n            'service {{resolution, select, daily {{provider}_services_daily_{startDate}_{endDate}} monthly {{provider}_services_monthly_{startDate}_{endDate}} other {}}} ' +\n            'service_name {{resolution, select, daily {{provider}_services_daily_{startDate}_{endDate}} monthly {{provider}_services_monthly_{startDate}_{endDate}} other {}}} ' +\n            'subscription_guid {{resolution, select, daily {{provider}_accounts_daily_{startDate}_{endDate}} monthly {{provider}_accounts_monthly_{startDate}_{endDate}} other {}}} ' +\n            'tag {{resolution, select, daily {{provider}_tags_daily_{startDate}_{endDate}} monthly {{provider}_tags_monthly_{startDate}_{endDate}} other {}}} ' +\n            'other {}}',\n        description: 'Export file name',\n        id: 'ExportFileName',\n    },\n    ExportFormatType: {\n        defaultMessage: '{value, select, csv {CSV} json {JSON} other {}}',\n        description: 'Export format type',\n        id: 'ExportFormatType',\n    },\n    ExportFormatTypeTitle: {\n        defaultMessage: 'Format type',\n        description: 'Format type',\n        id: 'ExportFormatTypeTitle',\n    },\n    ExportHeading: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {Aggregates of the following accounts will be exported to a .csv file.} ' +\n            'cluster {Aggregates of the following clusters will be exported to a .csv file.} ' +\n            'gcp_project {Aggregates of the following GCP projects will be exported to a .csv file.} ' +\n            'instance_type {Aggregates of the following instance types will be exported to a .csv file.} ' +\n            'node {Aggregates of the following nodes will be exported to a .csv file.} ' +\n            'org_unit_id {Aggregates of the following organizational units will be exported to a .csv file.} ' +\n            'project {Aggregates of the following projects will be exported to a .csv file.} ' +\n            'region {Aggregates of the following regions will be exported to a .csv file.} ' +\n            'resource_location {Aggregates of the regions will be exported to a .csv file.} ' +\n            'service {Aggregates of the following services will be exported to a .csv file.} ' +\n            'service_name {Aggregates of the following services will be exported to a .csv file.} ' +\n            'subscription_guid {Aggregates of the following accounts will be exported to a .csv file.} ' +\n            'tag {Aggregates of the following tags will be exported to a .csv file.} ' +\n            'other {}}',\n        description: 'Export heading',\n        id: 'ExportHeading',\n    },\n    ExportName: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {{provider, select, aws {Amazon Web Services grouped by Account} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Account} azure {Microsoft Azure grouped by Account} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Account} gcp {Google Cloud Platform grouped by Account} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Account} ibm {IBM Cloud grouped by Account} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Account} ocp {OpenShift grouped by Account} ocp_cloud {All cloud filtered by OpenShift grouped by Account} other {}}} ' +\n            'cluster {{provider, select, aws {Amazon Web Services grouped by Cluster} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Cluster} azure {Microsoft Azure grouped by Cluster} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Cluster} gcp {Google Cloud Platform grouped by Cluster} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Cluster} ibm {IBM Cloud grouped by Cluster} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Cluster} ocp {OpenShift grouped by Cluster} ocp_cloud {All cloud filtered by OpenShift grouped by Cluster} other {}}} ' +\n            'gcp_project {{provider, select, aws {Amazon Web Services grouped by GCP Project} aws_ocp {Amazon Web Services filtered by OpenShift grouped by GCP Project} azure {Microsoft Azure grouped by GCP Project} azure_ocp {Microsoft Azure filtered by OpenShift grouped by GCP Project} gcp {Google Cloud Platform grouped by GCP Project} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by GCP Project} ibm {IBM Cloud grouped by GCP Project} ibm_ocp {IBM Cloud filtered by OpenShift grouped by GCP Project} ocp {OpenShift grouped by GCP Project} ocp_cloud {All cloud filtered by OpenShift grouped by GCP Project} other {}}} ' +\n            'node {{provider, select, aws {Amazon Web Services grouped by Node} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Node} azure {Microsoft Azure grouped by Node} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Node} gcp {Google Cloud Platform grouped by Node} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Node} ibm {IBM Cloud grouped by Node} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Node} ocp {OpenShift grouped by Node} ocp_cloud {All cloud filtered by OpenShift grouped by Node} other {}}} ' +\n            'org_unit_id {{provider, select, aws {Amazon Web Services grouped by Organizational unit} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Organizational unit} azure {Microsoft Azure grouped by Organizational unit} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Organizational unit} gcp {Google Cloud Platform grouped by Organizational unit} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Organizational unit} ibm {IBM Cloud grouped by Organizational unit} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Organizational unit} ocp {OpenShift grouped by Organizational unit} ocp_cloud {All cloud filtered by OpenShift grouped by Organizational unit} other {}}} ' +\n            'project {{provider, select, aws {Amazon Web Services grouped by Project} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Project} azure {Microsoft Azure grouped by Project} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Project} gcp {Google Cloud Platform grouped by Project} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Project} ibm {IBM Cloud grouped by Project} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Project} ocp {OpenShift grouped by Project} ocp_cloud {All cloud filtered by OpenShift grouped by Project} other {}}} ' +\n            'region {{provider, select, aws {Amazon Web Services grouped by Region} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Region} azure {Microsoft Azure grouped by Region} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Region} gcp {Google Cloud Platform grouped by Region} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Region} ibm {IBM Cloud grouped by Region} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Region} ocp {OpenShift grouped by Region} ocp_cloud {All cloud filtered by OpenShift grouped by Region} other {}}} ' +\n            'resource_location {{provider, select, aws {Amazon Web Services grouped by Region} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Region} azure {Microsoft Azure grouped by Region} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Region} gcp {Google Cloud Platform grouped by Region} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Region} ibm {IBM Cloud grouped by Region} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Region} ocp {OpenShift grouped by Region} ocp_cloud {All cloud filtered by OpenShift grouped by Region} other {}}} ' +\n            'service {{provider, select, aws {Amazon Web Services grouped by Service} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Service} azure {Microsoft Azure grouped by Service} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Service} gcp {Google Cloud Platform grouped by Service} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Service} ibm {IBM Cloud grouped by Service} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Service} ocp {OpenShift grouped by Service} ocp_cloud {All cloud filtered by OpenShift grouped by Service} other {}}} ' +\n            'service_name {{provider, select, aws {Amazon Web Services grouped by Service} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Service} azure {Microsoft Azure grouped by Service} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Service} gcp {Google Cloud Platform grouped by Service} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Service} ibm {IBM Cloud grouped by Service} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Service} ocp {OpenShift grouped by Service} ocp_cloud {All cloud filtered by OpenShift grouped by Service} other {}}} ' +\n            'subscription_guid {{provider, select, aws {Amazon Web Services grouped by Account} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Account} azure {Microsoft Azure grouped by Account} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Account} gcp {Google Cloud Platform grouped by Account} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Account} ibm {IBM Cloud grouped by Account} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Account} ocp {OpenShift grouped by Account} ocp_cloud {All cloud filtered by OpenShift grouped by Account} other {}}} ' +\n            'tag {{provider, select, aws {Amazon Web Services grouped by Tag} aws_ocp {Amazon Web Services filtered by OpenShift grouped by Tag} azure {Microsoft Azure grouped by Tag} azure_ocp {Microsoft Azure filtered by OpenShift grouped by Tag} gcp {Google Cloud Platform grouped by Tag} gcp_ocp {Google Cloud Platform filtered by OpenShift grouped by Tag} ibm {IBM Cloud grouped by Tag} ibm_ocp {IBM Cloud filtered by OpenShift grouped by Tag} ocp {OpenShift grouped by Tag} ocp_cloud {All cloud filtered by OpenShift grouped by Tag} other {}}} ' +\n            'other {}}',\n        description: 'Export name',\n        id: 'ExportName',\n    },\n    ExportNotificationErrorDesc: {\n        defaultMessage: 'Something went wrong with the generation of this export file. Try exporting again.',\n        description: 'Export error notification description',\n        id: 'ExportNotificationErrorDesc',\n    },\n    ExportNotificationErrorTitle: {\n        defaultMessage: 'Export cannot be generated',\n        description: 'Export error notification title',\n        id: 'ExportNotificationErrorTitle',\n    },\n    ExportNotificationSuccessDesc: {\n        defaultMessage: 'The export is preparing for download. It will be accessible from {value} view. {link}',\n        description: 'Export success notification description',\n        id: 'ExportNotificationSuccessDesc',\n    },\n    ExportNotificationSuccessTitle: {\n        defaultMessage: 'Export preparing for download',\n        description: 'Export success notification title',\n        id: 'ExportNotificationSuccessTitle',\n    },\n    ExportResolution: {\n        defaultMessage: '{value, select, daily {Daily} monthly {Monthly} other {}}',\n        description: 'Export file name',\n        id: 'ExportResolution',\n    },\n    ExportSelected: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {Selected accounts ({count})} ' +\n            'cluster {Selected clusters ({count})} ' +\n            'gcp_project {Selected GCP projects ({count})} ' +\n            'instance_type {Selected instance types ({count})} ' +\n            'node {Selected nodes ({count})} ' +\n            'org_unit_id {Selected organizational units ({count})} ' +\n            'project {Selected projects ({count})} ' +\n            'region {Selected regions ({count})} ' +\n            'resource_location {Selected regions ({count})} ' +\n            'service {Selected services ({count})} ' +\n            'service_name {Selected services ({count})} ' +\n            'subscription_guid {Selected accounts ({count})} ' +\n            'tag {Selected tags ({count})} ' +\n            'other {}}',\n        description: 'Selected items for export',\n        id: 'ExportSelected',\n    },\n    ExportTimeScope: {\n        defaultMessage: '{value, select, current {Current ({date})} previous {Previous ({date})} other {}}',\n        description: 'Export time scope',\n        id: 'ExportTimeScope',\n    },\n    ExportTimeScopeTitle: {\n        defaultMessage: 'Month',\n        description: 'Month',\n        id: 'ExportTimeScopeTitle',\n    },\n    ExportTitle: {\n        defaultMessage: 'Export',\n        description: 'Export title',\n        id: 'ExportTitle',\n    },\n    ExportsDesc: {\n        defaultMessage: 'Exports are available for download from the time that they are generated up to 7 days later. After 7 days, the export file will be removed.',\n        description: 'Exports are available for download from the time that they are generated up to 7 days later. After 7 days, the export file will be removed.',\n        id: 'ExportsDesc',\n    },\n    ExportsDownload: {\n        defaultMessage: 'Generate and download',\n        description: 'Export download',\n        id: 'ExportsDownload',\n    },\n    ExportsFailed: {\n        defaultMessage: 'Could not create export file',\n        description: 'Could not create export file',\n        id: 'ExportsFailed',\n    },\n    ExportsFailedDesc: {\n        defaultMessage: 'Something went wrong with the generation of this export file. Try exporting again.',\n        description: 'Something went wrong with the generation of this export file. Try exporting again.',\n        id: 'ExportsFailedDesc',\n    },\n    ExportsTableAriaLabel: {\n        defaultMessage: 'Available exports table',\n        description: 'Available exports table',\n        id: 'ExportsTableAriaLabel',\n    },\n    ExportsTitle: {\n        defaultMessage: 'All exports',\n        description: 'All exports',\n        id: 'ExportsTitle',\n    },\n    FilterByButtonAriaLabel: {\n        defaultMessage: '{value, select, ' +\n            'account {Filter button for account name} ' +\n            'cluster {Filter button for cluster name} ' +\n            'gcp_project {Filter button for GCP project name} ' +\n            'name {Filter button for name name} ' +\n            'node {Filter button for node name} ' +\n            'org_unit_id {Filter button for organizational unit name} ' +\n            'project {Filter button for project name} ' +\n            'region {Filter button for region name} ' +\n            'resource_location {Filter button for region name} ' +\n            'service {Filter button for service name} ' +\n            'service_name {Filter button for service_name name} ' +\n            'subscription_guid {Filter button for account name} ' +\n            'tag {Filter button for tag name} ' +\n            'other {}}',\n        description: 'Filter button for \"value\" name',\n        id: 'FilterByButtonAriaLabel',\n    },\n    FilterByInputAriaLabel: {\n        defaultMessage: '{value, select, ' +\n            'account {Input for account name} ' +\n            'cluster {Input for cluster name} ' +\n            'gcp_project {Input for GCP project name} ' +\n            'name {Input for name name} ' +\n            'node {Input for node name} ' +\n            'org_unit_id {Input for organizational unit name} ' +\n            'project {Input for project name} ' +\n            'region {Input for region name} ' +\n            'resource_location {Input for region name} ' +\n            'service {Input for service name} ' +\n            'service_name {Input for service_name name} ' +\n            'subscription_guid {Input for account name} ' +\n            'tag {Input for tag name} ' +\n            'other {}}',\n        description: 'Input for {value} name',\n        id: 'FilterByInputAriaLabel',\n    },\n    FilterByOrgUnitAriaLabel: {\n        defaultMessage: 'Organizational units',\n        description: 'Organizational units',\n        id: 'FilterByOrgUnitAriaLabel',\n    },\n    FilterByOrgUnitPlaceholder: {\n        defaultMessage: 'Choose unit',\n        description: 'Choose unit',\n        id: 'FilterByOrgUnitPlaceholder',\n    },\n    FilterByPlaceholder: {\n        defaultMessage: '{value, select, ' +\n            'account {Filter by account} ' +\n            'cluster {Filter by cluster} ' +\n            'description {Filter by description} ' +\n            'gcp_project {Filter by GCP project} ' +\n            'name {Filter by name} ' +\n            'node {Filter by node} ' +\n            'org_unit_id {Filter by organizational unit} ' +\n            'project {Filter by project} ' +\n            'region {Filter by region} ' +\n            'resource_location {Filter by region} ' +\n            'service {Filter by service} ' +\n            'service_name {Filter by service} ' +\n            'source_type {Filter by source type} ' +\n            'subscription_guid {Filter by account} ' +\n            'tag {Filter by tag} ' +\n            'other {}}',\n        description: 'Filter by \"value\"',\n        id: 'FilterByPlaceholder',\n    },\n    FilterByTagKeyAriaLabel: {\n        defaultMessage: 'Tag keys',\n        description: 'Tag keys',\n        id: 'FilterByTagKeyAriaLabel',\n    },\n    FilterByTagKeyPlaceholder: {\n        defaultMessage: 'Choose key',\n        description: 'Choose key',\n        id: 'FilterByTagKeyPlaceholder',\n    },\n    FilterByTagValueAriaLabel: {\n        defaultMessage: 'Tag values',\n        description: 'Tag values',\n        id: 'FilterByTagValueAriaLabel',\n    },\n    FilterByTagValueButtonAriaLabel: {\n        defaultMessage: 'Filter button for tag value',\n        description: 'Filter button for tag value',\n        id: 'FilterByTagValueButtonAriaLabel',\n    },\n    FilterByTagValueInputPlaceholder: {\n        defaultMessage: 'Filter by value',\n        description: 'Filter by value',\n        id: 'FilterByTagValueInputPlaceholder',\n    },\n    FilterByTagValuePlaceholder: {\n        defaultMessage: 'Choose value',\n        description: 'Choose value',\n        id: 'FilterByTagValuePlaceholder',\n    },\n    FilterByValues: {\n        defaultMessage: '{value, select, ' +\n            'account {Account} ' +\n            'cluster {Cluster} ' +\n            'gcp_project {GCP project} ' +\n            'name {Name} ' +\n            'node {Node} ' +\n            'org_unit_id {Organizational unit} ' +\n            'project {Project} ' +\n            'region {Region} ' +\n            'resource_location {Region} ' +\n            'service {Service} ' +\n            'service_name {Service} ' +\n            'subscription_guid {Account} ' +\n            'tag {Tag} ' +\n            'other {}}',\n        description: 'Filter by values',\n        id: 'FilterByValues',\n    },\n    ForDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {{value} for January {startDate}} other {{value} for January {startDate}-{endDate}}}} ' +\n            '1 {{count, plural, one {{value} for February {startDate}} other {{value} for February {startDate}-{endDate}}}} ' +\n            '2 {{count, plural, one {{value} for March {startDate}} other {{value} for March {startDate}-{endDate}}}} ' +\n            '3 {{count, plural, one {{value} for April {startDate}} other {{value} for April {startDate}-{endDate}}}} ' +\n            '4 {{count, plural, one {{value} for May {startDate}} other {{value} for May {startDate}-{endDate}}}} ' +\n            '5 {{count, plural, one {{value} for June {startDate}} other {{value} for June {startDate}-{endDate}}}} ' +\n            '6 {{count, plural, one {{value} for July {startDate}} other {{value} for July {startDate}-{endDate}}}} ' +\n            '7 {{count, plural, one {{value} for August {startDate}} other {{value} for August {startDate}-{endDate}}}} ' +\n            '8 {{count, plural, one {{value} for September {startDate}} other {{value} for September {startDate}-{endDate}}}} ' +\n            '9 {{count, plural, one {{value} for October {startDate}} other {{value} for October {startDate}-{endDate}}}} ' +\n            '10 {{count, plural, one {{value} for November {startDate}} other {{value} for November {startDate}-{endDate}}}} ' +\n            '11 {{count, plural, one {{value} for December {startDate}} other {{value} for December {startDate}-{endDate}}}} ' +\n            'other {}}',\n        description: '{value} for date range',\n        id: 'ForDate',\n    },\n    GCP: {\n        defaultMessage: 'Google Cloud Platform',\n        description: 'Google Cloud Platform',\n        id: 'GCP',\n    },\n    GCPComputeTitle: {\n        defaultMessage: 'Compute instances usage',\n        description: 'Compute instances usage',\n        id: 'GCPComputeTitle',\n    },\n    GCPCostTitle: {\n        defaultMessage: 'Google Cloud Platform Services cost',\n        description: 'Google Cloud Platform Services cost',\n        id: 'GCPCostTitle',\n    },\n    GCPCostTrendTitle: {\n        defaultMessage: 'Google Cloud Platform Services cumulative cost comparison ({units})',\n        description: 'Google Cloud Platform Services cumulative cost comparison ({units})',\n        id: 'GCPCostTrendTitle',\n    },\n    GCPDailyCostTrendTitle: {\n        defaultMessage: 'Google Cloud Platform Services daily cost comparison ({units})',\n        description: 'Google Cloud Platform Services daily cost comparison ({units})',\n        id: 'GCPDailyCostTrendTitle',\n    },\n    GCPDesc: {\n        defaultMessage: 'Raw cost from Google Cloud Platform infrastructure.',\n        description: 'Raw cost from Google Cloud Platform infrastructure.',\n        id: 'GCPDesc',\n    },\n    GCPDetailsTableAriaLabel: {\n        defaultMessage: 'Google Cloud Platform details table',\n        description: 'Google Cloud Platform details table',\n        id: 'GCPDetailsTable',\n    },\n    GCPDetailsTitle: {\n        defaultMessage: 'Google Cloud Platform Details',\n        description: 'Google Cloud Platform Details',\n        id: 'GCPDetailsTitle',\n    },\n    GroupByAll: {\n        defaultMessage: '{value, select, ' +\n            'account {{count, plural, one {All account} other {All accounts}}} ' +\n            'cluster {{count, plural, one {All cluster} other {All clusters}}} ' +\n            'gcp_project {{count, plural, one {All GCP project} other {All GCP projects}}} ' +\n            'instance_type {{count, plural, one {All instance type} other {All instance types}}} ' +\n            'node {{count, plural, one {All node} other {All nodes}}} ' +\n            'org_unit_id {{count, plural, one {All organizational unit} other {All organizational units}}} ' +\n            'project {{count, plural, one {All project} other {All projects}}} ' +\n            'region {{count, plural, one {All region} other {All regions}}} ' +\n            'resource_location {{count, plural, one {All region} other {All regions}}} ' +\n            'service {{count, plural, one {All service} other {All services}}} ' +\n            'service_name {{count, plural, one {All service} other {All services}}} ' +\n            'subscription_guid {{count, plural, one {All account} other {All accounts}}} ' +\n            'tag {{count, plural, one {All tag} other {All tags}}} ' +\n            'other {}}',\n        description: 'All group by value',\n        id: 'GroupByAll',\n    },\n    GroupByLabel: {\n        defaultMessage: 'Group by',\n        description: 'group by label',\n        id: 'GroupByLabel',\n    },\n    GroupByTop: {\n        defaultMessage: '{value, select, ' +\n            'account {{count, plural, one {Top account} other {Top accounts}}} ' +\n            'cluster {{count, plural, one {Top cluster} other {Top clusters}}} ' +\n            'gcp_project {{count, plural, one {Top GCP project} other {Top GCP projects}}} ' +\n            'instance_type {{count, plural, one {Top instance type} other {Top instance types}}} ' +\n            'node {{count, plural, one {Top node} other {Top node}}} ' +\n            'org_unit_id {{count, plural, one {Top organizational unit} other {Top organizational units}}} ' +\n            'project {{count, plural, one {Top project} other {Top projects}}} ' +\n            'region {{count, plural, one {Top region} other {Top regions}}} ' +\n            'resource_location {{count, plural, one {Top region} other {Top regions}}} ' +\n            'service {{count, plural, one {Top service} other {Top services}}} ' +\n            'service_name {{count, plural, one {Top service} other {Top services}}} ' +\n            'subscription_guid {{count, plural, one {Top account} other {Top accounts}}} ' +\n            'tag {{count, plural, one {Top tag} other {Top tags}}} ' +\n            'other {}}',\n        description: 'Top group by value',\n        id: 'GroupByTop',\n    },\n    GroupByValueNames: {\n        defaultMessage: '{groupBy, select, ' +\n            'account {Account names} ' +\n            'cluster {Cluster names} ' +\n            'gcp_project {GCP project names} ' +\n            'instance_type {Instance type names} ' +\n            'node {Node names} ' +\n            'org_unit_id {Organizational unit names} ' +\n            'project {Project names} ' +\n            'region {Region names} ' +\n            'resource_location {Region names} ' +\n            'service {Service names} ' +\n            'service_name {Service names} ' +\n            'subscription_guid {Account names} ' +\n            'tag {Tag names} ' +\n            'other {}}',\n        description: 'Selected items for export',\n        id: 'GroupByValueNames',\n    },\n    GroupByValues: {\n        defaultMessage: '{value, select, ' +\n            'account {{count, plural, one {account} other {accounts}}} ' +\n            'cluster {{count, plural, one {cluster} other {clusters}}} ' +\n            'gcp_project {{count, plural, one {GCP project} other {GCP projects}}} ' +\n            'instance_type {{count, plural, one {instance type} other {instance types}}} ' +\n            'node {{count, plural, one {node} other {node}}} ' +\n            'org_unit_id {{count, plural, one {organizational unit} other {organizational units}}} ' +\n            'project {{count, plural, one {project} other {projects}}} ' +\n            'region {{count, plural, one {region} other {regions}}} ' +\n            'resource_location {{count, plural, one {region} other {regions}}} ' +\n            'service {{count, plural, one {service} other {services}}} ' +\n            'service_name {{count, plural, one {service} other {services}}} ' +\n            'subscription_guid {{count, plural, one {account} other {accounts}}} ' +\n            'tag {{count, plural, one {tag} other {tags}}} ' +\n            'other {}}',\n        description: 'Group by values',\n        id: 'GroupByValues',\n    },\n    GroupByValuesTitleCase: {\n        defaultMessage: '{value, select, ' +\n            'account {{count, plural, one {Account} other {Accounts}}} ' +\n            'cluster {{count, plural, one {Cluster} other {Clusters}}} ' +\n            'gcp_project {{count, plural, one {GCP project} other {GCP projects}}} ' +\n            'instance_type {{count, plural, one {Instance type} other {Instance types}}} ' +\n            'node {{count, plural, one {Node} other {Node}}} ' +\n            'org_unit_id {{count, plural, one {Organizational unit} other {Organizational units}}} ' +\n            'project {{count, plural, one {Project} other {Projects}}} ' +\n            'region {{count, plural, one {Region} other {Regions}}} ' +\n            'resource_location {{count, plural, one {Region} other {Regions}}} ' +\n            'service {{count, plural, one {Service} other {Services}}} ' +\n            'service_name {{count, plural, one {Service} other {Services}}} ' +\n            'subscription_guid {{count, plural, one {Account} other {Accounts}}} ' +\n            'tag {{count, plural, one {Tag} other {Tags}}} ' +\n            'other {}}',\n        description: 'Group by values',\n        id: 'GroupByValuesTitleCase',\n    },\n    HistoricalChartCostLabel: {\n        defaultMessage: 'Cost ({units})',\n        description: 'Cost ({units})',\n        id: 'HistoricalChartCostLabel',\n    },\n    HistoricalChartDayOfMonthLabel: {\n        defaultMessage: 'Day of Month',\n        description: 'Day of Month',\n        id: 'HistoricalChartDayOfMonthLabel',\n    },\n    HistoricalChartTitle: {\n        defaultMessage: '{value, select, ' +\n            'cost {Cost comparison} ' +\n            'cpu {CPU usage, request, and limit comparison} ' +\n            'instance_type {Compute usage comparison} ' +\n            'memory {Memory usage, request, and limit comparison} ' +\n            'modal {{name} daily usage comparison} ' +\n            'storage {Storage usage comparison} ' +\n            'other {}}',\n        description: 'historical chart titles',\n        id: 'HistoricalChartTitle',\n    },\n    HistoricalChartUsageLabel: {\n        defaultMessage: '{value, select, instance_type {hrs} storage {gb-mo} other {}}',\n        description: 'historical chart usage labels',\n        id: 'HistoricalChartUsageLabel',\n    },\n    IBM: {\n        defaultMessage: 'IBM Cloud',\n        description: 'IBM Cloud',\n        id: 'IBM',\n    },\n    IBMComputeTitle: {\n        defaultMessage: 'Compute instances usage',\n        description: 'Compute instances usage',\n        id: 'IBMComputeTitle',\n    },\n    IBMCostTitle: {\n        defaultMessage: 'IBM Cloud Services cost',\n        description: 'IBM Cloud Services cost',\n        id: 'IBMCostTitle',\n    },\n    IBMCostTrendTitle: {\n        defaultMessage: 'IBM Cloud Services cumulative cost comparison ({units})',\n        description: 'IBM Cloud Services cumulative cost comparison ({units})',\n        id: 'IBMCostTrendTitle',\n    },\n    IBMDailyCostTrendTitle: {\n        defaultMessage: 'IBM Cloud Services daily cost comparison ({units})',\n        description: 'IBM Cloud Services daily cost comparison ({units})',\n        id: 'IBMDailyCostTrendTitle',\n    },\n    IBMDesc: {\n        defaultMessage: 'Raw cost from IBM Cloud infrastructure.',\n        description: 'Raw cost from IBM Cloud infrastructure.',\n        id: 'IBMDesc',\n    },\n    IBMDetailsTableAriaLabel: {\n        defaultMessage: 'IBM Cloud details table',\n        description: 'IBM Cloud details table',\n        id: 'IBMDetailsTable',\n    },\n    IBMDetailsTitle: {\n        defaultMessage: 'IBM Cloud Details',\n        description: 'IBM details title',\n        id: 'IBMDetailsTitle',\n    },\n    InactiveSourcesGoTo: {\n        defaultMessage: 'Go to Sources for more information',\n        description: 'Go to Sources for more information',\n        id: 'InactiveSourcesGoTo',\n    },\n    InactiveSourcesTitle: {\n        defaultMessage: 'A problem was detected with {value}',\n        description: 'A problem was detected with {value}',\n        id: 'InactiveSourcesGoTitle',\n    },\n    InactiveSourcesTitleMultiplier: {\n        defaultMessage: 'A problem was detected with the following sources',\n        description: 'A problem was detected with the following sources',\n        id: 'InactiveSourcesTitleMultiplier',\n    },\n    Infrastructure: {\n        defaultMessage: 'Infrastructure',\n        description: 'Infrastructure',\n        id: 'Infrastructure',\n    },\n    LearnMore: {\n        defaultMessage: 'Learn more',\n        description: 'Learn more',\n        id: 'LearnMore',\n    },\n    LoadingStateDesc: {\n        defaultMessage: 'Searching for your sources. Do not refresh the browser',\n        description: 'Searching for your sources. Do not refresh the browser',\n        id: 'LoadingStateDesc',\n    },\n    LoadingStateTitle: {\n        defaultMessage: 'Looking for sources...',\n        description: 'Looking for sources',\n        id: 'LoadingStateTitle',\n    },\n    MaintenanceEmptyStateDesc: {\n        defaultMessage: 'Cost Management is currently undergoing scheduled maintenance and will be unavailable from 13:00 - 19:00 UTC (09:00 AM - 03:00 PM EDT).',\n        description: 'Cost Management is currently undergoing scheduled maintenance',\n        id: 'MaintenanceEmptyStateDesc',\n    },\n    MaintenanceEmptyStateInfo: {\n        defaultMessage: 'For more information visit {url}',\n        description: 'more information url',\n        id: 'MaintenanceEmptyStateInfo',\n    },\n    MaintenanceEmptyStateThanks: {\n        defaultMessage: 'We will be back soon. Thank you for your patience!',\n        description: 'thanks you for your patience',\n        id: 'MaintenanceEmptyStateThanks',\n    },\n    ManageColumnsAriaLabel: {\n        defaultMessage: 'Table column management',\n        description: 'Table column management',\n        id: 'ManageColumnsAriaLabel',\n    },\n    ManageColumnsDesc: {\n        defaultMessage: 'Selected categories will be displayed in the table',\n        description: 'Selected categories will be displayed in the table',\n        id: 'ManageColumnsDesc',\n    },\n    ManageColumnsTitle: {\n        defaultMessage: 'Manage columns',\n        description: 'Manage columns',\n        id: 'ManageColumnsTitle',\n    },\n    MarkupDescription: {\n        defaultMessage: 'The portion of cost calculated by applying markup or discount to infrastructure raw cost in the cost management application',\n        description: 'The portion of cost calculated by applying markup or discount to infrastructure raw cost in the cost management application',\n        id: 'MarkupDescription',\n    },\n    MarkupOrDiscount: {\n        defaultMessage: 'Markup or Discount',\n        description: 'Markup or Discount',\n        id: 'MarkupOrDiscount',\n    },\n    MarkupOrDiscountDesc: {\n        defaultMessage: 'This Percentage is applied to raw cost calculations by multiplying the cost with this percentage. Costs calculated from price list rates will not be effected.',\n        description: 'This Percentage is applied to raw cost calculations by multiplying the cost with this percentage. Costs calculated from price list rates will not be effected.',\n        id: 'MarkupOrDiscountDesc',\n    },\n    MarkupOrDiscountModalDesc: {\n        defaultMessage: 'Use markup/discount to manipulate how the raw costs are being calculated for your sources. Note, costs calculated from price list rates will not be affected by this.',\n        description: 'Use markup/discount to manipulate how the raw costs are being calculated for your sources. Note, costs calculated from price list rates will not be affected by this.',\n        id: 'MarkupOrDiscountModalDesc',\n    },\n    MarkupOrDiscountNumber: {\n        defaultMessage: 'Markup or discount must be a number',\n        description: 'Markup or discount must be a number',\n        id: 'MarkupOrDiscountNumber',\n    },\n    MarkupOrDiscountTooLong: {\n        defaultMessage: 'Should not exceed 10 decimals',\n        description: 'Should not exceed 10 decimals',\n        id: 'MarkupOrDiscountTooLong',\n    },\n    MarkupPlus: {\n        defaultMessage: 'Markup (+)',\n        description: 'Markup (+)',\n        id: 'MarkupPlus',\n    },\n    MarkupTitle: {\n        defaultMessage: 'Markup',\n        description: 'Markup',\n        id: 'MarkupTitle',\n    },\n    Measurement: {\n        defaultMessage: 'Measurement',\n        description: 'Measurement',\n        id: 'Measurement',\n    },\n    MeasurementPlaceholder: {\n        defaultMessage: 'Filter by measurements',\n        description: 'Filter by measurements',\n        id: 'MeasurementPlaceholder',\n    },\n    MeasurementValues: {\n        defaultMessage: '{value, select, ' +\n            'count {{count, plural, one {Count} other {Count ({units})}}} ' +\n            'effective_usage {{count, plural, one {Request} other {Effective-usage ({units})}}} ' +\n            'request {{count, plural, one {Request} other {Request ({units})}}} ' +\n            'usage {{count, plural, one {Usage} other {Usage ({units})}}} ' +\n            'other {}}',\n        description: 'Measurement values',\n        id: 'MeasurementValues',\n    },\n    MemoryTitle: {\n        defaultMessage: 'Memory',\n        description: 'Memory',\n        id: 'MemoryTitle',\n    },\n    Metric: {\n        defaultMessage: 'Metric',\n        description: 'Metric',\n        id: 'Metric',\n    },\n    MetricPlaceholder: {\n        defaultMessage: 'Filter by metrics',\n        description: 'Filter by metrics',\n        id: 'MetricPlaceholder',\n    },\n    MetricValues: {\n        defaultMessage: '{value, select, ' +\n            'cpu {CPU} ' +\n            'cluster {Cluster} ' +\n            'memory {Memory} ' +\n            'node {Node} ' +\n            'persistent_volume_claims {Persistent volume claims} ' +\n            'storage {Storage} ' +\n            'other {}}',\n        description: 'Metric values',\n        id: 'MetricValues',\n    },\n    MonthOverMonthChange: {\n        defaultMessage: 'Month over month change',\n        description: 'Month over month change',\n        id: 'MonthOverMonthChange',\n    },\n    Names: {\n        defaultMessage: '{count, plural, one {Name} other {Names}}',\n        description: 'Name plural or singular',\n        id: 'Name',\n    },\n    Next: {\n        defaultMessage: 'next',\n        description: 'next',\n        id: 'Next',\n    },\n    No: {\n        defaultMessage: 'no',\n        description: 'no',\n        id: 'No',\n    },\n    NoDataForDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {No data available for Jan {startDate}} other {No data available for Jan {startDate}-{endDate}}}} ' +\n            '1 {{count, plural, one {No data available for Feb {startDate}} other {No data available for Feb {startDate}-{endDate}}}} ' +\n            '2 {{count, plural, one {No data available for Mar {startDate}} other {No data available for Mar {startDate}-{endDate}}}} ' +\n            '3 {{count, plural, one {No data available for Apr {startDate}} other {No data available for Apr {startDate}-{endDate}}}} ' +\n            '4 {{count, plural, one {No data available for May {startDate}} other {No data available for May {startDate}-{endDate}}}} ' +\n            '5 {{count, plural, one {No data available for Jun {startDate}} other {No data available for Jun {startDate}-{endDate}}}} ' +\n            '6 {{count, plural, one {No data available for Jul {startDate}} other {No data available for Jul {startDate}-{endDate}}}} ' +\n            '7 {{count, plural, one {No data available for Aug {startDate}} other {No data available for Aug {startDate}-{endDate}}}} ' +\n            '8 {{count, plural, one {No data available for Sep {startDate}} other {No data available for Sep {startDate}-{endDate}}}} ' +\n            '9 {{count, plural, one {No data available for Oct {startDate}} other {No data available for Oct {startDate}-{endDate}}}} ' +\n            '10 {{count, plural, one {No data available for Nov {startDate}} other {No data available for Nov {startDate}-{endDate}}}} ' +\n            '11 {{count, plural, one {No data available for Dec {startDate}} other {No data available for Dec {startDate}-{endDate}}}} ' +\n            'other {}}',\n        description: 'No data available for date range',\n        id: 'NoDataForDate',\n    },\n    NoDataStateDesc: {\n        defaultMessage: 'We have detected a source, but we are not done processing the incoming data. The time to process could take up to 24 hours. Try refreshing the page at a later time.',\n        description: 'still processing request, 24 hour message',\n        id: 'NoDataStateDesc',\n    },\n    NoDataStateRefresh: {\n        defaultMessage: 'Refresh this page',\n        description: 'Refresh this page',\n        id: 'NoDataStateRefresh',\n    },\n    NoDataStateTitle: {\n        defaultMessage: 'Still processing the data',\n        description: 'Still processing the data',\n        id: 'NoDataStateTitle',\n    },\n    NoProvidersStateAwsDesc: {\n        defaultMessage: 'Add an Amazon Web Services account to see a total cost breakdown of your spend by accounts, organizational units, services, regions, or tags.',\n        description: 'Add an Amazon Web Services account to see a total cost breakdown of your spend by accounts, organizational units, services, regions, or tags.',\n        id: 'NoProvidersStateAwsDesc',\n    },\n    NoProvidersStateAwsTitle: {\n        defaultMessage: 'Track your Amazon Web Services spending!',\n        description: 'Track your Amazon Web Services spending!',\n        id: 'NoProvidersStateAwsTitle',\n    },\n    NoProvidersStateAzureDesc: {\n        defaultMessage: 'Add a Microsoft Azure account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        description: 'Add a Microsoft Azure account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        id: 'NoProvidersStateAzureDesc',\n    },\n    NoProvidersStateAzureTitle: {\n        defaultMessage: 'Track your Microsoft Azure spending!',\n        description: 'Track your Microsoft Azure spending!',\n        id: 'NoProvidersStateAzureTitle',\n    },\n    NoProvidersStateGcpDesc: {\n        defaultMessage: 'Add a Google Cloud Platform account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        description: 'Add a Google Cloud Platform account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        id: 'NoProvidersStateGcpDesc',\n    },\n    NoProvidersStateGcpTitle: {\n        defaultMessage: 'Track your Google Cloud Platform spending!',\n        description: 'Track your Google Cloud Platform spending!',\n        id: 'NoProvidersStateGcpTitle',\n    },\n    NoProvidersStateGetStarted: {\n        defaultMessage: 'Get started with Sources',\n        description: 'Get started with Sources',\n        id: 'NoProvidersStateGetStarted',\n    },\n    NoProvidersStateIbmDesc: {\n        defaultMessage: 'Add an IBM Cloud account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        description: 'Add an IBM Cloud account to see a total cost breakdown of your spend by accounts, services, regions, or tags.',\n        id: 'NoProvidersStateIbmDesc',\n    },\n    NoProvidersStateIbmTitle: {\n        defaultMessage: 'Track your IBM Cloud spending!',\n        description: 'Track your IBM Cloud spending!',\n        id: 'NoProvidersStateIbmTitle',\n    },\n    NoProvidersStateOcpAddSources: {\n        defaultMessage: 'Add an OpenShift cluster to Cost Management',\n        description: 'Add an OpenShift cluster to Cost Management',\n        id: 'NoProvidersStateOcpAddSources',\n    },\n    NoProvidersStateOcpDesc: {\n        defaultMessage: 'Add an OpenShift Container Platform cluster to see a total cost breakdown of your pods by cluster, node, project, or labels.',\n        description: 'Add an OpenShift Container Platform cluster to see a total cost breakdown of your pods by cluster, node, project, or labels.',\n        id: 'NoProvidersStateOcpDesc',\n    },\n    NoProvidersStateOcpTitle: {\n        defaultMessage: 'Track your OpenShift spending!',\n        description: 'Track your OpenShift spending!',\n        id: 'NoProvidersStateOcpTitle',\n    },\n    NoProvidersStateOverviewDesc: {\n        defaultMessage: 'Add a source, like an OpenShift Container Platform cluster or a cloud services account, to see a total cost breakdown as well as usage information like instance counts and storage.',\n        description: 'Add a source, like an OpenShift Container Platform cluster or a cloud services account, to see a total cost breakdown as well as usage information like instance counts and storage.',\n        id: 'NoProvidersStateOverviewDesc',\n    },\n    NoProvidersStateOverviewTitle: {\n        defaultMessage: 'Track your spending!',\n        description: 'Track your spending!',\n        id: 'NoProvidersStateOverviewTitle',\n    },\n    NoResultsFound: {\n        defaultMessage: 'No results found',\n        description: 'No results found',\n        id: 'NoResultsFound',\n    },\n    NotAuthorizedStateAws: {\n        defaultMessage: 'Amazon Web Services in Cost Management',\n        description: 'Amazon Web Services in Cost Management',\n        id: 'NoAuthorizedStateAws',\n    },\n    NotAuthorizedStateAzure: {\n        defaultMessage: 'Microsoft Azure in Cost Management',\n        description: 'Microsoft Azure in Cost Management',\n        id: 'NotAuthorizedStateAzure',\n    },\n    NotAuthorizedStateCostModels: {\n        defaultMessage: 'Cost Models in Cost Management',\n        description: 'Cost Models in Cost Management',\n        id: 'NotAuthorizedStateCostModels',\n    },\n    NotAuthorizedStateGcp: {\n        defaultMessage: 'Google Cloud Platform in Cost Management',\n        description: 'Google Cloud Platform in Cost Management',\n        id: 'NotAuthorizedStateGcp',\n    },\n    NotAuthorizedStateIbm: {\n        defaultMessage: 'IBM Cloud in Cost Management',\n        description: 'IBM Cloud in Cost Management',\n        id: 'NotAuthorizedStateIbm',\n    },\n    NotAuthorizedStateOcp: {\n        defaultMessage: 'OpenShift in Cost Management',\n        description: 'OpenShift in Cost Management',\n        id: 'NotAuthorizedStateOcp',\n    },\n    OCPCPUUsageAndRequests: {\n        defaultMessage: 'CPU usage and requests',\n        description: 'CPU usage and requests',\n        id: 'OCPCPUUsageAndRequests',\n    },\n    OCPCloudDashboardComputeTitle: {\n        defaultMessage: 'Compute services usage',\n        description: 'Compute services usage',\n        id: 'OCPCloudDashboardComputeTitle',\n    },\n    OCPCloudDashboardCostTitle: {\n        defaultMessage: 'All cloud filtered by OpenShift cost',\n        description: 'All cloud filtered by OpenShift cost',\n        id: 'OCPCloudDashboardCostTitle',\n    },\n    OCPCloudDashboardCostTrendTitle: {\n        defaultMessage: 'All cloud filtered by OpenShift cumulative cost comparison ({units})',\n        description: 'All cloud filtered by OpenShift cumulative cost comparison ({units})',\n        id: 'OCPCloudDashboardCostTrendTitle',\n    },\n    OCPCloudDashboardDailyCostTrendTitle: {\n        defaultMessage: 'All cloud filtered by OpenShift daily cost comparison ({units})',\n        description: 'All cloud filtered by OpenShift daily cost comparison ({units})',\n        id: 'OCPCloudDashboardDailyCostTrendTitle',\n    },\n    OCPDailyUsageAndRequestComparison: {\n        defaultMessage: 'Daily usage and requests comparison ({units})',\n        description: 'Daily usage and requests comparison',\n        id: 'OCPDailyUsageAndRequestComparison',\n    },\n    OCPDashboardCPUUsageAndRequests: {\n        defaultMessage: 'OpenShift CPU usage and requests',\n        description: 'OpenShift CPU usage and requests',\n        id: 'OCPDashboardCPUUsageAndRequests',\n    },\n    OCPDashboardCostTitle: {\n        defaultMessage: 'All OpenShift cost',\n        description: 'All OpenShift cost',\n        id: 'OCPDashboardCostTitle',\n    },\n    OCPDashboardCostTrendTitle: {\n        defaultMessage: 'All OpenShift cumulative cost comparison ({units})',\n        description: 'All OpenShift cumulative cost comparison in units',\n        id: 'OCPDashboardCostTrendTitle',\n    },\n    OCPDashboardDailyCostTitle: {\n        defaultMessage: 'All OpenShift daily cost comparison ({units})',\n        description: 'All OpenShift daily cost comparison in units',\n        id: 'OCPDashboardDailyCostTitle',\n    },\n    OCPDashboardMemoryUsageAndRequests: {\n        defaultMessage: 'OpenShift Memory usage and requests',\n        description: 'OpenShift Memory usage and requests',\n        id: 'OCPDashboardMemoryUsageAndRequests',\n    },\n    OCPDashboardVolumeUsageAndRequests: {\n        defaultMessage: 'OpenShift Volume usage and requests',\n        description: 'OpenShift Volume usage and requests',\n        id: 'OCPUsageAndRequests',\n    },\n    OCPDetailsInfrastructureCost: {\n        defaultMessage: 'Infrastructure cost',\n        description: 'Infrastructure cost',\n        id: 'OCPDetailsInfrastructureCost',\n    },\n    OCPDetailsInfrastructureCostDesc: {\n        defaultMessage: 'The cost based on raw usage data from the underlying infrastructure.',\n        description: 'The cost based on raw usage data from the underlying infrastructure.',\n        id: 'OCPDetailsInfrastructureCostDesc',\n    },\n    OCPDetailsSupplementaryCost: {\n        defaultMessage: 'Supplementary cost',\n        description: 'Supplementary cost',\n        id: 'OCPDetailsSupplementaryCost',\n    },\n    OCPDetailsSupplementaryCostDesc: {\n        defaultMessage: 'All costs not directly attributed to the infrastructure. These costs are determined by applying a price list within a cost model to OpenShift cluster metrics.',\n        description: 'All costs not directly attributed to the infrastructure. These costs are determined by applying a price list within a cost model to OpenShift cluster metrics.',\n        id: 'OCPDetailsSupplementaryCostDesc',\n    },\n    OCPDetailsTableAriaLabel: {\n        defaultMessage: 'OpenShift details table',\n        description: 'OpenShift details table',\n        id: 'OCPDetailsTable',\n    },\n    OCPDetailsTitle: {\n        defaultMessage: 'OpenShift details',\n        description: 'OpenShift details title',\n        id: 'OCPDetailsTitle',\n    },\n    OCPInfrastructureCostTitle: {\n        defaultMessage: 'OpenShift infrastructure cost',\n        description: 'OpenShift infrastructure cost',\n        id: 'OCPInfrastructureCostTitle',\n    },\n    OCPInfrastructureCostTrendTitle: {\n        defaultMessage: 'OpenShift cumulative infrastructure cost comparison ({units})',\n        description: 'OpenShift cumulative infrastructure cost comparison with units',\n        id: 'OCPInfrastructureCostTrendTitle',\n    },\n    OCPInfrastructureDailyCostTrendTitle: {\n        defaultMessage: 'OpenShift daily infrastructure cost comparison ({units})',\n        description: 'OpenShift daily infrastructure cost comparison with units',\n        id: 'OCPInfrastructureDailyCostTrendTitle',\n    },\n    OCPMemoryUsageAndRequests: {\n        defaultMessage: 'Memory usage and requests',\n        description: 'Memory usage and requests',\n        id: 'OCPMemoryUsageAndRequests',\n    },\n    OCPSupplementaryCostTitle: {\n        defaultMessage: 'OpenShift supplementary cost',\n        description: 'OpenShift supplementary cost',\n        id: 'OCPSupplementaryCostTitle',\n    },\n    OCPSupplementaryCostTrendTitle: {\n        defaultMessage: 'OpenShift cumulative supplementary cost comparison ({units})',\n        description: 'OpenShift cumulative supplementary cost comparison with units',\n        id: 'OCPSupplementaryCostTrendTitle',\n    },\n    OCPSupplementaryDailyCostTrendTitle: {\n        defaultMessage: 'OpenShift daily supplementary cost comparison ({units})',\n        description: 'OpenShift daily supplementary cost comparison with units',\n        id: 'OCPSupplementaryDailyCostTrendTitle',\n    },\n    OCPUsageCostTitle: {\n        defaultMessage: 'OpenShift usage cost',\n        description: 'OpenShift usage cost',\n        id: 'OCPUsageCostTitle',\n    },\n    OCPUsageDashboardCPUTitle: {\n        defaultMessage: 'OpenShift CPU usage and requests',\n        description: 'OpenShift CPU usage and requests',\n        id: 'OCPUsageDashboardCPUTitle',\n    },\n    OCPUsageDashboardCostTrendTitle: {\n        defaultMessage: 'Metering cumulative cost comparison ({units})',\n        description: 'Metering cumulative cost comparison with units',\n        id: 'OCPUsageDashboardCostTrendTitle',\n    },\n    OCPVolumeUsageAndRequests: {\n        defaultMessage: 'Volume usage and requests',\n        description: 'Volume usage and requests',\n        id: 'OCPVolumeUsageAndRequests',\n    },\n    OpenShift: {\n        defaultMessage: 'OpenShift',\n        description: 'OpenShift',\n        id: 'OpenShift',\n    },\n    OpenShiftCloudInfrastructure: {\n        defaultMessage: 'OpenShift cloud infrastructure',\n        description: 'OpenShift cloud infrastructure',\n        id: 'OpenShiftCloudInfrastructure',\n    },\n    OpenShiftCloudInfrastructureDesc: {\n        defaultMessage: 'Infrastructure cost attributed to OpenShift Container Platform, based on a subset of cloud cost data.',\n        description: 'Infrastructure cost attributed to OpenShift Container Platform, based on a subset of cloud cost data.',\n        id: 'OpenShiftCloudInfrastructureDesc',\n    },\n    OpenShiftDesc: {\n        defaultMessage: 'Total cost for OpenShift Container Platform, comprising the infrastructure cost and cost calculated from metrics.',\n        description: 'Total cost for OpenShift Container Platform, comprising the infrastructure cost and cost calculated from metrics.',\n        id: 'OpenShiftDesc',\n    },\n    OverviewInfoArialLabel: {\n        defaultMessage: 'A description of perspectives',\n        description: 'A description of perspectives',\n        id: 'OverviewInfoArialLabel',\n    },\n    OverviewTitle: {\n        defaultMessage: 'Cost Management Overview',\n        description: 'Cost Management Overview',\n        id: 'OverviewTitle',\n    },\n    PageTitleAWS: {\n        defaultMessage: 'Amazon Web Services - Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'Amazon Web Services - Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleAWS',\n    },\n    PageTitleAzure: {\n        defaultMessage: 'Microsoft Azure - Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'Microsoft Azure - Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleAzure',\n    },\n    PageTitleCostModels: {\n        defaultMessage: 'Cost Models - Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'Cost Models - Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleCostModels',\n    },\n    PageTitleDefault: {\n        defaultMessage: 'Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleDefault',\n    },\n    PageTitleExplorer: {\n        defaultMessage: 'Cost Explorer - Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'Cost Explorer - Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleExplorer',\n    },\n    PageTitleGCP: {\n        defaultMessage: 'Google Cloud Platform - Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'Google Cloud Platform - Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleGCP',\n    },\n    PageTitleIBM: {\n        defaultMessage: 'IBM Cloud - Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'IBM Cloud - Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleIBM',\n    },\n    PageTitleOCP: {\n        defaultMessage: 'OpenShift - Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'OpenShift - Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleOpenShift',\n    },\n    PageTitleOverview: {\n        defaultMessage: 'Overview - Cost Management | Red Hat OpenShift Cluster Manager',\n        description: 'Overview - Cost Management | Red Hat OpenShift Cluster Manager',\n        id: 'PageTitleOverview',\n    },\n    Percent: {\n        defaultMessage: '{value} %',\n        description: 'percent value',\n        id: 'Percent',\n    },\n    PercentOfCost: {\n        defaultMessage: '{value} % of cost',\n        description: '{value} % of cost',\n        id: 'PercentOfCost',\n    },\n    PercentSymbol: {\n        defaultMessage: '%',\n        description: 'percent symbol',\n        id: 'PercentSymbol',\n    },\n    PercentTotalCost: {\n        defaultMessage: '{value} {units} ({percent} %)',\n        description: '{value} {units} ({percent} %)',\n        id: 'PercentTotalCost',\n    },\n    Perspective: {\n        defaultMessage: 'Perspective',\n        description: 'Perspective dropdown label',\n        id: 'Perspective',\n    },\n    PerspectiveValues: {\n        defaultMessage: '{value, select, ' +\n            'aws {Amazon Web Services} ' +\n            'aws_ocp {Amazon Web Services filtered by OpenShift} ' +\n            'azure {Microsoft Azure} ' +\n            'azure_ocp {Microsoft Azure filtered by OpenShift} ' +\n            'gcp {Google Cloud Platform} ' +\n            'gcp_ocp {Google Cloud Platform filtered by OpenShift} ' +\n            'ibm {IBM Cloud} ' +\n            'ibm_ocp {IBM filtered by OpenShift} ' +\n            'ocp {All OpenShift} ' +\n            'ocp_cloud {All cloud filtered by OpenShift} ' +\n            'other {}}',\n        description: 'Perspective values',\n        id: 'PerspectiveValues',\n    },\n    PriceList: {\n        defaultMessage: 'Price list',\n        description: 'Price list',\n        id: 'PriceList',\n    },\n    PriceListAddRate: {\n        defaultMessage: 'Add rate',\n        description: 'Add rate',\n        id: 'PriceListAddRate',\n    },\n    PriceListDeleteRate: {\n        defaultMessage: 'Delete rate',\n        description: 'Delete rate',\n        id: 'PriceListDeleteRate',\n    },\n    PriceListDeleteRateDesc: {\n        defaultMessage: '{count, plural, one {This action will remove {metric} rate from {costModel}} other {This action will remove {metric} rate from {costModel}, which is assigned to the following sources:}}',\n        description: 'This action will remove {metric} rate from {costModel}, which is assigned to the following sources:',\n        id: 'PriceListDesc',\n    },\n    PriceListDuplicate: {\n        defaultMessage: 'This tag key is already in use',\n        description: 'This tag key is already in use',\n        id: 'PriceListDuplicate',\n    },\n    PriceListEditRate: {\n        defaultMessage: 'Edit rate',\n        description: 'Edit rate',\n        id: 'PriceListEditRate',\n    },\n    PriceListEmptyRate: {\n        defaultMessage: 'No rates are set',\n        description: 'No rates are set',\n        id: 'PriceListEmptyRate',\n    },\n    PriceListEmptyRateDesc: {\n        defaultMessage: 'To add rates to the price list, click on the \"Add\" rate button above.',\n        description: 'To add rates to the price list, click on the \"Add\" rate button above.',\n        id: 'PriceListEmptyRateDesc',\n    },\n    PriceListNumberRate: {\n        defaultMessage: 'Rate must be a number',\n        description: 'Rate must be a number',\n        id: 'PriceListNumberRate',\n    },\n    PriceListPosNumberRate: {\n        defaultMessage: 'Rate must be a positive number',\n        description: 'Rate must be a positive number',\n        id: 'PriceListPosNumberRate',\n    },\n    Rate: {\n        defaultMessage: 'Rate',\n        description: 'Rate',\n        id: 'Rate',\n    },\n    RawCostDescription: {\n        defaultMessage: 'The costs reported by a cloud provider without any cost model calculations applied.',\n        description: 'The costs reported by a cloud provider without any cost model calculations applied.',\n        id: 'RawCostDescription',\n    },\n    RawCostTitle: {\n        defaultMessage: 'Raw cost',\n        description: 'Raw cost',\n        id: 'RawCostTitle',\n    },\n    RbacErrorDescription: {\n        defaultMessage: 'There was a problem receiving user permissions. Refreshing this page may fix it. If it does not, please contact your admin.',\n        description: 'rbac error description',\n        id: 'RbacErrorDescription',\n    },\n    RbacErrorTitle: {\n        defaultMessage: 'Failed to get RBAC information',\n        description: 'rbac error title',\n        id: 'RbacErrorTitle',\n    },\n    RedHatStatusUrl: {\n        defaultMessage: 'https://status.redhat.com',\n        description: 'Red Hat status url for cloud services',\n        id: 'RedHatStatusUrl',\n    },\n    Requests: {\n        defaultMessage: 'Requests',\n        description: 'Requests',\n        id: 'Requests',\n    },\n    Save: {\n        defaultMessage: 'Save',\n        description: 'Save',\n        id: 'Save',\n    },\n    Select: {\n        defaultMessage: 'Select...',\n        description: 'Select...',\n        id: 'Select',\n    },\n    SelectAll: {\n        defaultMessage: 'Select all',\n        description: 'Select all',\n        id: 'SelectAll',\n    },\n    Selected: {\n        defaultMessage: '{value} selected',\n        description: '{value} selected',\n        id: 'Selected',\n    },\n    SinceDate: {\n        defaultMessage: '{month, select, ' +\n            '0 {{count, plural, one {January {startDate}} other {January {startDate}-{endDate}}}} ' +\n            '1 {{count, plural, one {February {startDate}} other {February {startDate}-{endDate}}}} ' +\n            '2 {{count, plural, one {March {startDate}} other {March {startDate}-{endDate}}}} ' +\n            '3 {{count, plural, one {April {startDate}} other {April {startDate}-{endDate}}}} ' +\n            '4 {{count, plural, one {May {startDate}} other {May {startDate}-{endDate}}}} ' +\n            '5 {{count, plural, one {June {startDate}} other {June {startDate}-{endDate}}}} ' +\n            '6 {{count, plural, one {July {startDate}} other {July {startDate}-{endDate}}}} ' +\n            '7 {{count, plural, one {August {startDate}} other {August {startDate}-{endDate}}}} ' +\n            '8 {{count, plural, one {September {startDate}} other {September {startDate}-{endDate}}}} ' +\n            '9 {{count, plural, one {October {startDate}} other {October {startDate}-{endDate}}}} ' +\n            '10 {{count, plural, one {November {startDate}} other {November {startDate}-{endDate}}}} ' +\n            '11 {{count, plural, one {December {startDate}} other {December {startDate}-{endDate}}}} ' +\n            'other {}}',\n        description: 'SinceDate',\n        id: 'SinceDate',\n    },\n    Sources: {\n        defaultMessage: 'Sources',\n        description: 'Sources',\n        id: 'Sources',\n    },\n    Status: {\n        defaultMessage: '{value, select, ' + 'pending {Pending} ' + 'running {Running} ' + 'failed {Failed} ' + 'other {}}',\n        description: 'Status',\n        id: 'Status',\n    },\n    StatusActions: {\n        defaultMessage: 'Status/Actions',\n        description: 'Status/Actions',\n        id: 'StatusActions',\n    },\n    Suggestions: {\n        defaultMessage: 'Suggestions',\n        description: 'Suggestions',\n        id: 'Suggestions',\n    },\n    Supplementary: {\n        defaultMessage: 'Supplementary',\n        description: 'Supplementary',\n        id: 'Supplementary',\n    },\n    TagHeadingKey: {\n        defaultMessage: 'Key',\n        description: 'Key',\n        id: 'TagHeadingKey',\n    },\n    TagHeadingTitle: {\n        defaultMessage: 'Tags ({value})',\n        description: 'Tags ({value})',\n        id: 'TagHeadingTitle',\n    },\n    TagHeadingValue: {\n        defaultMessage: 'Value',\n        description: 'Value',\n        id: 'TagHeadingValue',\n    },\n    TagNames: {\n        defaultMessage: 'Tag names',\n        description: 'Tag Names',\n        id: 'TagNames',\n    },\n    TimeOfExport: {\n        defaultMessage: 'Time of export',\n        description: 'Time of export',\n        id: 'TimeOfExport',\n    },\n    ToolBarBulkSelectAll: {\n        defaultMessage: 'Select all ({value} items)',\n        description: 'Select all ({value} items)',\n        id: 'ToolBarBulkSelectAll',\n    },\n    ToolBarBulkSelectAriaDeselect: {\n        defaultMessage: 'Deselect all items',\n        description: 'Deselect all items',\n        id: 'ToolBarBulkSelectAriaDeselect',\n    },\n    ToolBarBulkSelectAriaSelect: {\n        defaultMessage: 'Select all items',\n        description: 'Select all items',\n        id: 'ToolBarBulkSelectAriaSelect',\n    },\n    ToolBarBulkSelectNone: {\n        defaultMessage: 'Select none (0 items)',\n        description: 'Select none (0 items)',\n        id: 'ToolBarBulkSelectNone',\n    },\n    ToolBarBulkSelectPage: {\n        defaultMessage: 'Select page ({value} items)',\n        description: 'Select page ({value} items)',\n        id: 'ToolBarBulkSelectPage',\n    },\n    ToolBarPriceListMeasurementPlaceHolder: {\n        defaultMessage: 'Filter by measurements',\n        description: 'Filter by measurements',\n        id: 'ToolBarPriceListMeasurementPlaceHolder',\n    },\n    ToolBarPriceListMetricPlaceHolder: {\n        defaultMessage: 'Filter by metrics',\n        description: 'Filter by metrics',\n        id: 'ToolBarPriceListMetricPlaceHolder',\n    },\n    UnitTooltips: {\n        defaultMessage: '{units, select, ' +\n            'core_hours {{value} core-hours} ' +\n            'gb {{value} GB} ' +\n            'gb_hours {{value} GB-hours} ' +\n            'gb_mo {{value} GB-month} ' +\n            'gibibyte_month {{value} GiB-month} ' +\n            'hour {{value} hours} ' +\n            'hrs {{value} hours} ' +\n            'vm_hours {{value} VM-hours} ' +\n            'other {{value}}}',\n        description: 'return value and unit based on key: \"units\"',\n        id: 'UnitTooltips',\n    },\n    Units: {\n        defaultMessage: '{units, select, ' +\n            'core_hours {core-hours} ' +\n            'gb {GB} ' +\n            'gb_hours {GB-hours} ' +\n            'gb_mo {GB-month} ' +\n            'gibibyte_month {GiB-month} ' +\n            'hour {hours} ' +\n            'hrs {hours} ' +\n            'vm_hours {VM-hours} ' +\n            'other {}}',\n        description: 'return the proper unit label based on key: \"units\"',\n        id: 'Units',\n    },\n    Usage: {\n        defaultMessage: 'Usage',\n        description: 'Usage',\n        id: 'Usage',\n    },\n    UsageCostDescription: {\n        defaultMessage: 'The portion of cost calculated by applying hourly and/or monthly price list rates to metrics.',\n        description: 'The portion of cost calculated by applying hourly and/or monthly price list rates to metrics.',\n        id: 'UsageCostDescription',\n    },\n    UsageCostTitle: {\n        defaultMessage: 'Usage cost',\n        description: 'Usage cost',\n        id: 'UsageCostTitle',\n    },\n    Various: {\n        defaultMessage: 'Various',\n        description: 'Various',\n        id: 'Various',\n    },\n    Yes: {\n        defaultMessage: 'Yes',\n        description: 'Yes',\n        id: 'Yes',\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n// defaultIntl required for testing\nconst LoadingStateBase = ({ intl = defaultIntl }) => {\n    const title = intl.formatMessage(messages.LoadingStateTitle);\n    const subTitle = intl.formatMessage(messages.LoadingStateDesc);\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = injectIntl(LoadingStateBase);\nexport { LoadingState };\n","export const parseApiError = error => {\n    if (error.response && error.response.data) {\n        if (error.response.data.Error) {\n            return error.response.data.Error;\n        }\n        if (error.response.data.errors) {\n            return error.response.data.errors.map(er => `${er.source}: ${er.detail}`).join(', ');\n        }\n    }\n    else if (error.message) {\n        return error.message;\n    }\n    return 'unknown';\n};\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { LoadingState } from 'pages/components/state/loadingState/loadingState';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst Loading = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(LoadingState, null))));\n};\nexport default withRouter(Loading);\n","import Loading from './loading';\nexport default Loading;\n","import Main from '@redhat-cloud-services/frontend-components/Main';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Unavailable from '@redhat-cloud-services/frontend-components/Unavailable';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nconst NotAvailable = ({ title }) => {\n    return (React.createElement(React.Fragment, null,\n        title && (React.createElement(PageHeader, null,\n            React.createElement(PageHeaderTitle, { title: title }))),\n        React.createElement(Main, null,\n            React.createElement(Unavailable, null))));\n};\nexport default withRouter(NotAvailable);\n","import NotAvailable from './notAvailable';\nexport default NotAvailable;\n","import { asyncComponent } from 'components/async';\nimport { permissionsComponent } from 'components/permissions';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nconst NotFound = asyncComponent(() => import(/* webpackChunkName: \"notFound\" */ 'pages/state/notFound'));\nconst AwsBreakdown = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ 'pages/views/details/awsBreakdown'));\nconst AwsDetails = asyncComponent(() => import(/* webpackChunkName: \"aws\" */ 'pages/views/details/awsDetails'));\nconst AzureBreakdown = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/details/azureBreakdown'));\nconst AzureDetails = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/details/azureDetails'));\nconst Explorer = asyncComponent(() => import(/* webpackChunkName: \"azure\" */ 'pages/views/explorer'));\nconst GcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ 'pages/views/details/gcpBreakdown'));\nconst GcpDetails = asyncComponent(() => import(/* webpackChunkName: \"gcp\" */ 'pages/views/details/gcpDetails'));\nconst IbmBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ibm\" */ 'pages/views/details/ibmBreakdown'));\nconst IbmDetails = asyncComponent(() => import(/* webpackChunkName: \"ibm\" */ 'pages/views/details/ibmDetails'));\nconst OcpDetails = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ 'pages/views/details/ocpDetails'));\nconst OcpBreakdown = asyncComponent(() => import(/* webpackChunkName: \"ocp\" */ 'pages/views/details/ocpBreakdown'));\nconst Overview = asyncComponent(() => import(/* webpackChunkName: \"overview\" */ 'pages/views/overview'));\nconst CostModelsDetails = asyncComponent(() => import(/* webpackChunkName: \"costModels\" */ 'pages/costModels/costModelsDetails'));\n// import(/* webpackChunkName: \"costModels\" */ './pages/costModels/costModelList')\nconst CostModel = asyncComponent(() => import(/* webpackChunkName: \"costModel\" */ 'pages/costModels/costModel'));\n// For syncing with permissions\nconst paths = {\n    awsDetails: '/aws',\n    awsDetailsBreakdown: '/aws/breakdown',\n    azureDetails: '/azure',\n    azureDetailsBreakdown: '/azure/breakdown',\n    costModels: '/cost-models',\n    explorer: '/explorer',\n    gcpDetails: '/gcp',\n    gcpDetailsBreakdown: '/gcp/breakdown',\n    ibmDetails: '/ibm',\n    ibmDetailsBreakdown: '/ibm/breakdown',\n    ocpDetails: '/ocp',\n    ocpDetailsBreakdown: '/ocp/breakdown',\n    overview: '/',\n};\nconst routes = [\n    {\n        path: paths.overview,\n        labelKey: 'cost_management_overview',\n        component: permissionsComponent(Overview),\n        exact: true,\n    },\n    {\n        path: paths.costModels,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModelsDetails),\n        exact: true,\n    },\n    {\n        path: `${paths.costModels}/:uuid`,\n        labelKey: 'navigation.cost_models',\n        component: permissionsComponent(CostModel),\n        exact: true,\n    },\n    {\n        path: paths.awsDetails,\n        labelKey: 'navigation.aws_details',\n        component: permissionsComponent(AwsDetails),\n        exact: true,\n    },\n    {\n        path: paths.awsDetailsBreakdown,\n        labelKey: 'navigation.aws_details_breakdown',\n        component: permissionsComponent(AwsBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.azureDetails,\n        labelKey: 'navigation.azure_details',\n        component: permissionsComponent(AzureDetails),\n        exact: true,\n    },\n    {\n        path: paths.azureDetailsBreakdown,\n        labelKey: 'navigation.azure_details_breakdown',\n        component: permissionsComponent(AzureBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.explorer,\n        labelKey: 'navigation.explorer',\n        component: permissionsComponent(Explorer),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetails,\n        labelKey: 'navigation.gcp_details',\n        component: permissionsComponent(GcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.gcpDetailsBreakdown,\n        labelKey: 'navigation.gcp_details_breakdown',\n        component: permissionsComponent(GcpBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ibmDetails,\n        labelKey: 'navigation.ibm_details',\n        component: permissionsComponent(IbmDetails),\n        exact: true,\n    },\n    {\n        path: paths.ibmDetailsBreakdown,\n        labelKey: 'navigation.ibm_details_breakdown',\n        component: permissionsComponent(IbmBreakdown),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetails,\n        labelKey: 'navigation.ocp_details',\n        component: permissionsComponent(OcpDetails),\n        exact: true,\n    },\n    {\n        path: paths.ocpDetailsBreakdown,\n        labelKey: 'navigation.ocp_details_breakdown',\n        component: permissionsComponent(OcpBreakdown),\n        exact: true,\n    },\n];\nconst Routes = () => (React.createElement(Switch, null,\n    routes.map(route => (React.createElement(Route, Object.assign({ key: route.path }, route)))),\n    React.createElement(Route, { component: NotFound })));\nexport { paths, Routes, routes };\n","export const stateKey = 'accountSettings';\nexport const accountSettingsKey = 'accountSettings';\nexport function getReportId() {\n    return `accountSettings`;\n}\n","import { fetchAccountSettings as apiGetAccountSettings } from 'api/accountSettings';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './accountSettingsCommon';\nexport const fetchAccountSettingsRequest = createAction('accountSettings/fetch/request')();\nexport const fetchAccountSettingsSuccess = createAction('accountSettings/fetch/success')();\nexport const fetchAccountSettingsFailure = createAction('accountSettings/fetch/failure')();\nexport function fetchAccountSettings() {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(),\n        };\n        dispatch(fetchAccountSettingsRequest(meta));\n        return apiGetAccountSettings()\n            .then(res => {\n            dispatch(fetchAccountSettingsSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchAccountSettingsFailure(err, meta));\n        });\n    };\n}\n","import axios from 'axios';\nexport function fetchAccountSettings() {\n    const insights = window.insights;\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`account-settings/`);\n        });\n    }\n    else {\n        return axios.get(`account-settings/`);\n    }\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { invalidateCostType, invalidateCurrency, isCostTypeAvailable, isCurrencyAvailable, setAccountCurrency, setCostType, setCurrency, } from 'utils/localStorage';\nimport { fetchAccountSettingsFailure, fetchAccountSettingsRequest, fetchAccountSettingsSuccess, } from './accountSettingsActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function accountSettingsReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchAccountSettingsRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchAccountSettingsSuccess):\n            initCostType(action.payload.data.cost_type);\n            initCurrency(action.payload.data.currency);\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchAccountSettingsFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n// Initialize cost type in local storage\nfunction initCostType(value) {\n    // Clear local storage value if current session is not valid\n    invalidateCostType();\n    if (!isCostTypeAvailable()) {\n        setCostType(value);\n    }\n}\n// Initialize currency in local storage\nfunction initCurrency(value) {\n    // Clear local storage value if current session is not valid\n    invalidateCurrency();\n    if (!isCurrencyAvailable()) {\n        setCurrency(value);\n    }\n    setAccountCurrency(value);\n}\n","import { getReportId, stateKey } from './accountSettingsCommon';\nexport const selectAccountSettingsState = (state) => state[stateKey];\n// Fetch account settings\nexport const selectAccountSettings = (state) => selectAccountSettingsState(state).byId.get(getReportId());\nexport const selectAccountSettingsFetchStatus = (state) => selectAccountSettingsState(state).fetchStatus.get(getReportId());\nexport const selectAccountSettingsError = (state) => selectAccountSettingsState(state).errors.get(getReportId());\n","export const awsCostOverviewStateKey = 'awsCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['region', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'service', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['region', 'account', tagPrefix],\n    },\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget } from './awsCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function awsCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { awsCostOverviewStateKey } from './awsCostOverviewCommon';\nexport const selectAwsCostOverviewState = (state) => state[awsCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAwsCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsCostOverviewState(state).currentWidgets;\n","export const azureCostOverviewStateKey = 'azureCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'subscription_guid',\n        showWidgetOnGroupBy: ['resource_location', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'resource_location',\n        showWidgetOnGroupBy: ['subscription_guid', 'service_name', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service_name',\n        showWidgetOnGroupBy: ['resource_location', 'subscription_guid', tagPrefix],\n    },\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, regionSummaryWidget, serviceSummaryWidget, } from './azureCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, accountSummaryWidget.id, serviceSummaryWidget.id, regionSummaryWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function azureCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { azureCostOverviewStateKey } from './azureCostOverviewCommon';\nexport const selectAzureCostOverviewState = (state) => state[azureCostOverviewStateKey];\nexport const selectWidgets = (state) => selectAzureCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureCostOverviewState(state).currentWidgets;\n","export const gcpCostOverviewStateKey = 'gcpCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['project', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['account', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'project', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['project', 'region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, projectSummaryWidget, regionSummaryWidget, serviceSummaryWidget, } from './gcpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costWidget.id,\n        accountSummaryWidget.id,\n        projectSummaryWidget.id,\n        serviceSummaryWidget.id,\n        regionSummaryWidget.id,\n    ],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function gcpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { gcpCostOverviewStateKey } from './gcpCostOverviewCommon';\nexport const selectGcpCostOverviewState = (state) => state[gcpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectGcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpCostOverviewState(state).currentWidgets;\n","export const ibmCostOverviewStateKey = 'ibmCostOverview';\n","import { tagPrefix } from 'api/queries/query';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const accountSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'account',\n        showWidgetOnGroupBy: ['project', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['account', 'region', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const regionSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'region',\n        showWidgetOnGroupBy: ['account', 'project', 'service', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\nexport const serviceSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'service',\n        showWidgetOnGroupBy: ['project', 'region', 'account', tagPrefix],\n    },\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { accountSummaryWidget, costWidget, projectSummaryWidget, regionSummaryWidget, serviceSummaryWidget, } from './ibmCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costWidget.id,\n        accountSummaryWidget.id,\n        projectSummaryWidget.id,\n        serviceSummaryWidget.id,\n        regionSummaryWidget.id,\n    ],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [accountSummaryWidget.id]: accountSummaryWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [serviceSummaryWidget.id]: serviceSummaryWidget,\n        [regionSummaryWidget.id]: regionSummaryWidget,\n    },\n};\nexport function ibmCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ibmCostOverviewStateKey } from './ibmCostOverviewCommon';\nexport const selectIbmCostOverviewState = (state) => state[ibmCostOverviewStateKey];\nexport const selectWidgets = (state) => selectIbmCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmCostOverviewState(state).currentWidgets;\n","export const ocpCostOverviewStateKey = 'ocpCostOverview';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const clusterWidget = {\n    id: getId(),\n    cluster: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['project'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cluster\" /* cluster */,\n};\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"cpuUsage\" /* cpuUsage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    usage: {\n        showCapacityOnGroupBy: ['cluster'],\n    },\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"memoryUsage\" /* memoryUsage */,\n};\nexport const projectSummaryWidget = {\n    id: getId(),\n    reportSummary: {\n        reportGroupBy: 'project',\n        showWidgetOnGroupBy: ['cluster'],\n        usePlaceholder: true,\n    },\n    reportType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    type: \"summary\" /* reportSummary */,\n};\n","import { clusterWidget, costWidget, cpuUsageWidget, memoryUsageWidget, projectSummaryWidget, } from './ocpCostOverviewWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, clusterWidget.id, projectSummaryWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [clusterWidget.id]: clusterWidget,\n        [projectSummaryWidget.id]: projectSummaryWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpCostOverviewReducer(state = defaultState) {\n    return state;\n}\n","import { ocpCostOverviewStateKey } from './ocpCostOverviewCommon';\nexport const selectOcpCostOverviewState = (state) => state[ocpCostOverviewStateKey];\nexport const selectWidgets = (state) => selectOcpCostOverviewState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCostOverviewState(state).currentWidgets;\n","export const awsHistoricalDataStateKey = 'awsHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './awsHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function awsHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { awsHistoricalDataStateKey } from './awsHistoricalDataCommon';\nexport const selectAwsHistoricalDataState = (state) => state[awsHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAwsHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsHistoricalDataState(state).currentWidgets;\n","export const azureHistoricalDataStateKey = 'azureHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"usage\" /* usage */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    type: \"usage\" /* usage */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './azureHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function azureHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { azureHistoricalDataStateKey } from './azureHistoricalDataCommon';\nexport const selectAzureHistoricalDataState = (state) => state[azureHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectAzureHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureHistoricalDataState(state).currentWidgets;\n","export const gcpHistoricalDataStateKey = 'gcpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './gcpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function gcpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { gcpHistoricalDataStateKey } from './gcpHistoricalDataCommon';\nexport const selectGcpHistoricalDataState = (state) => state[gcpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectGcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpHistoricalDataState(state).currentWidgets;\n","export const ibmHistoricalDataStateKey = 'ibmHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    type: \"trend\" /* trend */,\n};\nexport const computeUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"instance_type\" /* instanceType */,\n    type: \"trend\" /* trend */,\n};\nexport const storageUsageWidget = {\n    id: getId(),\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"storage\" /* storage */,\n    type: \"trend\" /* trend */,\n};\n","import { computeUsageWidget, costWidget, storageUsageWidget } from './ibmHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, computeUsageWidget.id, storageUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [computeUsageWidget.id]: computeUsageWidget,\n        [storageUsageWidget.id]: storageUsageWidget,\n    },\n};\nexport function ibmHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ibmHistoricalDataStateKey } from './ibmHistoricalDataCommon';\nexport const selectIbmHistoricalDataState = (state) => state[ibmHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectIbmHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmHistoricalDataState(state).currentWidgets;\n","export const ocpHistoricalDataStateKey = 'ocpHistoricalData';\n","let currrentId = 0;\nconst getId = () => currrentId++;\nexport const costWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    type: \"cost\" /* cost */,\n};\nexport const cpuUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    type: \"usage\" /* usage */,\n};\nexport const memoryUsageWidget = {\n    id: getId(),\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    type: \"usage\" /* usage */,\n};\n","import { costWidget, cpuUsageWidget, memoryUsageWidget } from './ocpHistoricalDataWidgets';\nexport const defaultState = {\n    currentWidgets: [costWidget.id, cpuUsageWidget.id, memoryUsageWidget.id],\n    widgets: {\n        [costWidget.id]: costWidget,\n        [cpuUsageWidget.id]: cpuUsageWidget,\n        [memoryUsageWidget.id]: memoryUsageWidget,\n    },\n};\nexport function ocpHistoricalDataReducer(state = defaultState) {\n    return state;\n}\n","import { ocpHistoricalDataStateKey } from './ocpHistoricalDataCommon';\nexport const selectOcpHistoricalDataState = (state) => state[ocpHistoricalDataStateKey];\nexport const selectWidgets = (state) => selectOcpHistoricalDataState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpHistoricalDataState(state).currentWidgets;\n","export const expirationMS = 30 * 60 * 1000; // 30 minutes\nexport function createMapStateToProps(mapStateToProps) {\n    return mapStateToProps;\n}\nexport function createMapDispatchToProps(mapDispatchToProps) {\n    return mapDispatchToProps;\n}\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { deleteCostModel as apiDeleteCostModel, fetchCostModels as apiGetCostModels, updateCostModel as apiUpdateCostModel, } from 'api/costModels';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/costModels/filter')();\nexport const selectCostModel = createAction('select/costModels')();\nexport const resetCostModel = createAction('reset/costModels')();\nexport const setCostModelDialog = createAction('display/costModels/dialog')();\nexport const { request: fetchCostModelsRequest, success: fetchCostModelsSuccess, failure: fetchCostModelsFailure, } = createAsyncAction('fetch/costModels/request', 'fetch/costModels/success', 'fetch/costModels/failure')();\nexport const fetchCostModels = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchCostModelsRequest());\n        return apiGetCostModels(query)\n            .then(res => {\n            dispatch(fetchCostModelsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: updateCostModelsRequest, success: updateCostModelsSuccess, failure: updateCostModelsFailure, } = createAsyncAction('update/costModels/request', 'update/costModels/success', 'update/costModels/failure')();\nexport const updateCostModel = (uuid, request, dialog = null) => {\n    return (dispatch) => {\n        dispatch(updateCostModelsRequest());\n        return apiUpdateCostModel(uuid, request)\n            .then((res) => {\n            dispatch(updateCostModelsSuccess(res));\n            if (dialog !== null) {\n                fetchCostModels(`uuid=${uuid}`)(dispatch);\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(updateCostModelsFailure(err));\n        });\n    };\n};\nexport const { request: deleteCostModelsRequest, success: deleteCostModelsSuccess, failure: deleteCostModelsFailure, } = createAsyncAction('delete/costModels/request', 'delete/costModels/success', 'delete/costModels/failure')();\nexport const deleteCostModel = (uuid, dialog = '', history = null) => {\n    return (dispatch) => {\n        dispatch(deleteCostModelsRequest());\n        return apiDeleteCostModel(uuid)\n            .then(() => {\n            dispatch(deleteCostModelsSuccess());\n            dispatch(resetCostModel());\n            fetchCostModels()(dispatch);\n            if (dialog !== null) {\n                if (dialog === 'deleteCostModel' && history) {\n                    history.push('/cost-models');\n                }\n                dispatch(setCostModelDialog({ name: dialog, isOpen: false }));\n            }\n        })\n            .catch(err => {\n            dispatch(deleteCostModelsFailure(err));\n        });\n    };\n};\nexport const redirectToCostModelFromSourceUuid = (source_uuid, history) => {\n    return (dispatch) => {\n        return apiGetCostModels(`source_uuid=${source_uuid}`)\n            .then(res => {\n            const uuid = res.data.data[0].uuid;\n            history.push(`/cost-models/${uuid}`);\n        })\n            .catch(() => {\n            dispatch(addNotification({\n                title: intl.formatMessage(messages.CostModelsRouterErrorTitle),\n                description: intl.formatMessage(messages.CostModelsRouterServerError),\n                variant: 'danger',\n                dismissable: true,\n            }));\n        });\n    };\n};\n","import { getType } from 'typesafe-actions';\nimport { deleteCostModelsFailure, deleteCostModelsRequest, deleteCostModelsSuccess, fetchCostModelsFailure, fetchCostModelsRequest, fetchCostModelsSuccess, resetCostModel, selectCostModel, setCostModelDialog, updateCostModelsFailure, updateCostModelsRequest, updateCostModelsSuccess, updateFilterToolbar, } from './actions';\nexport const stateKey = 'costModels';\nexport const defaultState = {\n    costModels: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n    isDialogOpen: {\n        deleteRate: false,\n        deleteSource: false,\n        addSource: false,\n        addRate: false,\n        updateRate: false,\n        deleteCostModel: false,\n        updateCostModel: false,\n        deleteMarkup: false,\n        updateMarkup: false,\n        deleteDistribution: false,\n        updateDistribution: false,\n        createWizard: false,\n    },\n    dialogData: null,\n    update: {\n        error: null,\n        status: 0 /* none */,\n        current: null,\n    },\n    delete: {\n        error: null,\n        status: 0 /* none */,\n    },\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(resetCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: null }) });\n        case getType(selectCostModel):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { current: action.payload }) });\n        case getType(updateCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 1 /* inProgress */ }) });\n        case getType(updateCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { update: {\n                    error: null,\n                    status: 2 /* complete */,\n                    current: action.payload.data,\n                } });\n        case getType(updateCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { update: Object.assign(Object.assign({}, state.update), { status: 2 /* complete */, error: action.payload }) });\n        case getType(fetchCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', status: 2 /* complete */, error: null, costModels: action.payload.data });\n        case getType(fetchCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(deleteCostModelsRequest):\n            return Object.assign(Object.assign({}, state), { delete: Object.assign(Object.assign({}, state.delete), { status: 1 /* inProgress */ }) });\n        case getType(deleteCostModelsSuccess):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    error: null,\n                    status: 2 /* complete */,\n                } });\n        case getType(deleteCostModelsFailure):\n            return Object.assign(Object.assign({}, state), { delete: {\n                    status: 2 /* complete */,\n                    error: action.payload,\n                } });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        case getType(setCostModelDialog):\n            return Object.assign(Object.assign({}, state), { isDialogOpen: Object.assign(Object.assign({}, state.isDialogOpen), { [action.payload.name]: action.payload.isOpen }), dialogData: action.payload.meta });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const costModelsState = (state) => state[stateKey];\nexport const costModels = (state) => {\n    const cms = costModelsState(state).costModels;\n    if (cms) {\n        return cms.data;\n    }\n    return [];\n};\nexport const isDialogOpen = (state) => {\n    const dialogs = costModelsState(state).isDialogOpen;\n    return (type) => {\n        switch (type) {\n            case 'markup': {\n                const { deleteMarkup, updateMarkup } = dialogs;\n                return { deleteMarkup, updateMarkup };\n            }\n            case 'distribution': {\n                const { deleteDistribution, updateDistribution } = dialogs;\n                return { deleteDistribution, updateDistribution };\n            }\n            case 'costmodel': {\n                const { deleteCostModel, updateCostModel, createWizard } = dialogs;\n                return { deleteCostModel, updateCostModel, createWizard };\n            }\n            case 'sources': {\n                const { deleteSource, addSource } = dialogs;\n                return { deleteSource, addSource };\n            }\n            case 'rate': {\n                const { addRate, updateRate, deleteRate } = dialogs;\n                return { addRate, updateRate, deleteRate };\n            }\n            default:\n                return costModelsState(state).isDialogOpen;\n        }\n    };\n};\nexport const status = (state) => costModelsState(state).status;\nexport const error = (state) => costModelsState(state).error;\nexport const stateName = (state) => {\n    const costStatus = status(state);\n    const costError = error(state);\n    const costData = costModels(state);\n    const costQuery = query(state);\n    if (costStatus !== 2 /* complete */) {\n        return 'loading';\n    }\n    if (costError !== null) {\n        return 'failure';\n    }\n    if (costData.length > 0) {\n        return 'success';\n    }\n    const hasNoFilters = Object.keys(costQuery).every(key => {\n        switch (key) {\n            case 'currency':\n            case 'description':\n            case 'name':\n            case 'source_type':\n                return costQuery[key] === null;\n            default:\n                return true;\n        }\n    });\n    if (hasNoFilters) {\n        return 'empty';\n    }\n    return 'no-match';\n};\nexport const currentFilterValue = (state) => costModelsState(state).currentFilterValue;\nexport const currentFilterType = (state) => costModelsState(state).currentFilterType;\nexport const query = selectQuery((state) => costModelsState(state).costModels, ['ordering', 'name', 'source_type', 'currency', 'description', 'offset', 'limit']);\nexport const pagination = selectPagination((state) => costModelsState(state).costModels);\nexport const dialogData = (state) => costModelsState(state).dialogData;\nexport const updateProcessing = (state) => costModelsState(state).update.status === 1 /* inProgress */;\nexport const updateError = (state) => {\n    const updateErr = costModelsState(state).update.error;\n    if (updateErr === null) {\n        return '';\n    }\n    return parseApiError(updateErr);\n};\nexport const selected = (state) => {\n    return costModelsState(state).update.current;\n};\nexport const deleteProcessing = (state) => costModelsState(state).delete.status === 1 /* inProgress */;\nexport const deleteError = (state) => {\n    const err = costModelsState(state).delete.error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\n","import { getQuery } from 'api/queries/awsQuery';\nimport { getCostType } from 'utils/localStorage';\nexport const awsDashboardStateKey = 'awsDashboard';\nexport const awsDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsDashboardTabFilters = Object.assign(Object.assign({}, awsDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(widget, filter = awsDashboardDefaultFilters, props) {\n    const query = Object.assign(Object.assign({ filter }, (widget.savingsPlan && { cost_type: getCostType() })), (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsDashboardDefaultFilters, props) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = Object.assign(Object.assign(Object.assign({}, (widget.savingsPlan && { cost_type: getCostType() })), { filter: newFilter, group_by }), (props ? props : {}));\n    return getQuery(query);\n}\n","import { awsDashboardDefaultFilters, awsDashboardStateKey, awsDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsDashboardCommon';\nexport const selectAwsDashboardState = (state) => state[awsDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(widget, Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(widget, filter),\n        forecast: getQueryForWidget(widget, {}),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.AWSComputeTitle,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.instanceType,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.AWSDashboardCostTitle,\n    forecastPathsType: \"aws\" /* aws */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        viewAllPath: paths.awsDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.AWSDailyCostTrendTitle,\n        titleKey: messages.AWSCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n    savingsPlan: true,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n    savingsPlan: true,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n    savingsPlan: true,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"aws\" /* aws */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   AwsDashboardTab.services,\n    //   AwsDashboardTab.accounts,\n    //   AwsDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './awsDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/awsQuery';\nexport const awsOcpDashboardStateKey = 'awsOcpDashboard';\nexport const awsOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const awsOcpDashboardTabFilters = Object.assign(Object.assign({}, awsOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = awsOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = awsOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { awsOcpDashboardDefaultFilters, awsOcpDashboardStateKey, awsOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './awsOcpDashboardCommon';\nexport const selectAwsOcpDashboardState = (state) => state[awsOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectAwsOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAwsOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, awsOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, awsOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './awsOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('awsOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.AWSComputeTitle,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    tabsFilter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.instanceType,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.AWSOcpDashboardCostTitle,\n    forecastPathsType: \"aws_ocp\" /* awsOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: messages.Cost,\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.AWSDailyCostTrendTitle,\n        titleKey: messages.AWSCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    tabsFilter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonOcpFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    tabsFilter: {\n        service: 'AmazonVPC,AmazonOcpFront,AmazonRoute53,AmazonAPIGateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"aws_ocp\" /* awsOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   AwsOcpDashboardTab.services,\n    //   AwsOcpDashboardTab.accounts,\n    //   AwsOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"accounts\" /* accounts */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './awsOcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './awsOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function awsOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureDashboardStateKey = 'azureDashboard';\nexport const azureDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureDashboardTabFilters = Object.assign(Object.assign({}, azureDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ && widget.tabsFilter && widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureDashboardDefaultFilters, azureDashboardStateKey, azureDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureDashboardCommon';\nexport const selectAzureDashboardState = (state) => state[azureDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.AzureDashboardCostTitle,\n    forecastPathsType: \"azure\" /* azure */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        viewAllPath: paths.azureDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.AzureDailyCostTrendTitle,\n        titleKey: messages.AzureCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.service_names,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: messages.AzureComputeTitle,\n    reportPathsType: \"azure\" /* azure */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   AzureDashboardTab.instanceType,\n    //   AzureDashboardTab.subscription_guids,\n    //   AzureDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/azureQuery';\nexport const azureOcpDashboardStateKey = 'azureOcpDashboard';\nexport const azureOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const azureOcpDashboardTabFilters = Object.assign(Object.assign({}, azureOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"service_names\" /* service_names */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service_name: widget.tabsFilter && widget.tabsFilter.service_name ? widget.tabsFilter.service_name : '*',\n            };\n        case \"subscription_guids\" /* subscription_guids */:\n            return { subscription_guid: '*' };\n        case \"resource_locations\" /* resource_locations */:\n            return { resource_location: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = azureOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = azureOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"service_names\" /* service_names */ && widget.tabsFilter && widget.tabsFilter.service_name) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { azureOcpDashboardDefaultFilters, azureOcpDashboardStateKey, azureOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './azureOcpDashboardCommon';\nexport const selectAzureOcpDashboardState = (state) => state[azureOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectAzureOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectAzureOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, azureOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, azureOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './azureOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('azureOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.AzureOcpDashboardCostTitle,\n    forecastPathsType: \"azure_ocp\" /* azureOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: messages.Cost,\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.AzureDailyCostTrendTitle,\n        titleKey: messages.AzureCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    availableTabs: [\n        \"service_names\" /* service_names */,\n        \"subscription_guids\" /* subscription_guids */,\n        \"resource_locations\" /* resource_locations */,\n    ],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    tabsFilter: {\n        service_name: 'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"service_names\" /* service_names */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service_name: 'Storage',\n    },\n    tabsFilter: {\n        service_name: 'Storage',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.service_names,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"subscription_guids\" /* subscription_guids */,\n};\nexport const virtualMachineWidget = {\n    id: getId(),\n    titleKey: messages.AzureComputeTitle,\n    reportPathsType: \"azure_ocp\" /* azureOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service_name: 'Virtual Machines',\n    },\n    tabsFilter: {\n        service_name: 'Virtual Machines',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   AzureOcpDashboardTab.instanceType,\n    //   AzureOcpDashboardTab.subscription_guids,\n    //   AzureOcpDashboardTab.resource_locations,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './azureOcpDashboardActions';\nimport { costSummaryWidget, databaseWidget, networkWidget, storageWidget, virtualMachineWidget, } from './azureOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [\n        costSummaryWidget.id,\n        virtualMachineWidget.id,\n        storageWidget.id,\n        networkWidget.id,\n        databaseWidget.id,\n    ],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [virtualMachineWidget.id]: virtualMachineWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function azureOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/gcpQuery';\nexport const gcpDashboardStateKey = 'gcpDashboard';\nexport const gcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const gcpDashboardTabFilters = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"gcp_projects\" /* gcpProjects */:\n            return { gcp_project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = gcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = gcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { gcpDashboardDefaultFilters, gcpDashboardStateKey, gcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './gcpDashboardCommon';\nexport const selectGcpDashboardState = (state) => state[gcpDashboardStateKey];\nexport const selectWidgets = (state) => selectGcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, gcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, gcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './gcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('gcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.GCPComputeTitle,\n    forecastPathsType: \"gcp\" /* gcp */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.instanceType,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.GCPCostTitle,\n    forecastPathsType: \"gcp\" /* gcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        viewAllPath: paths.gcpDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.GCPDailyCostTrendTitle,\n        titleKey: messages.GCPCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    availableTabs: [\"services\" /* services */, \"gcp_projects\" /* gcpProjects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'Network, VPC, Firewall, Route, IP, DNS, CDN, NAT, Traffic Director, Service Discovery, Cloud Domains, Private Service Connect, Cloud Armor',\n    },\n    tabsFilter: {\n        service: 'Network, VPC, Firewall, Route, IP, DNS, CDN, NAT, Traffic Director, Service Discovery, Cloud Domains, Private Service Connect, Cloud Armor',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"gcp\" /* gcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   GcpDashboardTab.services,\n    //   GcpDashboardTab.accounts,\n    //   GcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"gcp_projects\" /* gcpProjects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './gcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './gcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function gcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/gcpQuery';\nexport const gcpOcpDashboardStateKey = 'gcpOcpDashboard';\nexport const gcpOcpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const gcpOcpDashboardTabFilters = Object.assign(Object.assign({}, gcpOcpDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        case \"gcp_projects\" /* gcpProjects */:\n            return { gcp_project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = gcpOcpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = gcpOcpDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { gcpOcpDashboardDefaultFilters, gcpOcpDashboardStateKey, gcpOcpDashboardTabFilters, getQueryForWidget, getQueryForWidgetTabs, } from './gcpOcpDashboardCommon';\nexport const selectGcpOcpDashboardState = (state) => state[gcpOcpDashboardStateKey];\nexport const selectWidgets = (state) => selectGcpOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectGcpOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, gcpOcpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, gcpOcpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './gcpOcpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('gcpOcpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.GCPComputeTitle,\n    forecastPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.instanceType,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.GCPCostTitle,\n    forecastPathsType: \"gcp_ocp\" /* gcpOcp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.GCPDailyCostTrendTitle,\n        titleKey: messages.GCPCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    availableTabs: [\"services\" /* services */, \"gcp_projects\" /* gcpProjects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'Cloud DNS',\n    },\n    tabsFilter: {\n        service: 'Cloud DNS',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"gcp_ocp\" /* gcpOcp */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   GcpOcpDashboardTab.services,\n    //   GcpOcpDashboardTab.accounts,\n    //   GcpOcpDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"gcp_projects\" /* gcpProjects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './gcpOcpDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './gcpOcpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function gcpOcpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ibmQuery';\nexport const ibmDashboardStateKey = 'ibmDashboard';\nexport const ibmDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ibmDashboardTabFilters = Object.assign(Object.assign({}, ibmDashboardDefaultFilters), { limit: 3 });\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"instance_type\" /* instanceType */:\n            return { instance_type: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ibmDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ibmDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ibmDashboardDefaultFilters, ibmDashboardStateKey, ibmDashboardTabFilters, } from './ibmDashboardCommon';\nexport const selectIbmDashboardState = (state) => state[ibmDashboardStateKey];\nexport const selectWidgets = (state) => selectIbmDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectIbmDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const filter = Object.assign(Object.assign({}, ibmDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ibmDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, filter), { time_scope_value: -2 })),\n        current: getQueryForWidget(filter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ibmDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ibmDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.IBMComputeTitle,\n    forecastPathsType: \"gcp\" /* ibm */,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service: 'Compute Engine',\n    },\n    tabsFilter: {\n        service: 'Compute Engine',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.instanceType,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"instance_type\" /* instanceType */,\n};\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.IBMCostTitle,\n    forecastPathsType: \"gcp\" /* ibm */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        viewAllPath: paths.ibmDetails,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.IBMDailyCostTrendTitle,\n        titleKey: messages.IBMCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    availableTabs: [\"services\" /* services */, \"projects\" /* projects */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    tabsFilter: {\n        service: 'Bigtable,Datastore,Database Migrations,Firestore,MemoryStore,Spanner,SQL',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    tabsFilter: {\n        service: 'VPC network,Network services,Hybrid Connectivity,Network Service Tiers,Network Security,Network Intelligence',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"services\" /* services */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"gcp\" /* ibm */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [\n    //   IbmDashboardTab.services,\n    //   IbmDashboardTab.accounts,\n    //   IbmDashboardTab.regions,\n    // ],\n    chartType: \"trend\" /* trend */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ibmDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget } from './ibmDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [storageWidget.id]: storageWidget,\n        [networkWidget.id]: networkWidget,\n        [databaseWidget.id]: databaseWidget,\n    },\n};\nexport function ibmDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpCloudQuery';\nexport const ocpCloudDashboardStateKey = 'ocpCloudDashboard';\nexport const ocpCloudDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpCloudDashboardTabFilters = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(widget) {\n    switch (widget.currentTab) {\n        case \"accounts\" /* accounts */:\n            return { account: '*' };\n        case \"regions\" /* regions */:\n            return { region: '*' };\n        case \"services\" /* services */:\n            // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n            return {\n                service: widget.tabsFilter && widget.tabsFilter.service ? widget.tabsFilter.service : '*',\n            };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpCloudDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpCloudDashboardDefaultFilters) {\n    const group_by = getGroupByForTab(widget);\n    const newFilter = Object.assign({}, JSON.parse(JSON.stringify(filter)));\n    // Use group_by for service tab and filter for others -- https://github.com/project-koku/koku-ui/issues/846\n    if (widget.currentTab === \"services\" /* services */ && widget.tabsFilter && widget.tabsFilter.service) {\n        newFilter.service = undefined;\n    }\n    const query = {\n        filter: newFilter,\n        group_by,\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpCloudDashboardDefaultFilters, ocpCloudDashboardStateKey, ocpCloudDashboardTabFilters, } from './ocpCloudDashboardCommon';\nexport const selectOcpCloudDashboardState = (state) => state[ocpCloudDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpCloudDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpCloudDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpCloudDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpCloudDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpCloudDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpCloudDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.OCPCloudDashboardCostTitle,\n    forecastPathsType: \"ocp_cloud\" /* ocpCloud */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        costKey: messages.Cost,\n        showHorizontal: true,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.OCPCloudDashboardDailyCostTrendTitle,\n        titleKey: messages.OCPCloudDashboardCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    availableTabs: [\"services\" /* services */, \"accounts\" /* accounts */, \"regions\" /* regions */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"services\" /* services */,\n};\n// Cloud widgets\nexport const computeWidget = {\n    id: getId(),\n    titleKey: messages.OCPCloudDashboardComputeTitle,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"instance_type\" /* instanceType */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    filter: {\n        service: 'AmazonEC2',\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const databaseWidget = {\n    id: getId(),\n    titleKey: messages.DashboardDatabaseTitle,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"database\" /* database */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonRDS,AmazonDynamoDB,AmazonElastiCache,AmazonNeptune,AmazonRedshift,AmazonDocumentDB' +\n            'Database,Cosmos DB,Cache for Redis',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const networkWidget = {\n    id: getId(),\n    titleKey: messages.DashboardNetworkTitle,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"network\" /* network */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n    },\n    filter: {\n        service: 'AmazonVPC,AmazonCloudFront,AmazonRoute53,AmazonAPIGateway' +\n            'Virtual Network,VPN,DNS,Traffic Manager,ExpressRoute,Load Balancer,Application Gateway',\n    },\n    trend: {\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardCumulativeCostComparison,\n        type: 0 /* rolling */,\n    },\n    chartType: \"trend\" /* trend */,\n};\nexport const storageWidget = {\n    id: getId(),\n    titleKey: messages.DashboardStorageTitle,\n    reportPathsType: \"ocp_cloud\" /* ocpCloud */,\n    reportType: \"storage\" /* storage */,\n    details: {\n        costKey: messages.Cost,\n        showUnits: true,\n        showUsageFirst: true,\n        showUsageLegendLabel: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.DashboardDailyUsageComparison,\n        type: 1 /* daily */,\n    },\n    chartType: \"trend\" /* trend */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpCloudDashboardActions';\nimport { computeWidget, costSummaryWidget, databaseWidget, networkWidget, storageWidget, } from './ocpCloudDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, computeWidget.id, storageWidget.id, networkWidget.id, databaseWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [computeWidget.id]: computeWidget,\n        [databaseWidget.id]: databaseWidget,\n        [networkWidget.id]: networkWidget,\n        [storageWidget.id]: storageWidget,\n    },\n};\nexport function ocpCloudDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","import { getQuery } from 'api/queries/ocpQuery';\nexport const ocpDashboardStateKey = 'ocpDashboard';\nexport const ocpDashboardDefaultFilters = {\n    time_scope_units: 'month',\n    time_scope_value: -1,\n    resolution: 'daily',\n};\nexport const ocpDashboardTabFilters = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), { limit: 3 });\n// Todo: cluster, project, node\nexport function getGroupByForTab(tab) {\n    switch (tab) {\n        case \"projects\" /* projects */:\n            return { project: '*' };\n        case \"clusters\" /* clusters */:\n            return { cluster: '*' };\n        case \"nodes\" /* nodes */:\n            return { node: '*' };\n        default:\n            return {};\n    }\n}\nexport function getQueryForWidget(filter = ocpDashboardDefaultFilters, props) {\n    const query = Object.assign({ filter }, (props ? props : {}));\n    return getQuery(query);\n}\nexport function getQueryForWidgetTabs(widget, filter = ocpDashboardDefaultFilters) {\n    const query = {\n        filter,\n        group_by: getGroupByForTab(widget.currentTab),\n    };\n    return getQuery(query);\n}\n","import { getQueryForWidget, getQueryForWidgetTabs, ocpDashboardDefaultFilters, ocpDashboardStateKey, ocpDashboardTabFilters, } from './ocpDashboardCommon';\nexport const selectOcpDashboardState = (state) => state[ocpDashboardStateKey];\nexport const selectWidgets = (state) => selectOcpDashboardState(state).widgets;\nexport const selectWidget = (state, id) => selectWidgets(state)[id];\nexport const selectCurrentWidgets = (state) => selectOcpDashboardState(state).currentWidgets;\nexport const selectWidgetQueries = (state, id) => {\n    const widget = selectWidget(state, id);\n    const defaultFilter = Object.assign(Object.assign({}, ocpDashboardDefaultFilters), (widget.filter ? widget.filter : {}));\n    const tabsFilter = Object.assign(Object.assign({}, ocpDashboardTabFilters), (widget.tabsFilter ? widget.tabsFilter : {}));\n    return {\n        previous: getQueryForWidget(Object.assign(Object.assign({}, defaultFilter), { time_scope_value: -2 })),\n        current: getQueryForWidget(defaultFilter),\n        forecast: getQueryForWidget({}, { limit: 31 }),\n        tabs: getQueryForWidgetTabs(widget, Object.assign(Object.assign({}, tabsFilter), { resolution: 'monthly' })),\n    };\n};\n","import { forecastActions } from 'store/forecasts';\nimport { reportActions } from 'store/reports';\nimport { createAction } from 'typesafe-actions';\nimport { selectWidget, selectWidgetQueries } from './ocpDashboardSelectors';\nexport const fetchWidgetForecasts = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        if (widget.forecastPathsType && widget.forecastType) {\n            const { forecast } = selectWidgetQueries(state, id);\n            dispatch(forecastActions.fetchForecast(widget.forecastPathsType, widget.forecastType, forecast));\n        }\n    };\n};\nexport const fetchWidgetReports = (id) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const widget = selectWidget(state, id);\n        const { previous, current, tabs } = selectWidgetQueries(state, id);\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, current));\n        dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, previous));\n        if (widget.availableTabs) {\n            dispatch(reportActions.fetchReport(widget.reportPathsType, widget.reportType, tabs));\n        }\n    };\n};\nexport const setWidgetTab = createAction('ocpDashboard/widget/tab')();\nexport const changeWidgetTab = (id, tab) => {\n    return dispatch => {\n        dispatch(setWidgetTab({ id, tab }));\n        dispatch(fetchWidgetReports(id));\n    };\n};\n","import messages from 'locales/messages';\nimport { paths } from 'routes';\nlet currrentId = 0;\nconst getId = () => currrentId++;\nexport const costSummaryWidget = {\n    id: getId(),\n    titleKey: messages.OCPDashboardCostTitle,\n    forecastPathsType: \"ocp\" /* ocp */,\n    forecastType: \"cost\" /* cost */,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cost\" /* cost */,\n    details: {\n        adjustContainerHeight: true,\n        costKey: messages.Cost,\n        showHorizontal: true,\n        showTooltip: true,\n        viewAllPath: paths.ocpDetails,\n    },\n    trend: {\n        computedForecastItem: \"cost\" /* cost */,\n        computedForecastInfrastructureItem: \"infrastructure\" /* infrastructure */,\n        computedReportItem: \"cost\" /* cost */,\n        computedReportItemValue: \"total\" /* total */,\n        dailyTitleKey: messages.OCPDashboardDailyCostTitle,\n        titleKey: messages.OCPDashboardCostTrendTitle,\n        type: 0 /* rolling */,\n    },\n    tabsFilter: {\n        limit: 3,\n    },\n    availableTabs: [\"projects\" /* projects */, \"clusters\" /* clusters */],\n    chartType: \"dailyTrend\" /* dailyTrend */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const cpuWidget = {\n    id: getId(),\n    titleKey: messages.OCPCPUUsageAndRequests,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"cpu\" /* cpu */,\n    details: {\n        requestKey: messages.Requests,\n        showUnits: true,\n        showUsageFirst: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.OCPDailyUsageAndRequestComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const memoryWidget = {\n    id: getId(),\n    titleKey: messages.OCPMemoryUsageAndRequests,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"memory\" /* memory */,\n    details: {\n        requestKey: messages.Requests,\n        showUnits: true,\n        showUsageFirst: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.OCPDailyUsageAndRequestComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\nexport const volumeWidget = {\n    id: getId(),\n    titleKey: messages.OCPVolumeUsageAndRequests,\n    reportPathsType: \"ocp\" /* ocp */,\n    reportType: \"volume\" /* volume */,\n    details: {\n        requestKey: messages.Requests,\n        showUnits: true,\n        showUsageFirst: true,\n        usageKey: messages.Usage,\n    },\n    trend: {\n        computedReportItem: \"usage\" /* usage */,\n        computedReportItemValue: \"total\" /* total */,\n        titleKey: messages.OCPDailyUsageAndRequestComparison,\n        type: 1 /* daily */,\n    },\n    // availableTabs: [OcpDashboardTab.projects, OcpDashboardTab.clusters],\n    chartType: \"usage\" /* usage */,\n    currentTab: \"projects\" /* projects */,\n};\n","import { getType } from 'typesafe-actions';\nimport { setWidgetTab } from './ocpDashboardActions';\nimport { costSummaryWidget, cpuWidget, memoryWidget, volumeWidget } from './ocpDashboardWidgets';\nexport const defaultState = {\n    currentWidgets: [costSummaryWidget.id, cpuWidget.id, memoryWidget.id, volumeWidget.id],\n    widgets: {\n        [costSummaryWidget.id]: costSummaryWidget,\n        [cpuWidget.id]: cpuWidget,\n        [memoryWidget.id]: memoryWidget,\n        [volumeWidget.id]: volumeWidget,\n    },\n};\nexport function ocpDashboardReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(setWidgetTab):\n            return Object.assign(Object.assign({}, state), { widgets: Object.assign(Object.assign({}, state.widgets), { [action.payload.id]: Object.assign(Object.assign({}, state.widgets[action.payload.id]), { currentTab: action.payload.tab }) }) });\n        default:\n            return state;\n    }\n}\n","export const selectPagination = (stateProjector) => {\n    return (state) => {\n        return getPagination(stateProjector(state));\n    };\n};\nexport const getPagination = (payload) => {\n    if (payload === null) {\n        return {\n            page: 1,\n            perPage: 1,\n            count: 0,\n        };\n    }\n    let urlParams = null;\n    if (payload.links.next !== null) {\n        urlParams = new URLSearchParams(payload.links.next.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) - limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    if (payload.links.previous !== null) {\n        urlParams = new URLSearchParams(payload.links.previous.split('?')[1]);\n        const limit = Number(urlParams.get('limit'));\n        const offset = Number(urlParams.get('offset')) + limit;\n        return {\n            page: offset / limit + 1,\n            perPage: limit,\n            count: payload.meta.count,\n        };\n    }\n    urlParams = new URLSearchParams(payload.links.first.split('?')[1]);\n    return {\n        page: 1,\n        perPage: Number(urlParams.get('limit')),\n        count: payload.meta.count,\n    };\n};\n","export const selectQuery = (stateProjector, keys) => {\n    return (state) => {\n        const params = getQuery(stateProjector(state));\n        return keys.reduce((acc, curr) => {\n            return Object.assign(Object.assign({}, acc), { [curr]: params.get(curr) });\n        }, {});\n    };\n};\nconst getQuery = (payload) => {\n    if (payload === null) {\n        return new URLSearchParams();\n    }\n    const [, search] = payload.links.first.split('?');\n    return new URLSearchParams(search);\n};\n","export const exportStateKey = 'export';\nexport function getExportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}-${reportType}--${query}`;\n}\n","import { exportStateKey, getExportId } from './exportCommon';\nexport const selectExportState = (state) => state[exportStateKey];\nexport const selectExport = (state, reportPathsType, reportType, query) => selectExportState(state).byId.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportFetchStatus = (state, reportPathsType, reportType, query) => selectExportState(state).fetchStatus.get(getExportId(reportPathsType, reportType, query));\nexport const selectExportError = (state, reportPathsType, reportType, query) => selectExportState(state).errors.get(getExportId(reportPathsType, reportType, query));\n","import { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications';\nimport { runExport } from 'api/export/exportUtils';\nimport { ExportsLink } from 'components/exports/exportsLink';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { getExportId } from 'store/export/exportCommon';\nimport { selectExport, selectExportFetchStatus } from 'store/export/exportSelectors';\nimport { createAction } from 'typesafe-actions';\nimport { isBetaFeature } from 'utils/feature';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchExportRequest = createAction('report/request')();\nexport const fetchExportSuccess = createAction('report/success')();\nexport const fetchExportFailure = createAction('report/failure')();\nexport function exportReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isExportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getExportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchExportRequest(meta));\n        runExport(reportPathsType, reportType, query)\n            .then(res => {\n            dispatch(fetchExportSuccess(res.data, meta));\n            /* Todo: Show in-progress features in beta environment only */\n            if (isBetaFeature()) {\n                const description = intl.formatMessage(messages.ExportNotificationSuccessDesc, {\n                    link: React.createElement(ExportsLink, { isActionLink: true, onClick: () => dispatch(clearNotifications()) }),\n                    value: React.createElement(\"b\", null, intl.formatMessage(messages.ExportsTitle)),\n                });\n                dispatch(addNotification({\n                    description,\n                    dismissable: true,\n                    title: intl.formatMessage(messages.ExportNotificationSuccessTitle),\n                    variant: 'success',\n                }));\n            }\n        })\n            .catch(err => {\n            dispatch(fetchExportFailure(err, meta));\n            /* Todo: Show in-progress features in beta environment only */\n            if (isBetaFeature()) {\n                dispatch(addNotification({\n                    description: intl.formatMessage(messages.ExportNotificationErrorDesc),\n                    dismissable: true,\n                    title: intl.formatMessage(messages.ExportNotificationErrorTitle),\n                    variant: 'danger',\n                }));\n            }\n        });\n    };\n}\nfunction isExportExpired(state, reportPathsType, reportType, query) {\n    const report = selectExport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectExportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runExport as runAwsExport } from './awsExport';\nimport { runExport as runAwsOcpExport } from './awsOcpExport';\nimport { runExport as runAzureExport } from './azureExport';\nimport { runExport as runAzureOcpExport } from './azureOcpExport';\nimport { runExport as runGcpExport } from './gcpExport';\nimport { runExport as runGcpOcpExport } from './gcpOcpExport';\nimport { runExport as runIbmExport } from './ibmExport';\nimport { runExport as runOcpCloudExport } from './ocpCloudExport';\nimport { runExport as runOcpExport } from './ocpExport';\nexport function runExport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsExport(reportType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            report = runAwsOcpExport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureExport(reportType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            report = runAzureOcpExport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpExport(reportType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            report = runGcpOcpExport(reportType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            report = runIbmExport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudExport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpExport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { ReportTypePaths } from 'api/reports/awsReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/awsOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/azureReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/azureOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/gcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/gcpOcpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ibmReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpCloudReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { ReportTypePaths } from 'api/reports/ocpReports';\nimport axios from 'axios';\nexport function runExport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`, {\n        headers: {\n            Accept: 'text/csv',\n        },\n    });\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchExportFailure, fetchExportRequest, fetchExportSuccess } from './exportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function exportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchExportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchExportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, {\n                    data: action.payload,\n                    timeRequested: Date.now(),\n                }), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchExportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/aws/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/azure/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/gcp/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/gcp/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/ibm/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/infrastructures/all/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","import axios from 'axios';\nexport const ForecastTypePaths = {\n    [\"cost\" /* cost */]: 'forecasts/openshift/costs/',\n    [\"infrastructure\" /* infrastructure */]: 'forecasts/openshift/costs/',\n    [\"supplementary\" /* supplementary */]: 'forecasts/openshift/costs/',\n};\nexport function runForecast(forecastType, query) {\n    const insights = window.insights;\n    const path = ForecastTypePaths[forecastType];\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`${path}?${query}`);\n        });\n    }\n    else {\n        return axios.get(`${path}?${query}`);\n    }\n}\n","export const forecastStateKey = 'forecast';\nexport function getForecastId(forecastPathsType, forecastType, query) {\n    return `${forecastPathsType}--${forecastType}--${query}`;\n}\n","import { forecastStateKey, getForecastId } from './forecastCommon';\nexport const selectForecastState = (state) => state[forecastStateKey];\nexport const selectForecast = (state, forecastPathsType, forecastType, query) => selectForecastState(state).byId.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastFetchStatus = (state, forecastPathsType, forecastType, query) => selectForecastState(state).fetchStatus.get(getForecastId(forecastPathsType, forecastType, query));\nexport const selectForecastError = (state, forecastPathsType, forecastType, query) => selectForecastState(state).errors.get(getForecastId(forecastPathsType, forecastType, query));\n","import { runForecast } from 'api/forecasts/forecastUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getForecastId } from './forecastCommon';\nimport { selectForecast, selectForecastFetchStatus } from './forecastSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchForecastRequest = createAction('forecast/request')();\nexport const fetchForecastSuccess = createAction('forecast/success')();\nexport const fetchForecastFailure = createAction('forecast/failure')();\nexport function fetchForecast(forecastPathsType, forecastType, query) {\n    return (dispatch, getState) => {\n        if (!isForecastExpired(getState(), forecastPathsType, forecastType, query)) {\n            return;\n        }\n        const meta = {\n            forecastId: getForecastId(forecastPathsType, forecastType, query),\n        };\n        dispatch(fetchForecastRequest(meta));\n        runForecast(forecastPathsType, forecastType, query)\n            .then(res => {\n            dispatch(fetchForecastSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchForecastFailure(err, meta));\n        });\n    };\n}\nfunction isForecastExpired(state, forecastPathsType, forecastType, query) {\n    const forecast = selectForecast(state, forecastPathsType, forecastType, query);\n    const fetchStatus = selectForecastFetchStatus(state, forecastPathsType, forecastType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!forecast) {\n        return true;\n    }\n    const now = Date.now();\n    return now > forecast.timeRequested + expirationMS;\n}\n","import { runForecast as runAwsForecast } from './awsForecast';\nimport { runForecast as runAwsOcpForecast } from './awsOcpForecast';\nimport { runForecast as runAzureForecast } from './azureForecast';\nimport { runForecast as runAzureOcpForecast } from './azureOcpForecast';\nimport { runForecast as runGcpForecast } from './gcpForecast';\nimport { runForecast as runGcpOcpForecast } from './gcpOcpForecast';\nimport { runForecast as runIbmForecast } from './ibmForecast';\nimport { runForecast as runOcpCloudForecast } from './ocpCloudForecast';\nimport { runForecast as runOcpForecast } from './ocpForecast';\nexport function runForecast(forecastPathsType, forecastType, query) {\n    let forecast;\n    switch (forecastPathsType) {\n        case \"aws\" /* aws */:\n            forecast = runAwsForecast(forecastType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            forecast = runAwsOcpForecast(forecastType, query);\n            break;\n        case \"azure\" /* azure */:\n            forecast = runAzureForecast(forecastType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            forecast = runAzureOcpForecast(forecastType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            forecast = runGcpForecast(forecastType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            forecast = runGcpOcpForecast(forecastType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            forecast = runIbmForecast(forecastType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            forecast = runOcpForecast(forecastType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            forecast = runOcpCloudForecast(forecastType, query);\n            break;\n    }\n    return forecast;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchForecastFailure, fetchForecastRequest, fetchForecastSuccess } from './forecastActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function forecastReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchForecastRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.forecastId, 1 /* inProgress */) });\n        case getType(fetchForecastSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.forecastId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.forecastId, null) });\n        case getType(fetchForecastFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.forecastId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.forecastId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchPriceListFailure, fetchPriceListRequest, fetchPriceListSuccess } from './actions';\nexport const stateKey = 'priceList';\nexport const defaultState = {\n    rates: new Map(),\n    error: new Map(),\n    status: new Map(),\n};\nexport function reducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchPriceListRequest):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.payload.providerUuid, 1 /* inProgress */) });\n        case getType(fetchPriceListSuccess):\n            return Object.assign(Object.assign({}, state), { status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */), rates: new Map(state.rates).set(action.meta.providerUuid, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), error: new Map(state.error).set(action.meta.providerUuid, null) });\n        case getType(fetchPriceListFailure):\n            return Object.assign(Object.assign({}, state), { error: new Map(state.error).set(action.meta.providerUuid, action.payload), status: new Map(state.status).set(action.meta.providerUuid, 2 /* complete */) });\n        default:\n            return state;\n    }\n}\n","import { fetchRate } from 'api/rates';\nimport { expirationMS } from 'store/common';\nimport { createAction } from 'typesafe-actions';\nimport { cachedRates, status } from './selectors';\nexport const fetchPriceListRequest = createAction('priceList/request')();\nexport const fetchPriceListSuccess = createAction('priceList/success')();\nexport const fetchPriceListFailure = createAction('priceList/failure')();\nfunction isExpired(state, meta) {\n    const cachedData = cachedRates(state, meta.providerUuid);\n    const reqStatus = status(state, meta.providerUuid);\n    if (reqStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!cachedData) {\n        return true;\n    }\n    const now = Date.now();\n    return now > cachedData.timeRequested + expirationMS;\n}\nexport function fetchPriceList(providerUuid) {\n    const meta = { providerUuid };\n    return (dispatch, getState) => {\n        if (!isExpired(getState(), meta)) {\n            return;\n        }\n        dispatch(fetchPriceListRequest(meta));\n        return fetchRate(providerUuid)\n            .then(res => {\n            dispatch(fetchPriceListSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchPriceListFailure(err, meta));\n        });\n    };\n}\n","import { notifications } from '@redhat-cloud-services/frontend-components-notifications';\nimport { combineReducers } from 'redux';\nimport { accountSettingsReducer, accountSettingsStateKey } from 'store/accountSettings';\nimport { awsCostOverviewReducer, awsCostOverviewStateKey } from 'store/breakdown/costOverview/awsCostOverview';\nimport { azureCostOverviewReducer, azureCostOverviewStateKey } from 'store/breakdown/costOverview/azureCostOverview';\nimport { gcpCostOverviewReducer, gcpCostOverviewStateKey } from 'store/breakdown/costOverview/gcpCostOverview';\nimport { ibmCostOverviewReducer, ibmCostOverviewStateKey } from 'store/breakdown/costOverview/ibmCostOverview';\nimport { ocpCostOverviewReducer, ocpCostOverviewStateKey } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { awsHistoricalDataReducer, awsHistoricalDataStateKey } from 'store/breakdown/historicalData/awsHistoricalData';\nimport { azureHistoricalDataReducer, azureHistoricalDataStateKey, } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { gcpHistoricalDataReducer, gcpHistoricalDataStateKey } from 'store/breakdown/historicalData/gcpHistoricalData';\nimport { ibmHistoricalDataReducer, ibmHistoricalDataStateKey } from 'store/breakdown/historicalData/ibmHistoricalData';\nimport { ocpHistoricalDataReducer, ocpHistoricalDataStateKey } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { costModelsReducer, costModelsStateKey } from 'store/costModels';\nimport { awsDashboardReducer, awsDashboardStateKey } from 'store/dashboard/awsDashboard';\nimport { awsOcpDashboardReducer, awsOcpDashboardStateKey } from 'store/dashboard/awsOcpDashboard';\nimport { azureDashboardReducer, azureDashboardStateKey } from 'store/dashboard/azureDashboard';\nimport { azureOcpDashboardReducer, azureOcpDashboardStateKey } from 'store/dashboard/azureOcpDashboard';\nimport { gcpDashboardReducer, gcpDashboardStateKey } from 'store/dashboard/gcpDashboard';\nimport { gcpOcpDashboardReducer, gcpOcpDashboardStateKey } from 'store/dashboard/gcpOcpDashboard';\nimport { ibmDashboardReducer, ibmDashboardStateKey } from 'store/dashboard/ibmDashboard';\nimport { ocpCloudDashboardReducer, ocpCloudDashboardStateKey } from 'store/dashboard/ocpCloudDashboard';\nimport { ocpDashboardReducer, ocpDashboardStateKey } from 'store/dashboard/ocpDashboard';\nimport { exportReducer, exportStateKey } from 'store/export';\nimport { forecastReducer, forecastStateKey } from 'store/forecasts';\nimport { orgReducer, orgStateKey } from 'store/orgs';\nimport { priceListReducer, priceListStateKey } from 'store/priceList';\nimport { reportReducer, reportStateKey } from 'store/reports';\nimport { resourceReducer, resourceStateKey } from 'store/resources';\nimport { sourcesReducer, sourcesStateKey } from 'store/sourceSettings';\nimport { tagReducer, tagStateKey } from 'store/tags';\nimport { metricsReducer, metricsStateKey } from './metrics';\nimport { providersReducer, providersStateKey } from './providers';\nimport { rbacReducer, rbacStateKey } from './rbac';\nimport { uiReducer, uiStateKey } from './ui';\nimport { userAccessReducer, userAccessStateKey } from './userAccess';\nexport const rootReducer = combineReducers({\n    [accountSettingsStateKey]: accountSettingsReducer,\n    [awsOcpDashboardStateKey]: awsOcpDashboardReducer,\n    [awsCostOverviewStateKey]: awsCostOverviewReducer,\n    [awsDashboardStateKey]: awsDashboardReducer,\n    [awsHistoricalDataStateKey]: awsHistoricalDataReducer,\n    [azureOcpDashboardStateKey]: azureOcpDashboardReducer,\n    [azureCostOverviewStateKey]: azureCostOverviewReducer,\n    [azureDashboardStateKey]: azureDashboardReducer,\n    [azureHistoricalDataStateKey]: azureHistoricalDataReducer,\n    [costModelsStateKey]: costModelsReducer,\n    [exportStateKey]: exportReducer,\n    [gcpCostOverviewStateKey]: gcpCostOverviewReducer,\n    [gcpDashboardStateKey]: gcpDashboardReducer,\n    [gcpOcpDashboardStateKey]: gcpOcpDashboardReducer,\n    [gcpHistoricalDataStateKey]: gcpHistoricalDataReducer,\n    [ibmCostOverviewStateKey]: ibmCostOverviewReducer,\n    [ibmDashboardStateKey]: ibmDashboardReducer,\n    [ibmHistoricalDataStateKey]: ibmHistoricalDataReducer,\n    [metricsStateKey]: metricsReducer,\n    [ocpCostOverviewStateKey]: ocpCostOverviewReducer,\n    [ocpDashboardStateKey]: ocpDashboardReducer,\n    [ocpCloudDashboardStateKey]: ocpCloudDashboardReducer,\n    [ocpHistoricalDataStateKey]: ocpHistoricalDataReducer,\n    [orgStateKey]: orgReducer,\n    [priceListStateKey]: priceListReducer,\n    [providersStateKey]: providersReducer,\n    [rbacStateKey]: rbacReducer,\n    [reportStateKey]: reportReducer,\n    [forecastStateKey]: forecastReducer,\n    [resourceStateKey]: resourceReducer,\n    [sourcesStateKey]: sourcesReducer,\n    [tagStateKey]: tagReducer,\n    [uiStateKey]: uiReducer,\n    [userAccessStateKey]: userAccessReducer,\n    notifications,\n});\n","import { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications';\nimport axios from 'axios';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './rootReducer';\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ serialize: true })\n    : compose;\nexport const middlewares = [thunk, notificationsMiddleware()];\nexport function configureStore(initialState) {\n    const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n    const store = createStore(rootReducer, initialState, enhancer);\n    axios.interceptors.response.use(null, error => {\n        return Promise.reject(error);\n    });\n    return store;\n}\n","import { fetchRateMetrics } from 'api/metrics';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchMetricsRequest, success: fetchMetricsSuccess, failure: fetchMetricsFailure, } = createAsyncAction('fetch/metrics/request', 'fetch/metrics/success', 'fetch/metrics/failure')();\nexport const fetchMetrics = (source_type = '') => {\n    return (dispatch) => {\n        dispatch(fetchMetricsRequest());\n        return fetchRateMetrics(source_type)\n            .then(res => {\n            dispatch(fetchMetricsSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchMetricsFailure(err));\n        });\n    };\n};\n","import axios from 'axios';\nexport function fetchRateMetrics(source_type = '') {\n    const query = source_type ? `&source_type=${source_type}` : '';\n    return axios.get(`metrics/?limit=20${query}`);\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchMetricsFailure, fetchMetricsRequest, fetchMetricsSuccess } from './actions';\nexport const stateKey = 'metrics';\nexport const defaultState = {\n    error: null,\n    status: 0 /* none */,\n    metrics: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchMetricsSuccess):\n            return {\n                error: null,\n                status: 2 /* complete */,\n                metrics: action.payload.data,\n            };\n        case getType(fetchMetricsFailure):\n            return {\n                status: 2 /* complete */,\n                error: action.payload,\n                metrics: null,\n            };\n        case getType(fetchMetricsRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        default:\n            return state;\n    }\n};\n","import { parseApiError } from 'pages/costModels/createCostModelWizard/parseError';\nimport { stateKey } from './reducer';\nexport const metricsState = (state) => state[stateKey];\nexport const status = (state) => metricsState(state).status;\nexport const error = (state) => {\n    const err = metricsState(state).error;\n    if (err === null) {\n        return '';\n    }\n    return parseApiError(err);\n};\nexport const metrics = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return {};\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        const prev = acc[curr.label_metric] ? Object.assign({}, acc[curr.label_metric]) : {};\n        return Object.assign(Object.assign({}, acc), { [curr.label_metric]: Object.assign(Object.assign({}, prev), { [curr.label_measurement]: curr }) });\n    }, {});\n};\nexport const maxRate = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return 0;\n    }\n    return metricsPayload.data.length;\n};\nexport const costTypes = (state) => {\n    const metricsPayload = metricsState(state).metrics;\n    if (metricsPayload === null) {\n        return [];\n    }\n    return metricsPayload.data.reduce((acc, curr) => {\n        if (acc.includes(curr.default_cost_type)) {\n            return acc;\n        }\n        return [curr.default_cost_type, ...acc];\n    }, []);\n};\n","import axios from 'axios';\nexport const OrgTypePaths = {\n    [\"org\" /* org */]: 'organizations/aws/',\n};\nexport function runOrg(orgType, query) {\n    const path = OrgTypePaths[orgType];\n    return axios.get(`${path}?${query}`);\n}\n","export const orgStateKey = 'org';\nexport function getOrgId(orgPathsType, orgType, query) {\n    return `${orgPathsType}--${orgType}--${query}`;\n}\n","import { getOrgId, orgStateKey } from './orgCommon';\nexport const selectOrgState = (state) => state[orgStateKey];\nexport const selectOrg = (state, orgPathsType, orgType, query) => selectOrgState(state).byId.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgFetchStatus = (state, orgPathsType, orgType, query) => selectOrgState(state).fetchStatus.get(getOrgId(orgPathsType, orgType, query));\nexport const selectOrgError = (state, orgPathsType, orgType, query) => selectOrgState(state).errors.get(getOrgId(orgPathsType, orgType, query));\n","import { runOrg } from 'api/orgs/orgUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getOrgId } from './orgCommon';\nimport { selectOrg, selectOrgFetchStatus } from './orgSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchOrgRequest = createAction('org/request')();\nexport const fetchOrgSuccess = createAction('org/success')();\nexport const fetchOrgFailure = createAction('org/failure')();\nexport function fetchOrg(orgPathsType, orgType, query) {\n    return (dispatch, getState) => {\n        if (!isOrgExpired(getState(), orgPathsType, orgType, query)) {\n            return;\n        }\n        const meta = {\n            orgId: getOrgId(orgPathsType, orgType, query),\n        };\n        dispatch(fetchOrgRequest(meta));\n        runOrg(orgPathsType, orgType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchOrgSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchOrgFailure(err, meta));\n        });\n    };\n}\nfunction isOrgExpired(state, orgPathsType, orgType, query) {\n    const orgReport = selectOrg(state, orgPathsType, orgType, query);\n    const fetchStatus = selectOrgFetchStatus(state, orgPathsType, orgType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!orgReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > orgReport.timeRequested + expirationMS;\n}\n","import { runOrg as runAwsOrg } from './awsOrgs';\nexport function runOrg(orgPathsType, orgType, query) {\n    let orgReport;\n    switch (orgPathsType) {\n        case \"aws\" /* aws */:\n            orgReport = runAwsOrg(orgType, query);\n            break;\n    }\n    return orgReport;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchOrgFailure, fetchOrgRequest, fetchOrgSuccess } from './orgActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function orgReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchOrgRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.orgId, 1 /* inProgress */) });\n        case getType(fetchOrgSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.orgId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.orgId, null) });\n        case getType(fetchOrgFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.orgId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.orgId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const stateKey = 'providers';\nexport const addProviderKey = 'add-provider';\nexport const awsProvidersQuery = {\n    limit: 100,\n    type: 'AWS',\n};\nexport const azureProvidersQuery = {\n    limit: 100,\n    type: 'Azure',\n};\nexport const gcpProvidersQuery = {\n    limit: 100,\n    type: 'GCP',\n};\nexport const ibmProvidersQuery = {\n    limit: 100,\n    type: 'IBM',\n};\nexport const ocpProvidersQuery = {\n    limit: 100,\n    type: 'OCP',\n};\n// Omitting the type param, returns all providers\nexport const providersQuery = {\n    limit: 1000,\n};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { fetchProviders as apiGetProviders } from 'api/providers';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './providersCommon';\nexport const fetchProvidersRequest = createAction('providers/fetch/request')();\nexport const fetchProvidersSuccess = createAction('providers/fetch/success')();\nexport const fetchProvidersFailure = createAction('providers/fetch/failure')();\nexport function fetchProviders(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchProvidersRequest(meta));\n        return apiGetProviders(query)\n            .then(res => {\n            dispatch(fetchProvidersSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchProvidersFailure(err, meta));\n        });\n    };\n}\nexport const clearProviderFailure = createAction('providers/clear/failure');\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchProvidersFailure, fetchProvidersRequest, fetchProvidersSuccess } from './providersActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function providersReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchProvidersRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchProvidersSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchProvidersFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { addProviderKey, getReportId, stateKey } from './providersCommon';\nexport const selectProvidersState = (state) => state[stateKey];\n// Add provider\nexport const selectAddProviderFetchStatus = (state) => selectProvidersState(state).fetchStatus.get(addProviderKey);\nexport const selectAddProviderError = (state) => selectProvidersState(state).errors.get(addProviderKey);\n// Fetch providers\nexport const selectProviders = (state, providerType, query) => selectProvidersState(state).byId.get(getReportId(providerType, query));\nexport const selectProvidersFetchStatus = (state, providerType, query) => selectProvidersState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectProvidersError = (state, providerType, query) => selectProvidersState(state).errors.get(getReportId(providerType, query));\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { getRBAC } from 'api/rbac';\nimport { intl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport { createAsyncAction } from 'typesafe-actions';\nexport const { request: fetchRbacRequest, success: fetchRbacSuccess, failure: fetchRbacFailure, } = createAsyncAction('fetch/RBAC/request', 'fetch/RBAC/success', 'fetch/RBAC/failure')();\nexport const fetchRbac = () => {\n    return (dispatch) => {\n        dispatch(fetchRbacRequest());\n        return getRBAC()\n            .then(res => {\n            dispatch(fetchRbacSuccess(res));\n        })\n            .catch(err => {\n            dispatch(addNotification({\n                title: intl.formatMessage(messages.RbacErrorTitle),\n                description: intl.formatMessage(messages.RbacErrorDescription),\n                variant: 'danger',\n                dismissable: true,\n            }));\n            dispatch(fetchRbacFailure(err));\n        });\n    };\n};\n","export async function getRBAC() {\n    const _insights = window.insights;\n    if (_insights &&\n        _insights.chrome &&\n        _insights.chrome.auth &&\n        _insights.chrome.auth.getUser &&\n        _insights.chrome.getUserPermissions) {\n        const user = await _insights.chrome.auth.getUser();\n        const permissions = await _insights.chrome.getUserPermissions();\n        return {\n            isOrgAdmin: user.identity.user.is_org_admin,\n            permissions,\n        };\n    }\n    return { isOrgAdmin: false, permissions: null };\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchRbacFailure, fetchRbacRequest, fetchRbacSuccess } from './actions';\nexport const stateKey = 'RBAC';\nexport const defaultState = {\n    isOrgAdmin: false,\n    permissions: null,\n    status: 0 /* none */,\n    error: null,\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchRbacRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchRbacSuccess):\n            return Object.assign(Object.assign({}, action.payload), { status: 2 /* complete */, error: null });\n        case getType(fetchRbacFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        default:\n            return state;\n    }\n};\n","import { stateKey } from './reducer';\nexport const selectRbacState = (state) => state[stateKey];\nexport const isCostModelWritePermission = (state) => {\n    const { isOrgAdmin, permissions } = selectRbacState(state);\n    if (isOrgAdmin === true) {\n        return true;\n    }\n    if (!permissions) {\n        return false;\n    }\n    const costModelPermissions = permissions.find(item => item.permission.startsWith('cost-management'));\n    if (!costModelPermissions) {\n        return false;\n    }\n    const [app, resource, operation] = costModelPermissions.permission.split(':');\n    if (app === 'cost-management' && resource === '*' && operation === '*') {\n        return true;\n    }\n    if ((resource === 'rate' || resource === 'cost_model') && operation === 'write') {\n        return true;\n    }\n    return false;\n};\n","import axios from 'axios';\nexport const ReportTypePaths = {\n    [\"cost\" /* cost */]: 'reports/openshift/costs/',\n    [\"cpu\" /* cpu */]: 'reports/openshift/compute/',\n    [\"memory\" /* memory */]: 'reports/openshift/memory/',\n    [\"volume\" /* volume */]: 'reports/openshift/volumes/',\n};\nexport function runReport(reportType, query) {\n    const path = ReportTypePaths[reportType];\n    return axios.get(`${path}?${query}`);\n}\n","export const reportStateKey = 'report';\nexport function getReportId(reportPathsType, reportType, query) {\n    return `${reportPathsType}--${reportType}--${query}`;\n}\n","import { getReportId, reportStateKey } from './reportCommon';\nexport const selectReportState = (state) => state[reportStateKey];\nexport const selectReport = (state, reportPathsType, reportType, query) => selectReportState(state).byId.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportFetchStatus = (state, reportPathsType, reportType, query) => selectReportState(state).fetchStatus.get(getReportId(reportPathsType, reportType, query));\nexport const selectReportError = (state, reportPathsType, reportType, query) => selectReportState(state).errors.get(getReportId(reportPathsType, reportType, query));\n","import { runReport } from 'api/reports/reportUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './reportCommon';\nimport { selectReport, selectReportFetchStatus } from './reportSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchReportRequest = createAction('report/request')();\nexport const fetchReportSuccess = createAction('report/success')();\nexport const fetchReportFailure = createAction('report/failure')();\nexport function fetchReport(reportPathsType, reportType, query) {\n    return (dispatch, getState) => {\n        if (!isReportExpired(getState(), reportPathsType, reportType, query)) {\n            return;\n        }\n        const meta = {\n            reportId: getReportId(reportPathsType, reportType, query),\n        };\n        dispatch(fetchReportRequest(meta));\n        runReport(reportPathsType, reportType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchReportSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchReportFailure(err, meta));\n        });\n    };\n}\nfunction isReportExpired(state, reportPathsType, reportType, query) {\n    const report = selectReport(state, reportPathsType, reportType, query);\n    const fetchStatus = selectReportFetchStatus(state, reportPathsType, reportType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!report) {\n        return true;\n    }\n    const now = Date.now();\n    return now > report.timeRequested + expirationMS;\n}\n","import { runReport as runAwsOcpReport } from './awsOcpReports';\nimport { runReport as runAwsReport } from './awsReports';\nimport { runReport as runAzureOcpReport } from './azureOcpReports';\nimport { runReport as runAzureReport } from './azureReports';\nimport { runReport as runGcpOcpReport } from './gcpOcpReports';\nimport { runReport as runGcpReport } from './gcpReports';\nimport { runReport as runIbmReport } from './ibmReports';\nimport { runReport as runOcpCloudReport } from './ocpCloudReports';\nimport { runReport as runOcpReport } from './ocpReports';\nimport { runReport as runOcpUsageReport } from './ocpUsageReports';\nexport function runReport(reportPathsType, reportType, query) {\n    let report;\n    switch (reportPathsType) {\n        case \"aws\" /* aws */:\n            report = runAwsReport(reportType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            report = runAwsOcpReport(reportType, query);\n            break;\n        case \"azure\" /* azure */:\n            report = runAzureReport(reportType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            report = runAzureOcpReport(reportType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            report = runGcpReport(reportType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            report = runGcpOcpReport(reportType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            report = runIbmReport(reportType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            report = runOcpReport(reportType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            report = runOcpCloudReport(reportType, query);\n            break;\n        case \"ocp_usage\" /* ocpUsage */:\n            report = runOcpUsageReport(reportType, query);\n            break;\n    }\n    return report;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchReportFailure, fetchReportRequest, fetchReportSuccess } from './reportActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function reportReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchReportRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchReportSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchReportFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","export const resourceStateKey = 'resource';\nexport function getResourceId(resourcePathsType, resourceType, query) {\n    return `${resourcePathsType}--${resourceType}--${query}`;\n}\n","import { getResourceId, resourceStateKey } from './resourceCommon';\nexport const selectResourceState = (state) => state[resourceStateKey];\nexport const selectResource = (state, resourcePathsType, resourceType, query) => selectResourceState(state).byId.get(getResourceId(resourcePathsType, resourceType, query));\nexport const selectResourceFetchStatus = (state, resourcePathsType, resourceType, query) => selectResourceState(state).fetchStatus.get(getResourceId(resourcePathsType, resourceType, query));\nexport const selectResourceError = (state, resourcePathsType, resourceType, query) => selectResourceState(state).errors.get(getResourceId(resourcePathsType, resourceType, query));\n","import { runResource } from 'api/resources/resourceUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getResourceId } from './resourceCommon';\nimport { selectResource, selectResourceFetchStatus } from './resourceSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchResourceRequest = createAction('resource/request')();\nexport const fetchResourceSuccess = createAction('resource/success')();\nexport const fetchResourceFailure = createAction('resource/failure')();\nexport function fetchResource(resourcePathsType, resourceType, query) {\n    return (dispatch, getState) => {\n        if (!isResourceExpired(getState(), resourcePathsType, resourceType, query)) {\n            return;\n        }\n        const meta = {\n            resourceId: getResourceId(resourcePathsType, resourceType, query),\n        };\n        dispatch(fetchResourceRequest(meta));\n        runResource(resourcePathsType, resourceType, query)\n            .then(res => {\n            dispatch(fetchResourceSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchResourceFailure(err, meta));\n        });\n    };\n}\nfunction isResourceExpired(state, resourcePathsType, resourceType, query) {\n    const resource = selectResource(state, resourcePathsType, resourceType, query);\n    const fetchStatus = selectResourceFetchStatus(state, resourcePathsType, resourceType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!resource) {\n        return true;\n    }\n    const now = Date.now();\n    return now > resource.timeRequested + expirationMS;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchResourceFailure, fetchResourceRequest, fetchResourceSuccess } from './resourceActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function resourceReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchResourceRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.resourceId, 1 /* inProgress */) });\n        case getType(fetchResourceSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.resourceId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.resourceId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.resourceId, null) });\n        case getType(fetchResourceFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.resourceId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.resourceId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { fetchProviders as apiGetSources } from 'api/providers';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nexport const updateFilterToolbar = createAction('fetch/source/filter')();\nexport const { request: fetchSourcesRequest, success: fetchSourcesSuccess, failure: fetchSourcesFailure, } = createAsyncAction('fetch/source/request', 'fetch/source/success', 'fetch/source/failure')();\nexport const fetchSources = (query = '') => {\n    return (dispatch) => {\n        dispatch(fetchSourcesRequest());\n        return apiGetSources(query)\n            .then(res => {\n            dispatch(fetchSourcesSuccess(res));\n        })\n            .catch(err => {\n            dispatch(fetchSourcesFailure(err));\n        });\n    };\n};\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchSourcesFailure, fetchSourcesRequest, fetchSourcesSuccess, updateFilterToolbar } from './actions';\nexport const stateKey = 'sources';\nexport const defaultState = {\n    sources: null,\n    error: null,\n    status: 0 /* none */,\n    currentFilterType: 'name',\n    currentFilterValue: '',\n    filter: '',\n};\nexport const reducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchSourcesRequest):\n            return Object.assign(Object.assign({}, state), { status: 1 /* inProgress */ });\n        case getType(fetchSourcesSuccess):\n            return Object.assign(Object.assign({}, state), { currentFilterValue: '', filter: state.currentFilterValue, status: 2 /* complete */, error: null, sources: action.payload.data });\n        case getType(fetchSourcesFailure):\n            return Object.assign(Object.assign({}, state), { status: 2 /* complete */, error: action.payload });\n        case getType(updateFilterToolbar):\n            return Object.assign(Object.assign({}, state), action.payload);\n        default:\n            return state;\n    }\n};\n","import { selectPagination } from 'store/djangoUtils/pagination';\nimport { selectQuery } from 'store/djangoUtils/query';\nimport { stateKey } from './reducer';\nexport const sourcesState = (state) => state[stateKey];\nexport const sources = (state) => {\n    const srcs = sourcesState(state).sources;\n    if (srcs) {\n        return srcs.data;\n    }\n    return [];\n};\nexport const status = (state) => sourcesState(state).status;\nexport const error = (state) => sourcesState(state).error;\nexport const currentFilterValue = (state) => sourcesState(state).currentFilterValue;\nexport const currentFilterType = (state) => sourcesState(state).currentFilterType;\nexport const filter = (state) => sourcesState(state).filter;\nexport const query = selectQuery((state) => sourcesState(state).sources, ['name', 'type', 'offset', 'limit']);\nexport const pagination = selectPagination((state) => sourcesState(state).sources);\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/aws/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/aws/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/azure/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/azure/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/gcp/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/gcp/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/ibm/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/infrastructures/all/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","import axios from 'axios';\nexport const TagTypePaths = {\n    [\"tag\" /* tag */]: 'tags/openshift/',\n};\nexport function runTag(tagType, query) {\n    const path = TagTypePaths[tagType];\n    return axios.get(`${path}?${query}`);\n}\n","export const tagStateKey = 'tag';\nexport function getTagId(tagPathsType, tagType, query) {\n    return `${tagPathsType}--${tagType}--${query}`;\n}\n","import { getTagId, tagStateKey } from './tagCommon';\nexport const selectTagState = (state) => state[tagStateKey];\nexport const selectTag = (state, tagPathsType, tagType, query) => selectTagState(state).byId.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagFetchStatus = (state, tagPathsType, tagType, query) => selectTagState(state).fetchStatus.get(getTagId(tagPathsType, tagType, query));\nexport const selectTagError = (state, tagPathsType, tagType, query) => selectTagState(state).errors.get(getTagId(tagPathsType, tagType, query));\n","import { runTag } from 'api/tags/tagUtils';\nimport { createAction } from 'typesafe-actions';\nimport { getTagId } from './tagCommon';\nimport { selectTag, selectTagFetchStatus } from './tagSelectors';\nconst expirationMS = 30 * 60 * 1000; // 30 minutes\nexport const fetchTagRequest = createAction('tag/request')();\nexport const fetchTagSuccess = createAction('tag/success')();\nexport const fetchTagFailure = createAction('tag/failure')();\nexport function fetchTag(tagPathsType, tagType, query) {\n    return (dispatch, getState) => {\n        if (!isTagExpired(getState(), tagPathsType, tagType, query)) {\n            return;\n        }\n        const meta = {\n            tagId: getTagId(tagPathsType, tagType, query),\n        };\n        dispatch(fetchTagRequest(meta));\n        runTag(tagPathsType, tagType, query)\n            .then(res => {\n            // See https://github.com/project-koku/koku-ui/pull/580\n            // const repsonseData = dropCurrentMonthData(res, query);\n            dispatch(fetchTagSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchTagFailure(err, meta));\n        });\n    };\n}\nfunction isTagExpired(state, tagPathsType, tagType, query) {\n    const tagReport = selectTag(state, tagPathsType, tagType, query);\n    const fetchStatus = selectTagFetchStatus(state, tagPathsType, tagType, query);\n    if (fetchStatus === 1 /* inProgress */) {\n        return false;\n    }\n    if (!tagReport) {\n        return true;\n    }\n    const now = Date.now();\n    return now > tagReport.timeRequested + expirationMS;\n}\n","import { runTag as runAwsOcpTag } from './awsOcpTags';\nimport { runTag as runAwsTag } from './awsTags';\nimport { runTag as runAzureOcpTag } from './azureOcpTags';\nimport { runTag as runAzureTag } from './azureTags';\nimport { runTag as runGcpOcpTag } from './gcpOcpTags';\nimport { runTag as runGcpTag } from './gcpTags';\nimport { runTag as runIbmTag } from './ibmTags';\nimport { runTag as runOcpCloudTag } from './ocpCloudTags';\nimport { runTag as runOcpTag } from './ocpTags';\nexport function runTag(tagPathsType, tagType, query) {\n    let tagReport;\n    switch (tagPathsType) {\n        case \"aws\" /* aws */:\n            tagReport = runAwsTag(tagType, query);\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            tagReport = runAwsOcpTag(tagType, query);\n            break;\n        case \"azure\" /* azure */:\n            tagReport = runAzureTag(tagType, query);\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            tagReport = runAzureOcpTag(tagType, query);\n            break;\n        case \"gcp\" /* gcp */:\n            tagReport = runGcpTag(tagType, query);\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            tagReport = runGcpOcpTag(tagType, query);\n            break;\n        case \"gcp\" /* ibm */:\n            tagReport = runIbmTag(tagType, query);\n            break;\n        case \"ocp\" /* ocp */:\n            tagReport = runOcpTag(tagType, query);\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            tagReport = runOcpCloudTag(tagType, query);\n            break;\n    }\n    return tagReport;\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchTagFailure, fetchTagRequest, fetchTagSuccess } from './tagActions';\nconst defaultState = {\n    byId: new Map(),\n    fetchStatus: new Map(),\n    errors: new Map(),\n};\nexport function tagReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchTagRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.tagId, 1 /* inProgress */) });\n        case getType(fetchTagSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.tagId, Object.assign(Object.assign({}, action.payload), { timeRequested: Date.now() })), errors: new Map(state.errors).set(action.meta.tagId, null) });\n        case getType(fetchTagFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.tagId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.tagId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getType } from 'typesafe-actions';\nimport { closeExportsDrawer, openExportsDrawer, resetState } from './uiActions';\nexport const defaultState = {\n    isExportsDrawerOpen: false,\n};\nexport const stateKey = 'ui';\nexport function uiReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(closeExportsDrawer):\n            return Object.assign(Object.assign({}, state), { isExportsDrawerOpen: false });\n        case getType(openExportsDrawer):\n            return Object.assign(Object.assign({}, state), { isExportsDrawerOpen: true });\n        default:\n            return state;\n    }\n}\n","import { stateKey } from './uiReducer';\nexport const selectUIState = (state) => state[stateKey];\nexport const selectIsExportsDrawerOpen = (state) => selectUIState(state).isExportsDrawerOpen;\n","import { createAction } from 'typesafe-actions';\nexport const closeExportsDrawer = createAction('ui/close_exports_drawer')();\nexport const openExportsDrawer = createAction('ui/open_exports_drawer')();\nexport const resetState = createAction('ui/reset_state')();\nexport function resetReportState() {\n    return dispatch => {\n        dispatch(resetState());\n    };\n}\n","export const stateKey = 'userAccess';\nexport const userAccessKey = 'user-access';\nexport const awsUserAccessQuery = {\n    type: 'AWS',\n};\nexport const azureUserAccessQuery = {\n    type: 'Azure',\n};\nexport const costModelUserAccessQuery = {\n    type: 'cost_model',\n};\nexport const ocpUserAccessQuery = {\n    type: 'OCP',\n};\nexport const gcpUserAccessQuery = {\n    type: 'GCP',\n};\nexport const ibmUserAccessQuery = {\n    type: 'IBM',\n    beta: true,\n};\n// Omitting the type param returns all user access\nexport const userAccessQuery = {};\nexport function getReportId(type, query) {\n    return `${type}--${query}`;\n}\n","import { fetchUserAccess as apiGetUserAccess } from 'api/userAccess';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './userAccessCommon';\nexport const fetchUserAccessRequest = createAction('userAccess/fetch/request')();\nexport const fetchUserAccessSuccess = createAction('userAccess/fetch/success')();\nexport const fetchUserAccessFailure = createAction('userAccess/fetch/failure')();\nexport function fetchUserAccess(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchUserAccessRequest(meta));\n        return apiGetUserAccess(query)\n            .then(res => {\n            dispatch(fetchUserAccessSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchUserAccessFailure(err, meta));\n        });\n    };\n}\n","import axios from 'axios';\n// If the user-access API is called without a query parameter, all types are returned in the response\nexport function fetchUserAccess(query) {\n    const insights = window.insights;\n    const queryString = query ? `?${query}` : '';\n    if (insights && insights.chrome && insights.chrome.auth && insights.chrome.auth.getUser) {\n        return insights.chrome.auth.getUser().then(() => {\n            return axios.get(`user-access/${queryString}`);\n        });\n    }\n    else {\n        return axios.get(`user-access/${queryString}`);\n    }\n}\n","import { resetState } from 'store/ui/uiActions';\nimport { getType } from 'typesafe-actions';\nimport { fetchUserAccessFailure, fetchUserAccessRequest, fetchUserAccessSuccess } from './userAccessActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function userAccessReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(resetState):\n            state = defaultState;\n            return state;\n        case getType(fetchUserAccessRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchUserAccessSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchUserAccessFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { getReportId, stateKey } from './userAccessCommon';\nexport const selectUserAccessState = (state) => state[stateKey];\n// Fetch userAccess\nexport const selectUserAccess = (state, providerType, query) => selectUserAccessState(state).byId.get(getReportId(providerType, query));\nexport const selectUserAccessFetchStatus = (state, providerType, query) => selectUserAccessState(state).fetchStatus.get(getReportId(providerType, query));\nexport const selectUserAccessError = (state, providerType, query) => selectUserAccessState(state).errors.get(getReportId(providerType, query));\n","// Show in-progress features in beta environment only\nexport const isBetaFeature = () => {\n    const insights = window.insights;\n    return insights && insights.chrome.isBeta() && !insights.chrome.isProd;\n};\n","export const deleteSessionCookie = name => {\n    // Delete only if cookie exists\n    if (getCookie(name)) {\n        const now = new Date();\n        now.setTime(now.getTime() - 3600);\n        document.cookie = `${name}=; expires=${now.toUTCString()}; path=/`;\n    }\n};\nexport const getCookie = name => {\n    const cookie = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n    return cookie ? cookie.pop() : '';\n};\n// Returns session token\nexport const getTokenCookie = () => {\n    return getCookie('cs_jwt');\n};\nexport const setSessionCookie = (name, value) => {\n    document.cookie = `${name}=${value}; path=/`;\n};\n","import { parseQuery } from 'api/queries/query';\nimport { getTokenCookie } from 'utils/cookie';\nconst accountCurrencyID = 'cost_management_account_currency';\nconst costTypeID = 'cost_management_cost_type';\nconst currencyID = 'cost_management_currency';\nconst inactiveSourcesID = 'cost_management_inactive_sources';\nconst sessionTokenID = 'cost_management_session';\n// Returns a subset of the token cookie\nexport const getPartialTokenCookie = () => {\n    const token = getTokenCookie();\n    return token.substring(token.length - 40, token.length);\n};\n/**\n * Session\n */\n// Deletes session token\nexport const deleteSessionToken = () => {\n    localStorage.removeItem(sessionTokenID);\n};\n// Returns session token\nexport const getSessionToken = () => {\n    return localStorage.getItem(sessionTokenID);\n};\n// Returns true if session is valid\nexport const isSessionValid = () => {\n    return getSessionToken() === getPartialTokenCookie();\n};\n// Save partial session token\nexport const saveSessionToken = () => {\n    localStorage.setItem(sessionTokenID, getPartialTokenCookie());\n};\n// Delete cost type\nexport const deleteCostType = () => {\n    localStorage.removeItem(costTypeID);\n};\n// Returns cost type\nexport const getCostType = () => {\n    const costType = localStorage.getItem(costTypeID);\n    return costType && costType !== null ? costType : \"unblended_cost\" /* unblended */;\n};\n// Invalidates cost type if current session is not valid\nexport const invalidateCostType = () => {\n    if (!isSessionValid()) {\n        deleteSessionToken();\n        deleteCostType();\n        restoreCostType(); // Restore from query param\n    }\n};\n// Returns true if cost type is available\nexport const isCostTypeAvailable = () => {\n    const costType = localStorage.getItem(costTypeID);\n    return costType && costType !== null;\n};\n// Restore cost type upon page refresh if query param is available\nexport const restoreCostType = () => {\n    const costType = localStorage.getItem(costTypeID);\n    const queryFromRoute = parseQuery(location.search);\n    if (queryFromRoute.cost_type && costType === null) {\n        setCostType(queryFromRoute.cost_type);\n    }\n};\n// Set cost type\nexport const setCostType = (value) => {\n    localStorage.setItem(costTypeID, value);\n    saveSessionToken();\n};\n/**\n * Currency\n */\n// Deletes account currency\nexport const deleteAccountCurrency = () => {\n    localStorage.removeItem(accountCurrencyID);\n};\n// Deletes currency\nexport const deleteCurrency = () => {\n    localStorage.removeItem(currencyID);\n};\n// Returns account currency\nexport const getAccountCurrency = () => {\n    const units = localStorage.getItem(accountCurrencyID);\n    return units ? units : 'USD';\n};\n// Returns currency\nexport const getCurrency = () => {\n    const units = localStorage.getItem(currencyID);\n    return units ? units : 'USD';\n};\n// Invalidates currency if current session is not valid\nexport const invalidateCurrency = () => {\n    if (!isSessionValid()) {\n        deleteAccountCurrency();\n        deleteSessionToken();\n        deleteCurrency();\n    }\n};\n// Returns true if currency is available\nexport const isCurrencyAvailable = () => {\n    const currency = localStorage.getItem(currencyID);\n    return currency && currency !== null;\n};\n// Set account currency\nexport const setAccountCurrency = (value) => {\n    localStorage.setItem(accountCurrencyID, value);\n    saveSessionToken();\n};\n// Set currency\nexport const setCurrency = (value) => {\n    localStorage.setItem(currencyID, value);\n    saveSessionToken();\n};\n/**\n * Inactive sources\n */\n// Deletes inactive sources\nexport const deleteInactiveSources = () => {\n    localStorage.removeItem(inactiveSourcesID);\n};\n// Returns inactive sources\nexport const getInactiveSources = () => {\n    return localStorage.getItem(inactiveSourcesID);\n};\n// Invalidates inactive sources if current session is not valid\nexport const invalidateInactiveSources = () => {\n    if (!isSessionValid()) {\n        deleteSessionToken();\n        deleteInactiveSources();\n    }\n};\n// Returns true if inactive sources is valid for the current session\nexport const isInactiveSourcesValid = () => {\n    return getInactiveSources() && isSessionValid();\n};\n// Set inactive sources\nexport const setInactiveSources = (value) => {\n    localStorage.setItem(inactiveSourcesID, value);\n    saveSessionToken();\n};\n","export const getBaseName = pathname => {\n    let release = '/';\n    const pathName = pathname.split('/');\n    pathName.shift();\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n    if (pathName[1]) {\n        return `${release}${pathName[0]}/${pathName[1]}`;\n    }\n    return `${release}${pathName[0]}`;\n};\nexport const getReleasePath = () => {\n    const pathName = window.location.pathname.split('/');\n    pathName.shift();\n    let release = '';\n    if (pathName[0] === 'beta') {\n        release = `/beta`;\n    }\n    return release;\n};\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers) => {\n    let result = false;\n    if (providers && providers.meta) {\n        // providers API returns empty data array for no sources\n        result = providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders);\n};\n"],"names":["initApi","version","authInterceptor","reqConfig","Object","assign","headers","fetchCostModels","query","addCostModel","request","updateCostModel","uuid","deleteCostModel","fetchProviders","insights","window","queryString","chrome","auth","getUser","then","getQuery","getQueryRoute","parseQuery","logicalAndPrefix","tagPrefix","breakdownDescKey","breakdownTitleKey","orgUnitIdKey","orgUnitNameKey","tagKey","stringify","filter_by","newQuery","JSON","parse","undefined","key","keys","filter","Array","isArray","push","convertFilterBy","encode","indices","parseKey","val","index","indexOf","substring","length","filterByKey","parseFilterByPrefix","group_by","groupByKey","parseGroupByPrefix","ignoreQueryPrefix","getUserAccessQuery","ReportTypePaths","runReport","reportType","path","ResourceTypePaths","isResourceTypeValid","resourcePathsType","resourceType","result","forecast","PageTitleBase","constructor","super","arguments","this","defaultState","state","getPath","location","props","_pathname","pathname","startsWith","currRoute","routes","getPageTitle","messages","render","children","intl","document","title","formatMessage","PageTitle","injectIntl","MaintenanceStateBase","Maintenance","description","Stack","StackItem","url","href","rel","target","MaintenanceState","Main","App","maintenanceMode","componentDidMount","history","init","identifyApp","appAction","appNav","on","event","_a","_b","includes","navId","domEvent","appPathname","replace","basename","componentDidUpdate","prevProps","scrollTo","componentWillUnmount","route","mapStateToProps","mapDispatchToProps","connect","asyncComponent","loader","LoadedComponent","Async","isLoading","Comp","default","setState","styles","content","paddingBottom","paddingTop","exportsIcon","marginLeft","marginRight","exportsLink","display","alignItems","pagination","backgroundColor","toolbarContainer","ExportsLinkBase","handleToggle","closeExportDrawer","isOpen","onClick","openExportDrawer","preventDefault","isActionLink","className","AlertActionLink","style","Button","variant","ExportsLink","locale","navigator","language","split","getLocale","cache","defaultLocale","onError","console","log","NotAuthorizedStateBase","msg","serviceName","NotAuthorizedState","PageHeader","PageHeaderTitle","PermissionsBase","getRoutePath","hasPermissions","userAccess","userAccessFetchStatus","aws","azure","costModel","gcp","ibm","ocp","userAccessError","userAccessQueryString","Permissions","PermissionsWrapper","permissionsComponent","AysncComponent","PermissionsComponent","AWS","defaultMessage","id","AWSComputeTitle","AWSCostTrendTitle","AWSDailyCostTrendTitle","AWSDashboardCostTitle","AWSDesc","AWSDetailsTableAriaLabel","AWSDetailsTitle","AWSOcpDashboardCostTitle","Azure","AzureComputeTitle","AzureCostTrendTitle","AzureDailyCostTrendTitle","AzureDashboardCostTitle","AzureDesc","AzureDetailsTableAriaLabel","AzureDetailsTitle","AzureOcpDashboardCostTitle","Back","BreakdownBackToDetails","BreakdownBackToDetailsAriaLabel","BreakdownBackToTitles","BreakdownCostBreakdownAriaLabel","BreakdownCostBreakdownTitle","BreakdownCostChartAriaDesc","BreakdownCostChartTooltip","BreakdownCostOverviewTitle","BreakdownHistoricalDataTitle","BreakdownSummaryTitle","BreakdownTitle","BreakdownTotalCostDate","CalculationType","Cancel","ChartCostForecastConeLegendLabel","ChartCostForecastConeLegendNoDataLabel","ChartCostForecastConeLegendTooltip","ChartCostForecastConeTooltip","ChartCostForecastLegendLabel","ChartCostForecastLegendNoDataLabel","ChartCostForecastLegendTooltip","ChartCostInfrastructureForecastConeLegendLabel","ChartCostInfrastructureForecastConeLegendNoDataLabel","ChartCostInfrastructureForecastConeLegendTooltip","ChartCostInfrastructureForecastLegendLabel","ChartCostInfrastructureForecastLegendNoDataLabel","ChartCostInfrastructureForecastLegendTooltip","ChartCostInfrastructureLegendLabel","ChartCostInfrastructureLegendNoDataLabel","ChartCostInfrastructureLegendTooltip","ChartCostLegendLabel","ChartCostLegendNoDataLabel","ChartCostLegendTooltip","ChartCostSupplementaryLegendLabel","ChartCostSupplementaryLegendNoDataLabel","ChartCostSupplementaryLegendTooltip","ChartDateRange","ChartDayOfTheMonth","ChartLimitLegendLabel","ChartLimitLegendNoDataLabel","ChartLimitLegendTooltip","ChartNoData","ChartOthers","ChartRequestsLegendLabel","ChartRequestsLegendNoDataLabel","ChartRequestsLegendTooltip","ChartUsageLegendLabel","ChartUsageLegendNoDataLabel","ChartUsageLegendTooltip","Close","Clusters","Cost","CostCalculations","CostManagement","CostModels","CostModelsAddTagValues","CostModelsAssignSources","CostModelsAssignSourcesErrorDescription","CostModelsAssignSourcesErrorTitle","CostModelsAssignSourcesParen","CostModelsAssignedSources","CostModelsAvailableSources","CostModelsCanDelete","CostModelsCanNotDelete","CostModelsDelete","CostModelsDeleteDesc","CostModelsDeleteSource","CostModelsDescTooLong","CostModelsDetailsAssignSourcesTitle","CostModelsDistributionDesc","CostModelsDistributionEdit","CostModelsEmptyState","CostModelsEmptyStateDesc","CostModelsEmptyStateLearnMore","CostModelsEnterTagKey","CostModelsEnterTagRate","CostModelsEnterTagValue","CostModelsExamplesDoubleMarkup","CostModelsExamplesNoAdjust","CostModelsExamplesReduceSeventyfive","CostModelsExamplesReduceZero","CostModelsFilterPlaceholder","CostModelsFilterTagKey","CostModelsInfoTooLong","CostModelsLastChange","CostModelsPopover","CostModelsPopoverAriaLabel","CostModelsRateTooLong","CostModelsReadOnly","CostModelsRefreshDialog","CostModelsRequiredField","CostModelsRouterErrorTitle","CostModelsRouterServerError","CostModelsSourceDelete","CostModelsSourceDeleteSource","CostModelsSourceDeleteSourceDesc","CostModelsSourceEmptyStateDesc","CostModelsSourceEmptyStateTitle","CostModelsSourceTableAriaLabel","CostModelsSourceTablePaginationAriaLabel","CostModelsSourceType","CostModelsTableAriaLabel","CostModelsTagRateTableAriaLabel","CostModelsTagRateTableDefault","CostModelsTagRateTableKey","CostModelsTagRateTableRate","CostModelsTagRateTableValue","CostModelsUUIDEmptyState","CostModelsUUIDEmptyStateDesc","CostModelsWizardCreateCostModel","CostModelsWizardCreatePriceList","CostModelsWizardEmptySourceTypeLabel","CostModelsWizardEmptyStateCreate","CostModelsWizardEmptyStateOtherTime","CostModelsWizardEmptyStateSkipStep","CostModelsWizardEmptyStateTitle","CostModelsWizardGeneralInfoTitle","CostModelsWizardNoRatesAdded","CostModelsWizardOnboardAWS","CostModelsWizardOnboardOCP","CostModelsWizardPriceListMetric","CostModelsWizardRateAriaLabel","CostModelsWizardReviewMarkDiscount","CostModelsWizardReviewStatusSubDetails","CostModelsWizardReviewStatusSubTitle","CostModelsWizardReviewStatusTitle","CostModelsWizardSourceCaption","CostModelsWizardSourceErrorDescription","CostModelsWizardSourceErrorTitle","CostModelsWizardSourceSubtitle","CostModelsWizardSourceTableAriaLabel","CostModelsWizardSourceTableCostModel","CostModelsWizardSourceTableDefaultCostModel","CostModelsWizardSourceTitle","CostModelsWizardSourceWarning","CostModelsWizardStepsGenInfo","CostModelsWizardStepsPriceList","CostModelsWizardStepsReview","CostModelsWizardStepsSources","CostModelsWizardSubTitleTable","CostModelsWizardWarningSources","CostTypeAmortized","CostTypeAmortizedDesc","CostTypeBlended","CostTypeBlendedDesc","CostTypeLabel","CostTypeUnblended","CostTypeUnblendedDesc","CpuTitle","Create","CreateCostModelConfirmMsg","CreateCostModelDesc","CreateCostModelExit","CreateCostModelExitYes","CreateCostModelNoContinue","CreateCostModelTitle","CreateRate","Currency","CurrencyAbbreviations","CurrencyOptions","CurrencyUnits","DashboardCumulativeCostComparison","DashboardDailyUsageComparison","DashboardDatabaseTitle","DashboardNetworkTitle","DashboardStorageTitle","DashboardTotalCostTooltip","Delete","Description","DetailsActionsExport","DetailsActionsPriceList","DetailsClustersModalTitle","DetailsColumnManagementTitle","DetailsCostValue","DetailsEmptyState","DetailsMoreClusters","DetailsResourceNames","DetailsSummaryModalTitle","DetailsUnusedRequestsLabel","DetailsUnusedUnits","DetailsUnusedUsageLabel","DetailsUsageCapacity","DetailsUsageLimit","DetailsUsageRequests","DetailsUsageUsage","DetailsViewAll","DiscountMinus","DistributionModelDesc","DistributionType","DocsAddOcpSources","DocsConfigCostModels","DocsCostModelTerminology","DocsUsingCostModels","Download","Edit","EditCostModel","EditMarkup","EditMarkupOrDiscount","EmptyFilterSourceStateSubtitle","EmptyFilterStateSubtitle","EmptyFilterStateTitle","EqualsSymbol","ErrorStateNotAuthorizedDesc","ErrorStateNotAuthorizedTitle","ErrorStateUnexpectedDesc","ErrorStateUnexpectedTitle","ExamplesTitle","ExpiresOn","ExplorerChartDate","ExplorerChartTitle","ExplorerDateRange","ExplorerMonthDate","ExplorerTableAriaLabel","ExplorerTitle","ExportAggregateType","ExportAll","ExportDesc","ExportError","ExportFileName","ExportFormatType","ExportFormatTypeTitle","ExportHeading","ExportName","ExportNotificationErrorDesc","ExportNotificationErrorTitle","ExportNotificationSuccessDesc","ExportNotificationSuccessTitle","ExportResolution","ExportSelected","ExportTimeScope","ExportTimeScopeTitle","ExportTitle","ExportsDesc","ExportsDownload","ExportsFailed","ExportsFailedDesc","ExportsTableAriaLabel","ExportsTitle","FilterByButtonAriaLabel","FilterByInputAriaLabel","FilterByOrgUnitAriaLabel","FilterByOrgUnitPlaceholder","FilterByPlaceholder","FilterByTagKeyAriaLabel","FilterByTagKeyPlaceholder","FilterByTagValueAriaLabel","FilterByTagValueButtonAriaLabel","FilterByTagValueInputPlaceholder","FilterByTagValuePlaceholder","FilterByValues","ForDate","GCP","GCPComputeTitle","GCPCostTitle","GCPCostTrendTitle","GCPDailyCostTrendTitle","GCPDesc","GCPDetailsTableAriaLabel","GCPDetailsTitle","GroupByAll","GroupByLabel","GroupByTop","GroupByValueNames","GroupByValues","GroupByValuesTitleCase","HistoricalChartCostLabel","HistoricalChartDayOfMonthLabel","HistoricalChartTitle","HistoricalChartUsageLabel","IBM","IBMComputeTitle","IBMCostTitle","IBMCostTrendTitle","IBMDailyCostTrendTitle","IBMDesc","IBMDetailsTableAriaLabel","IBMDetailsTitle","InactiveSourcesGoTo","InactiveSourcesTitle","InactiveSourcesTitleMultiplier","Infrastructure","LearnMore","LoadingStateDesc","LoadingStateTitle","MaintenanceEmptyStateDesc","MaintenanceEmptyStateInfo","MaintenanceEmptyStateThanks","ManageColumnsAriaLabel","ManageColumnsDesc","ManageColumnsTitle","MarkupDescription","MarkupOrDiscount","MarkupOrDiscountDesc","MarkupOrDiscountModalDesc","MarkupOrDiscountNumber","MarkupOrDiscountTooLong","MarkupPlus","MarkupTitle","Measurement","MeasurementPlaceholder","MeasurementValues","MemoryTitle","Metric","MetricPlaceholder","MetricValues","MonthOverMonthChange","Names","Next","No","NoDataForDate","NoDataStateDesc","NoDataStateRefresh","NoDataStateTitle","NoProvidersStateAwsDesc","NoProvidersStateAwsTitle","NoProvidersStateAzureDesc","NoProvidersStateAzureTitle","NoProvidersStateGcpDesc","NoProvidersStateGcpTitle","NoProvidersStateGetStarted","NoProvidersStateIbmDesc","NoProvidersStateIbmTitle","NoProvidersStateOcpAddSources","NoProvidersStateOcpDesc","NoProvidersStateOcpTitle","NoProvidersStateOverviewDesc","NoProvidersStateOverviewTitle","NoResultsFound","NotAuthorizedStateAws","NotAuthorizedStateAzure","NotAuthorizedStateCostModels","NotAuthorizedStateGcp","NotAuthorizedStateIbm","NotAuthorizedStateOcp","OCPCPUUsageAndRequests","OCPCloudDashboardComputeTitle","OCPCloudDashboardCostTitle","OCPCloudDashboardCostTrendTitle","OCPCloudDashboardDailyCostTrendTitle","OCPDailyUsageAndRequestComparison","OCPDashboardCPUUsageAndRequests","OCPDashboardCostTitle","OCPDashboardCostTrendTitle","OCPDashboardDailyCostTitle","OCPDashboardMemoryUsageAndRequests","OCPDashboardVolumeUsageAndRequests","OCPDetailsInfrastructureCost","OCPDetailsInfrastructureCostDesc","OCPDetailsSupplementaryCost","OCPDetailsSupplementaryCostDesc","OCPDetailsTableAriaLabel","OCPDetailsTitle","OCPInfrastructureCostTitle","OCPInfrastructureCostTrendTitle","OCPInfrastructureDailyCostTrendTitle","OCPMemoryUsageAndRequests","OCPSupplementaryCostTitle","OCPSupplementaryCostTrendTitle","OCPSupplementaryDailyCostTrendTitle","OCPUsageCostTitle","OCPUsageDashboardCPUTitle","OCPUsageDashboardCostTrendTitle","OCPVolumeUsageAndRequests","OpenShift","OpenShiftCloudInfrastructure","OpenShiftCloudInfrastructureDesc","OpenShiftDesc","OverviewInfoArialLabel","OverviewTitle","PageTitleAWS","PageTitleAzure","PageTitleCostModels","PageTitleDefault","PageTitleExplorer","PageTitleGCP","PageTitleIBM","PageTitleOCP","PageTitleOverview","Percent","PercentOfCost","PercentSymbol","PercentTotalCost","Perspective","PerspectiveValues","PriceList","PriceListAddRate","PriceListDeleteRate","PriceListDeleteRateDesc","PriceListDuplicate","PriceListEditRate","PriceListEmptyRate","PriceListEmptyRateDesc","PriceListNumberRate","PriceListPosNumberRate","Rate","RawCostDescription","RawCostTitle","RbacErrorDescription","RbacErrorTitle","RedHatStatusUrl","Requests","Save","Select","SelectAll","Selected","SinceDate","Sources","Status","StatusActions","Suggestions","Supplementary","TagHeadingKey","TagHeadingTitle","TagHeadingValue","TagNames","TimeOfExport","ToolBarBulkSelectAll","ToolBarBulkSelectAriaDeselect","ToolBarBulkSelectAriaSelect","ToolBarBulkSelectNone","ToolBarBulkSelectPage","ToolBarPriceListMeasurementPlaceHolder","ToolBarPriceListMetricPlaceHolder","UnitTooltips","Units","Usage","UsageCostDescription","UsageCostTitle","Various","Yes","LoadingState","subTitle","EmptyState","EmptyStateVariant","Spinner","size","Title","headingLevel","EmptyStateBody","parseApiError","error","response","data","Error","errors","map","er","source","detail","join","message","Unavailable","NotFound","AwsBreakdown","AwsDetails","AzureBreakdown","AzureDetails","Explorer","GcpBreakdown","GcpDetails","IbmBreakdown","IbmDetails","OcpDetails","OcpBreakdown","Overview","CostModelsDetails","CostModel","paths","awsDetails","awsDetailsBreakdown","azureDetails","azureDetailsBreakdown","costModels","explorer","gcpDetails","gcpDetailsBreakdown","ibmDetails","ibmDetailsBreakdown","ocpDetails","ocpDetailsBreakdown","overview","labelKey","component","exact","Routes","stateKey","fetchAccountSettingsRequest","createAction","fetchAccountSettingsSuccess","fetchAccountSettingsFailure","dispatch","meta","reportId","res","catch","err","byId","Map","fetchStatus","accountSettingsReducer","action","type","getType","set","payload","value","cost_type","initCurrency","currency","selectAccountSettingsState","selectAccountSettings","get","selectAccountSettingsFetchStatus","selectAccountSettingsError","awsCostOverviewStateKey","currrentId","getId","costWidget","reportPathsType","accountSummaryWidget","reportSummary","reportGroupBy","showWidgetOnGroupBy","regionSummaryWidget","serviceSummaryWidget","currentWidgets","widgets","awsCostOverviewReducer","selectAwsCostOverviewState","selectWidgets","selectWidget","selectCurrentWidgets","azureCostOverviewStateKey","azureCostOverviewReducer","selectAzureCostOverviewState","gcpCostOverviewStateKey","projectSummaryWidget","gcpCostOverviewReducer","selectGcpCostOverviewState","ibmCostOverviewStateKey","ibmCostOverviewReducer","selectIbmCostOverviewState","ocpCostOverviewStateKey","clusterWidget","cluster","cpuUsageWidget","usage","showCapacityOnGroupBy","memoryUsageWidget","usePlaceholder","ocpCostOverviewReducer","selectOcpCostOverviewState","awsHistoricalDataStateKey","computeUsageWidget","storageUsageWidget","awsHistoricalDataReducer","selectAwsHistoricalDataState","azureHistoricalDataStateKey","azureHistoricalDataReducer","selectAzureHistoricalDataState","gcpHistoricalDataStateKey","gcpHistoricalDataReducer","selectGcpHistoricalDataState","ibmHistoricalDataStateKey","ibmHistoricalDataReducer","selectIbmHistoricalDataState","ocpHistoricalDataStateKey","ocpHistoricalDataReducer","selectOcpHistoricalDataState","createMapStateToProps","updateFilterToolbar","selectCostModel","resetCostModel","setCostModelDialog","fetchCostModelsRequest","success","fetchCostModelsSuccess","failure","fetchCostModelsFailure","createAsyncAction","updateCostModelsRequest","updateCostModelsSuccess","updateCostModelsFailure","dialog","name","deleteCostModelsRequest","deleteCostModelsSuccess","deleteCostModelsFailure","redirectToCostModelFromSourceUuid","source_uuid","addNotification","dismissable","status","currentFilterType","currentFilterValue","isDialogOpen","deleteRate","deleteSource","addSource","addRate","updateRate","deleteMarkup","updateMarkup","deleteDistribution","updateDistribution","createWizard","dialogData","update","current","delete","reducer","costModelsState","cms","dialogs","stateName","costStatus","costError","costData","costQuery","every","updateProcessing","updateError","updateErr","selected","deleteProcessing","deleteError","awsDashboardStateKey","awsDashboardDefaultFilters","time_scope_units","time_scope_value","resolution","awsDashboardTabFilters","limit","getQueryForWidget","widget","savingsPlan","getQueryForWidgetTabs","currentTab","service","tabsFilter","account","region","instance_type","getGroupByForTab","newFilter","selectAwsDashboardState","selectWidgetQueries","previous","tabs","fetchWidgetForecasts","getState","forecastPathsType","forecastType","fetchWidgetReports","availableTabs","setWidgetTab","changeWidgetTab","tab","computeWidget","titleKey","details","costKey","showUnits","showUsageFirst","showUsageLegendLabel","usageKey","trend","computedReportItem","computedReportItemValue","chartType","costSummaryWidget","adjustContainerHeight","showHorizontal","viewAllPath","computedForecastItem","dailyTitleKey","databaseWidget","networkWidget","storageWidget","awsDashboardReducer","awsOcpDashboardStateKey","awsOcpDashboardDefaultFilters","awsOcpDashboardTabFilters","selectAwsOcpDashboardState","awsOcpDashboardReducer","azureDashboardStateKey","azureDashboardDefaultFilters","azureDashboardTabFilters","service_name","subscription_guid","resource_location","selectAzureDashboardState","virtualMachineWidget","azureDashboardReducer","azureOcpDashboardStateKey","azureOcpDashboardDefaultFilters","azureOcpDashboardTabFilters","selectAzureOcpDashboardState","azureOcpDashboardReducer","gcpDashboardStateKey","gcpDashboardDefaultFilters","gcpDashboardTabFilters","gcp_project","selectGcpDashboardState","gcpDashboardReducer","gcpOcpDashboardStateKey","gcpOcpDashboardDefaultFilters","gcpOcpDashboardTabFilters","selectGcpOcpDashboardState","gcpOcpDashboardReducer","ibmDashboardStateKey","ibmDashboardDefaultFilters","ibmDashboardTabFilters","project","selectIbmDashboardState","ibmDashboardReducer","ocpCloudDashboardStateKey","ocpCloudDashboardDefaultFilters","ocpCloudDashboardTabFilters","selectOcpCloudDashboardState","defaultFilter","ocpCloudDashboardReducer","ocpDashboardStateKey","ocpDashboardDefaultFilters","ocpDashboardTabFilters","node","selectOcpDashboardState","showTooltip","computedForecastInfrastructureItem","cpuWidget","requestKey","memoryWidget","volumeWidget","ocpDashboardReducer","selectPagination","stateProjector","getPagination","page","perPage","count","urlParams","links","next","URLSearchParams","Number","first","selectQuery","params","reduce","acc","curr","search","exportStateKey","getExportId","selectExportState","selectExport","selectExportFetchStatus","selectExportError","fetchExportRequest","fetchExportSuccess","fetchExportFailure","exportReport","report","Date","now","timeRequested","isExportExpired","Accept","link","clearNotifications","exportReducer","ForecastTypePaths","forecastStateKey","getForecastId","selectForecastState","selectForecast","selectForecastFetchStatus","selectForecastError","fetchForecastRequest","fetchForecastSuccess","fetchForecastFailure","fetchForecast","isForecastExpired","forecastId","forecastReducer","rates","fetchPriceListRequest","fetchPriceListSuccess","fetchPriceListFailure","rootReducer","accountSettings","awsOcpDashboard","awsCostOverview","awsDashboard","awsHistoricalData","azureOcpDashboard","azureCostOverview","azureDashboard","azureHistoricalData","gcpCostOverview","gcpDashboard","gcpOcpDashboard","gcpHistoricalData","ibmCostOverview","ibmDashboard","ibmHistoricalData","metrics","ocpCostOverview","ocpDashboard","ocpCloudDashboard","ocpHistoricalData","providerUuid","providers","rbac","ui","notifications","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","middlewares","notificationsMiddleware","configureStore","initialState","enhancer","store","Promise","reject","fetchMetricsRequest","fetchMetricsSuccess","fetchMetricsFailure","fetchMetrics","source_type","fetchRateMetrics","metricsState","metricsPayload","prev","label_metric","label_measurement","maxRate","costTypes","default_cost_type","OrgTypePaths","orgStateKey","getOrgId","orgPathsType","orgType","selectOrgState","selectOrg","selectOrgFetchStatus","selectOrgError","fetchOrgRequest","fetchOrgSuccess","fetchOrgFailure","fetchOrg","orgReport","isOrgExpired","orgId","orgReducer","addProviderKey","providersQuery","getReportId","fetchProvidersRequest","fetchProvidersSuccess","fetchProvidersFailure","providersReducer","selectProvidersState","selectAddProviderFetchStatus","selectAddProviderError","selectProviders","providerType","selectProvidersFetchStatus","selectProvidersError","fetchRbacRequest","fetchRbacSuccess","fetchRbacFailure","fetchRbac","async","_insights","getUserPermissions","user","permissions","isOrgAdmin","identity","is_org_admin","getRBAC","selectRbacState","isCostModelWritePermission","costModelPermissions","find","item","permission","app","resource","operation","reportStateKey","selectReportState","selectReport","selectReportFetchStatus","selectReportError","fetchReportRequest","fetchReportSuccess","fetchReportFailure","fetchReport","isReportExpired","reportReducer","resourceStateKey","getResourceId","selectResourceState","selectResource","selectResourceFetchStatus","selectResourceError","fetchResourceRequest","fetchResourceSuccess","fetchResourceFailure","fetchResource","isResourceExpired","resourceId","resourceReducer","fetchSourcesRequest","fetchSourcesSuccess","fetchSourcesFailure","fetchSources","sources","sourcesState","srcs","TagTypePaths","tagStateKey","getTagId","tagPathsType","tagType","selectTagState","selectTag","selectTagFetchStatus","selectTagError","fetchTagRequest","fetchTagSuccess","fetchTagFailure","fetchTag","tagReport","isTagExpired","tagId","tagReducer","isExportsDrawerOpen","uiReducer","selectUIState","selectIsExportsDrawerOpen","closeExportsDrawer","openExportsDrawer","resetState","userAccessQuery","fetchUserAccessRequest","fetchUserAccessSuccess","fetchUserAccessFailure","userAccessReducer","selectUserAccessState","selectUserAccess","selectUserAccessFetchStatus","selectUserAccessError","isBetaFeature","isBeta","isProd","accountCurrencyID","costTypeID","currencyID","inactiveSourcesID","sessionTokenID","getPartialTokenCookie","token","cookie","match","pop","getCookie","deleteSessionToken","localStorage","removeItem","isSessionValid","getItem","saveSessionToken","setItem","getCostType","costType","invalidateCostType","restoreCostType","isCostTypeAvailable","queryFromRoute","setCostType","getAccountCurrency","getCurrency","invalidateCurrency","isCurrencyAvailable","setAccountCurrency","setCurrency","deleteInactiveSources","invalidateInactiveSources","isInactiveSourcesValid","setInactiveSources","getBaseName","release","pathName","shift","getReleasePath","hasAccess","userAccessType","d","access","hasProviders","hasAwsAccess","isAwsAvailable","awsProviders","hasAzureAccess","isAzureAvailable","azureProviders","hasCostModelAccess","hasGcpAccess","isGcpAvailable","gcpProviders","hasIbmAccess","isIbmAvailable","ibmProviders","hasOcpAccess","isOcpAvailable","ocpProviders"],"sourceRoot":""}