{"version":3,"sources":["webpack://koku-ui/./src/api/queries/query.ts","webpack://koku-ui/./src/federatedEntry.tsx","webpack://koku-ui/./src/store/providers/providersActions.ts","webpack://koku-ui/./src/store/providers/providersReducer.ts","webpack://koku-ui/./src/store/userAccess/userAccessActions.ts","webpack://koku-ui/./src/store/userAccess/userAccessReducer.ts"],"names":["tagPrefix","breakdownDescKey","breakdownTitleKey","orgUnitIdKey","orgUnitNameKey","tagKey","getQueryRoute","query","stringify","encode","indices","getQuery","prefix","groupByOrPrefix","newQuery","filter_by","Object","assign","JSON","parse","key","keys","group_by","Array","isArray","push","convertFilterByToGroupBy","addGroupByPrefix","length","indexOf","q","addGroupByPrifix","parseQuery","index","filterByKey","substring","parseFilterByPrefix","groupByKey","parseGroupByPrefix","ignoreQueryPrefix","version","store","Provider","NotificationsPortal","basename","window","location","pathname","fetchProvidersRequest","createAction","fetchProvidersSuccess","fetchProvidersFailure","fetchProviders","reportType","dispatch","meta","reportId","then","res","data","catch","err","defaultState","byId","Map","errors","fetchStatus","providersReducer","state","action","type","getType","set","payload","fetchUserAccessRequest","fetchUserAccessSuccess","fetchUserAccessFailure","fetchUserAccess","userAccessReducer"],"mappings":"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","file":"1edc45e26d5e6a1143cb.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport const groupByOrPrefix = 'or:'; // logical OR prefix for group_by\nexport const groupByAndPrefix = 'and:'; // logical AND prefix for group_by\nexport const tagPrefix = 'tag:'; // Tag prefix for group_by\nexport const breakdownDescKey = 'breakdown_desc'; // Used to display a description in the breakdown header\nexport const breakdownGroupByKey = 'breakdown_group_by'; // Used to display a breadcrumb in the breakdown header\nexport const breakdownTitleKey = 'breakdown_title'; // Used to display a title in the breakdown header\nexport const orgUnitIdKey = 'org_unit_id'; // Org unit ID for group_by\nexport const orgUnitNameKey = 'org_unit_name'; // Org unit name for group_by\nexport const tagKey = 'tag'; // Tag key prefix for group_by\n// Adds group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function addGroupByPrifix(query, prefix = groupByOrPrefix) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        newQuery.group_by[`${prefix}${key}`] = query.group_by[key];\n    }\n    return newQuery;\n}\n// Converts filter_by props to group_by\nexport function convertFilterByToGroupBy(query) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        if (!newQuery.group_by) {\n            newQuery.group_by = {};\n        }\n        if (newQuery.group_by[key]) {\n            if (!Array.isArray(newQuery.group_by[key])) {\n                newQuery.group_by[key] = newQuery.group_by[key] !== '*' ? [newQuery.group_by[key]] : [];\n            }\n            newQuery.group_by[key].push(query.filter_by[key]);\n        }\n        else {\n            newQuery.group_by[key] = query.filter_by[key];\n        }\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix\nexport function getQueryRoute(query) {\n    return stringify(query, { encode: false, indices: false });\n}\n// Returns query and adds group_by prefix\nexport function getQuery(query, prefix = groupByOrPrefix) {\n    const newQuery = convertFilterByToGroupBy(query);\n    let addGroupByPrefix = false;\n    // Workaround for https://github.com/project-koku/koku/issues/1596\n    if (newQuery && newQuery.group_by) {\n        const keys = Object.keys(newQuery.group_by);\n        if (keys && keys.length > 1) {\n            addGroupByPrefix = true;\n        }\n        else {\n            // Find a tag (#1596) or group_by with multiple keys\n            for (const key of keys) {\n                if ((Array.isArray(newQuery.group_by[key]) && newQuery.group_by[key].length > 1) ||\n                    key.indexOf(tagPrefix) !== -1) {\n                    addGroupByPrefix = true;\n                }\n            }\n        }\n    }\n    // Skip adding group_by prefix for a single group_by\n    const q = addGroupByPrefix ? addGroupByPrifix(newQuery, prefix) : newQuery;\n    return stringify(q, { encode: false, indices: false });\n}\n// Returns query without filter_by prefix\nexport function parseFilterByPrefix(query, prefix = groupByOrPrefix) {\n    if (!(query && query.filter_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: {} });\n    for (const key of Object.keys(query.filter_by)) {\n        const index = key.indexOf(prefix);\n        const filterByKey = index !== -1 ? key.substring(index + prefix.length) : key;\n        newQuery.filter_by[filterByKey] = query.filter_by[key];\n    }\n    return newQuery;\n}\n// Returns query without group_by prefix -- https://github.com/project-koku/koku-ui/issues/704\nexport function parseGroupByPrefix(query, prefix = groupByOrPrefix) {\n    if (!(query && query.group_by)) {\n        return query;\n    }\n    const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { group_by: {} });\n    for (const key of Object.keys(query.group_by)) {\n        const index = key.indexOf(prefix);\n        const groupByKey = index !== -1 ? key.substring(index + prefix.length) : key;\n        newQuery.group_by[groupByKey] = query.group_by[key];\n    }\n    return newQuery;\n}\nexport function parseQuery(query) {\n    const newQuery = parse(query, { ignoreQueryPrefix: true });\n    return parseFilterByPrefix(parseGroupByPrefix(newQuery));\n}\n","import { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications';\nimport { initApi } from 'api/api';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { getBaseName } from 'utils/getBaseName';\nimport App from './app';\nimport { configureStore } from './store';\nrequire.resolve('@patternfly/patternfly/patternfly-addons.css');\nimport './styles/global.css';\ninitApi({\n    version: 'v1',\n});\nconst store = configureStore({\n// session: {\n//   token: getToken(),\n// },\n});\nexport default () => (React.createElement(Provider, { store: store },\n    React.createElement(NotificationsPortal, null),\n    React.createElement(Router, { basename: getBaseName(window.location.pathname) },\n        React.createElement(App, null))));\n","import { fetchProviders as apiGetProviders } from 'api/providers';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './providersCommon';\nexport const fetchProvidersRequest = createAction('providers/fetch/request')();\nexport const fetchProvidersSuccess = createAction('providers/fetch/success')();\nexport const fetchProvidersFailure = createAction('providers/fetch/failure')();\nexport function fetchProviders(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchProvidersRequest(meta));\n        return apiGetProviders(query)\n            .then(res => {\n            dispatch(fetchProvidersSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchProvidersFailure(err, meta));\n        });\n    };\n}\nexport const clearProviderFailure = createAction('providers/clear/failure');\n","import { getType } from 'typesafe-actions';\nimport { fetchProvidersFailure, fetchProvidersRequest, fetchProvidersSuccess } from './providersActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function providersReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchProvidersRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchProvidersSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchProvidersFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n","import { fetchUserAccess as apiGetUserAccess } from 'api/userAccess';\nimport { createAction } from 'typesafe-actions';\nimport { getReportId } from './userAccessCommon';\nexport const fetchUserAccessRequest = createAction('userAccess/fetch/request')();\nexport const fetchUserAccessSuccess = createAction('userAccess/fetch/success')();\nexport const fetchUserAccessFailure = createAction('userAccess/fetch/failure')();\nexport function fetchUserAccess(reportType, query) {\n    return dispatch => {\n        const meta = {\n            reportId: getReportId(reportType, query),\n        };\n        dispatch(fetchUserAccessRequest(meta));\n        return apiGetUserAccess(query)\n            .then(res => {\n            dispatch(fetchUserAccessSuccess(res.data, meta));\n        })\n            .catch(err => {\n            dispatch(fetchUserAccessFailure(err, meta));\n        });\n    };\n}\nexport const clearuserAccessFailure = createAction('userAccess/clear/failure');\n","import { getType } from 'typesafe-actions';\nimport { fetchUserAccessFailure, fetchUserAccessRequest, fetchUserAccessSuccess } from './userAccessActions';\nexport const defaultState = {\n    byId: new Map(),\n    errors: new Map(),\n    fetchStatus: new Map(),\n};\nexport function userAccessReducer(state = defaultState, action) {\n    switch (action.type) {\n        case getType(fetchUserAccessRequest):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.payload.reportId, 1 /* inProgress */) });\n        case getType(fetchUserAccessSuccess):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), byId: new Map(state.byId).set(action.meta.reportId, Object.assign({}, action.payload)), errors: new Map(state.errors).set(action.meta.reportId, null) });\n        case getType(fetchUserAccessFailure):\n            return Object.assign(Object.assign({}, state), { fetchStatus: new Map(state.fetchStatus).set(action.meta.reportId, 2 /* complete */), errors: new Map(state.errors).set(action.meta.reportId, action.payload) });\n        default:\n            return state;\n    }\n}\n"],"sourceRoot":""}