{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/utils/sort.ts","webpack:///./src/testIds.ts","webpack:///./src/components/commonChart/chartUtils.ts","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/components/tabs/tabContent.tsx","webpack:///./src/components/tabs/tabItem.styles.ts","webpack:///./src/components/tabs/tabItem.tsx","webpack:///./src/components/tabs/tabNavigation.styles.ts","webpack:///./src/components/tabs/tabNavigation.tsx","webpack:///./src/components/tabs/tabs.tsx","webpack:///./src/components/link/link.tsx","webpack:///./src/components/trendChart/trendChart.styles.ts","webpack:///./src/components/trendChart/trendChart.tsx","webpack:///./src/pages/overview/emptyState.styles.ts","webpack:///./src/pages/overview/emptyState.tsx","webpack:///./src/pages/overview/overview.tsx","webpack:///./src/components/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/pages/awsDashboard/awsDashboardWidget.tsx","webpack:///./src/pages/awsDashboard/awsDashboard.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummary.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummary.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryDetails.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummaryDetails.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItem.styles.ts","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItem.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryItems.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryTrend.tsx","webpack:///./src/components/usageChart/usageChart.styles.ts","webpack:///./src/components/usageChart/usageChart.tsx","webpack:///./src/components/ocpReportSummary/ocpReportSummaryUsage.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboardWidget.tsx","webpack:///./src/pages/ocpDashboard/ocpDashboard.tsx","webpack:///./src/pages/ocpDashboard/index.ts","webpack:///./src/pages/awsDashboard/index.ts","webpack:///./src/pages/overview/index.ts"],"names":["unitLookupKey","unit","split","toLowerCase","formatValue","value","options","lookup","fValue","formatCurrency","formatStorage","unknownTypeFormatter","_unit","fractionDigits","toFixed","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","getValueForItem","item","key","sort","array","direction","a","b","aVal","bVal","__webpack_require__","d","__webpack_exports__","getTestProps","id","data-testid","testIds","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","providers","add_btn","bucket_input","empty_state_add_btn","name_input","resource_name_input","cluster_id_input","type_input","sidebar","nav","link","backdrop","transformAwsReport","report","type","items","idKey","sortKey","sortDirection","computedItems","Object","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_5__","map","i","createDatum","total","reduce","acc","prevValue","length","y","transformOcpReport","reportItem","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_6__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","label","Number","parseFloat","isInt","name","units","getDateRangeString","datums","firstOfMonth","start","end","today","Date","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_2___default","getDatumDateRange","setDate","monthName","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","startDate","endDate","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_4__","i18next__WEBPACK_IMPORTED_MODULE_3__","t","getTooltipLabel","datum","formatOptions","toString","groups","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","visitDataPoint","dataPoint","values","forEach","capacity","charge","limit","request","usage","assign","deltaPercent","delta_percent","deltaValue","delta_value","group","data","getIdKeyForGroupBy","groupBy","project","cluster","node","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account_alias","account","instance_type","region","service","TabContent","content","react_default","createElement","role","styles","StyleSheet","create","tabItem","position","flexGrow","textAlign","fontSize","esm","padding","cursor","marginBottom","marginTop","tabItemShrink","flexShrink","marginRight","selected","backgroundImage","tabItem_TabItem","Component","[object Object]","super","arguments","this","handleClick","onSelect","props","isSelected","isShrink","onClick","aria-selected","tabIndex","className","tabNavigation_styles_styles","tabNavigation","display","alignItems","tabNavigation_TabNavigation","handleKeyDown","event","includes","tabs","onChange","modifier","newIndex","findIndex","onKeyDown","tab","Tabs","selectedTab","find","CastedButton","Button","link_Link","component","Link","variant","chartStyles","colorScale","previousMonth","fill","stroke","currentMonth","reportSummaryTrend",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","state","width","formatDatumValue","formatDatumOptions","chartUtils","handleResize","setState","current","clientWidth","nextProps","currentData","previousData","setTimeout","window","addEventListener","removeEventListener","title","height","legendData","push","container","ChartVoronoiContainer","labels","ref","ChartGroup","containerComponent","Boolean","ChartArea","ChartLegend","theme","ChartTheme","dark","blue","card","justifyContent","cardBody","primaryAction","subtitle","color","var","EmptyState","subTitle","Card","Grid","gutter","GridItem","md","lg","dollar_sign_icon","size","Title","mapStateToProps","common","availableTabs","store_providers","selectProviders","results","showAWSTab","showOCPTab","result","providersFetchStatus","selectProvidersFetchStatus","Overview","es","react_redux_es","openProvidersModal","ui","currentTab","getTabTitle","renderTab","tabData","awsDashboard","ocpDashboard","handleTabChange","tabId","addSourceBtn","secondary","count","reportSummary","AwsReportSummary","detailsLink","children","status","CardHeader","CardBody","CardFooter","awsReportSummaryDetails_styles_styles","reportSummaryDetails","text","paddingBottom","lineHeight","AwsReportSummaryDetails","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItem","totalValue","percentVal","percentLabel","Progress","sm","defaultProps","v","awsReportSummaryItems_AwsReportSummaryItems","otherIndex","slice","getItems","AwsReportSummaryTrend","trendChart","getIdKeyForTab","widgetId","widget","selectWidget","queries","selectWidgetQueries","currentQuery","previousQuery","previous","tabsQuery","awsReports","selectReport","reportType","selectReportFetchStatus","mapDispatchToProps","fetchReports","fetchWidgetReports","updateTab","changeWidgetTab","AwsDashboardWidget","getDetailsLinkTitle","buildDetailsLink","awsQuery","group_by","order_by","topItems","utils_formatValue","titleKey","trend","details","month","get_month_default","format_default","start_of_month_default","get_date_default","detailLabel","context","labelKeyContext","components_link","to","trendTitle","components_tabs","awsDashboard_mapStateToProps","widgets","selectCurrentWidgets","AwsDashboard","xl","OcpReportSummary","ocpReportSummaryDetails_styles_styles","marginLeft","OcpReportSummaryDetails","requestLabel","requestValue","ocpReportSummaryItem_styles_styles","OcpReportSummaryItem","ocpReportSummaryItems_OcpReportSummaryItems","OcpReportSummaryTrend","currentColorScale","currentRequestData","currentUsageData","previousColorScale","previousRequestData","previousUsageData","usageChart_styles_styles","usageChart_UsageChart","currentRequestLabel","currentUsageLabel","previousRequestLabel","previousUsageLabel","firstRowLegendData","secondRowLegendData","strokeDasharray","OcpReportSummaryUsage","ocpReports","OcpDashboardWidget","ocpQuery","requestLabelKey","undefined","currentRequestLabelKey","date","currentUsageLabelKey","previousRequestLabelKey","ocpDashboard_mapStateToProps","OcpDashboard","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpDashboard__WEBPACK_IMPORTED_MODULE_1__","_awsDashboard__WEBPACK_IMPORTED_MODULE_1__","_overview__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"538b952ca535d0b9a9b7.bundle.js","sourcesContent":["export const unitLookupKey = unit => unit ? unit.split('-')[0].toLowerCase() : '';\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n            return formatStorage(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\nexport const formatCurrency = (value, _unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatStorage = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import format from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i.total, i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d.total, d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'charge') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = true) {\n    const [start, end] = getDatumDateRange(datums);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    const monthName = format(start, 'MMM');\n    const startDate = getDate(start);\n    const endDate = getDate(end);\n    return `${monthName} ${getDate(start)}${startDate !== endDate ? ` - ${endDate}` : ''}`;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'hrs':\n            case 'gb':\n                return i18next.t(`units.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date') {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'MMM D YYYY');\n        return `${date}: ${formatValue(datum.y, datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","import { sort } from './sort';\nconst groups = ['clusters', 'nodes', 'projects'];\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'charge', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity;\n                const charge = value.charge;\n                const id = value[idKey];\n                const label = value[labelKey];\n                const limit = value.limit;\n                const request = value.request;\n                const usage = value.usage;\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        capacity,\n                        charge,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        label,\n                        limit,\n                        request,\n                        units: value.units || usage ? 'GB' : 'USD',\n                        usage,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { capacity: itemMap[id].capacity + capacity, charge: itemMap[id].charge + charge, limit: itemMap[id].limit + limit, request: itemMap[id].request + request, usage: itemMap[id].usage + usage });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    report.data.forEach(visitDataPoint);\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nconst groups = ['services', 'accounts', 'instance_types', 'regions'];\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'total', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = {};\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const total = value.total;\n                const id = value[idKey];\n                let label = value[labelKey];\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap[id]) {\n                    itemMap[id] = {\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        id,\n                        total,\n                        label,\n                        units: value.units,\n                    };\n                    return;\n                }\n                itemMap[id] = Object.assign({}, itemMap[id], { total: itemMap[id].total + total });\n            });\n        }\n        groups.forEach(group => {\n            if (dataPoint[group]) {\n                return dataPoint[group].forEach(visitDataPoint);\n            }\n        });\n    };\n    report.data.forEach(visitDataPoint);\n    return Object.values(itemMap);\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import React from 'react';\nexport const TabContent = ({ data }) => {\n    const content = typeof data.content === 'function' ? data.content(data) : data.content;\n    return React.createElement(\"div\", { role: \"tabpanel\" }, content);\n};\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_md, global_primary_color_100, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabItem: {\n        position: 'relative',\n        flexGrow: 1,\n        textAlign: 'center',\n        fontSize: global_FontSize_md.value,\n        padding: global_spacer_sm.value,\n        cursor: 'pointer',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    tabItemShrink: {\n        flexGrow: '0',\n        flexShrink: '2',\n        marginRight: '20px',\n    },\n    selected: {\n        backgroundImage: `linear-gradient(to top, ${global_primary_color_100.value} 2px, transparent 2px)`,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './tabItem.styles';\nclass TabItem extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleClick = () => {\n            const { onSelect, data } = this.props;\n            onSelect(data.id);\n        };\n    }\n    render() {\n        const { data, isSelected, isShrink } = this.props;\n        return (React.createElement(\"div\", { role: \"tab\", onClick: this.handleClick, \"aria-selected\": isSelected, tabIndex: isSelected ? 0 : -1, className: css(styles.tabItem, isSelected && styles.selected, isShrink && styles.tabItemShrink) }, data.label));\n    }\n}\nexport { TabItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '../../../node_modules/@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tabNavigation: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginBottom: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { TabItem } from './tabItem';\nimport { styles } from './tabNavigation.styles';\nclass TabNavigation extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleKeyDown = (event) => {\n            if (!['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n                return;\n            }\n            const { selected, tabs, onChange } = this.props;\n            const modifier = event.key === 'ArrowRight' ? 1 : -1;\n            const selectedIndex = tabs.findIndex(t => t.id === selected.id);\n            const newIndex = selectedIndex + modifier;\n            if (newIndex < 0 || newIndex > tabs.length - 1) {\n                return;\n            }\n            onChange(tabs[newIndex].id);\n        };\n    }\n    render() {\n        const { isShrink, tabs, selected, onChange } = this.props;\n        return (React.createElement(\"div\", { role: \"tablist\", className: css(styles.tabNavigation), onKeyDown: this.handleKeyDown }, tabs.map(tab => (React.createElement(TabItem, { isShrink: isShrink, onSelect: onChange, key: tab.id, data: tab, isSelected: tab.id === selected.id })))));\n    }\n}\nexport { TabNavigation };\n","import React from 'react';\nimport { TabContent } from './tabContent';\nimport { TabNavigation } from './tabNavigation';\nconst Tabs = ({ isShrink, selected, tabs, onChange }) => {\n    const selectedTab = tabs.find(tab => tab.id === selected);\n    return (React.createElement(\"div\", null,\n        React.createElement(TabNavigation, { isShrink: isShrink, tabs: tabs, selected: selectedTab, onChange: onChange }),\n        React.createElement(TabContent, { data: selectedTab })));\n};\nexport { Tabs };\n","import { Button } from '@patternfly/react-core';\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nconst CastedButton = Button;\nconst Link = props => (React.createElement(CastedButton, Object.assign({ component: RouterLink, variant: \"link\" }, props)));\nexport { Link };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_primary_color_100, global_primary_color_200, global_success_color_100, global_success_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    colorScale: [global_success_color_100.value, global_primary_color_100.value],\n    previousMonth: {\n        data: {\n            fill: global_success_color_200.value,\n            stroke: global_success_color_100.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: global_primary_color_100.value,\n            stroke: global_primary_color_200.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { ChartArea, ChartGroup, ChartLegend, ChartTheme, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { getDateRangeString, getTooltipContent, getTooltipLabel, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.currentData || !nextProps.previousData) {\n            return false;\n        }\n        return true;\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n            window.addEventListener('resize', this.handleResize);\n        });\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { title, currentData, previousData, height } = this.props;\n        const legendData = [];\n        if (previousData && previousData.length) {\n            legendData.push({\n                name: getDateRangeString(previousData),\n            });\n        }\n        if (currentData && currentData.length) {\n            legendData.push({\n                name: getDateRangeString(currentData),\n            });\n        }\n        const container = React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel });\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryTrend), ref: this.containerRef },\n            React.createElement(\"div\", null,\n                React.createElement(ChartGroup, { containerComponent: container, height: height, width: this.state.width },\n                    Boolean(previousData && previousData.length) && (React.createElement(ChartArea, { style: chartStyles.previousMonth, data: previousData })),\n                    Boolean(currentData && currentData.length) && (React.createElement(ChartArea, { style: chartStyles.currentMonth, data: currentData })))),\n            React.createElement(ChartLegend, { title: title, theme: ChartTheme.dark.blue, colorScale: chartStyles.colorScale, data: legendData, height: 50, width: this.state.width })));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200 } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    card: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '75vh',\n        marginTop: '30px',\n    },\n    cardBody: {\n        textAlign: 'center',\n    },\n    primaryAction: {\n        marginTop: '60px',\n    },\n    subtitle: {\n        color: global_Color_200.var,\n        marginTop: '30px',\n    },\n    title: {\n        marginTop: '30px',\n    },\n});\n","import { Card, Grid, GridItem, Title } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyState.styles';\nconst EmptyState = ({ primaryAction, subTitle, title, }) => (React.createElement(\"div\", null,\n    React.createElement(Card, { className: css(styles.card) },\n        React.createElement(\"div\", { className: css(styles.cardBody) },\n            React.createElement(Grid, { gutter: \"lg\" },\n                React.createElement(GridItem, { md: 1, lg: 2 }),\n                React.createElement(GridItem, { md: 10, lg: 8 },\n                    React.createElement(DollarSignIcon, { size: \"xl\" }),\n                    React.createElement(Title, { className: css(styles.title), size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n                    Boolean(primaryAction) && (React.createElement(\"div\", { className: css(styles.primaryAction) }, primaryAction))),\n                React.createElement(GridItem, { md: 1, lg: 2 }))))));\nexport { EmptyState };\n","import { Button, ButtonType, ButtonVariant, Grid, GridItem, Title, TitleSize, } from '@patternfly/react-core';\nimport { Tabs } from 'components/tabs';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { providersSelectors } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { getTestProps, testIds } from 'testIds';\nimport AwsDashboard from '../awsDashboard';\nimport OcpDashboard from '../ocpDashboard';\nimport { EmptyState } from './emptyState';\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            currentTab: \"aws\" /* aws */,\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            if (tab === \"aws\" /* aws */) {\n                return t('overview.aws');\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return t('overview.ocp');\n            }\n        };\n        this.renderTab = (tabData) => {\n            const currentTab = tabData.id;\n            if (currentTab === \"aws\" /* aws */) {\n                return React.createElement(AwsDashboard, null);\n            }\n            else {\n                return React.createElement(OcpDashboard, null);\n            }\n        };\n        this.handleTabChange = (tabId) => {\n            this.setState({ currentTab: tabId });\n        };\n    }\n    render() {\n        const { availableTabs, openProvidersModal, providers, providersFetchStatus, t, } = this.props;\n        const { currentTab } = this.state;\n        const addSourceBtn = (React.createElement(Button, Object.assign({}, getTestProps(testIds.providers.add_btn), { onClick: openProvidersModal, type: ButtonType.submit, variant: ButtonVariant.secondary }), t('providers.add_source')));\n        return (React.createElement(\"div\", { className: \"pf-m-dark-100 pf-l-page__main-section pf-u-pb-xl pf-u-px-xl\" },\n            React.createElement(\"header\", { className: \"pf-u-display-flex pf-u-justify-content-space-between pf-u-align-items-center\" },\n                React.createElement(Title, { size: TitleSize.lg }, t('overview.title')),\n                addSourceBtn),\n            React.createElement(\"div\", null, Boolean(providers &&\n                providers.count > 0 &&\n                providersFetchStatus === 2 /* complete */) ? (React.createElement(Tabs, { isShrink: Boolean(true), tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })) : (React.createElement(Grid, { gutter: \"lg\" },\n                React.createElement(GridItem, null,\n                    React.createElement(EmptyState, { primaryAction: addSourceBtn, title: t('overview.empty_state_title'), subTitle: t('overview.empty_state_desc') })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const availableTabs = [];\n    const providers = providersSelectors.selectProviders(state);\n    if (providers && providers.results) {\n        let showAWSTab = false;\n        let showOCPTab = false;\n        for (const result of providers.results) {\n            if (result.type === 'AWS') {\n                showAWSTab = true;\n            }\n            else if (result.type === 'OCP') {\n                showOCPTab = true;\n            }\n        }\n        if (showAWSTab) {\n            availableTabs.push(\"aws\" /* aws */);\n        }\n        if (showOCPTab) {\n            availableTabs.push(\"ocp\" /* ocp */);\n        }\n    }\n    return {\n        availableTabs,\n        providers,\n        providersFetchStatus: providersSelectors.selectProvidersFetchStatus(state),\n    };\n});\nconst Overview = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(OverviewBase));\nexport default Overview;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetails = ({ label, formatValue, formatOptions, report, }) => {\n    let value = '----';\n    if (report) {\n        value = report.total\n            ? formatValue(report.total.value, report.total.units, formatOptions)\n            : 0;\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) }, value),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, label))));\n};\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = `${formatValue(value, units, formatOptions)} (${percentVal}%)`;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { AwsReportSummaryItem };\n","import React from 'react';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nclass AwsReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { AwsReportSummaryItems, };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { AwsReportSummaryTrend };\n","import { getQuery, parseQuery } from 'api/awsQuery';\nimport { AwsReportSummary, AwsReportSummaryDetails, AwsReportSummaryItem, AwsReportSummaryItems, AwsReportSummaryTrend, } from 'components/awsReportSummary';\nimport { transformAwsReport } from 'components/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardActions, awsDashboardSelectors, } from 'store/awsDashboard';\nimport { awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nclass AwsDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/aws?${getQuery({\n                group_by: groupBy,\n                order_by: { total: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(AwsReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(AwsReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label.toString(), totalValue: tabs.total.value, units: tabItem.units, value: tabItem.total })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('aws_dashboard.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey, {\n            context: details.labelKeyContext,\n        });\n        const detailsLink = reportType === \"cost\" /* cost */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const trendTitle = t(trend.titleKey);\n        const currentData = transformAwsReport(current, trend.type);\n        const previousData = transformAwsReport(previous, trend.type);\n        return (React.createElement(AwsReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(AwsReportSummaryDetails, { report: current, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions }),\n            React.createElement(AwsReportSummaryTrend, { title: trendTitle, currentData: currentData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousData: previousData }),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: awsReportsSelectors.selectReport(state, widget.reportType, queries.current), previous: awsReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: awsReportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: awsReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDashboardWidgetBase));\nexport { AwsDashboardWidget, AwsDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { uiActions } from 'store/ui';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\nconst AwsDashboardBase = ({ t, openProvidersModal, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(AwsDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(AwsDashboardBase));\nexport default AwsDashboard;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpReportSummary.styles';\nconst OcpReportSummaryBase = ({ title, subTitle, detailsLink, children, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? `${t('loading')}...` : children),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpReportSummary = translate()(OcpReportSummaryBase);\nexport { OcpReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: global_spacer_md.value,\n    },\n    value: {\n        display: 'flex',\n        color: global_Color_100.var,\n        fontSize: global_FontSize_4xl.value,\n        marginRight: global_spacer_sm.value,\n    },\n    text: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        marginLeft: global_spacer_sm.value,\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryDetails.styles';\nconst OcpReportSummaryDetails = ({ label, formatValue, formatOptions, report, reportType = \"charge\" /* charge */, requestLabel, }) => {\n    let value = '----';\n    let requestValue = '----';\n    if (report && report.total) {\n        if (reportType === \"charge\" /* charge */) {\n            const units = report.total.units ? report.total.units : 'USD';\n            value = formatValue(report.total.charge, units, formatOptions);\n        }\n        else {\n            const units = report.total.units ? report.total.units : 'GB';\n            value = formatValue(report.total.usage, units, formatOptions);\n            requestValue = formatValue(report.total.request, units, formatOptions);\n        }\n    }\n    return (React.createElement(\"div\", { className: css(styles.reportSummaryDetails) },\n        React.createElement(\"div\", { className: css(styles.value) },\n            value,\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, label))),\n        Boolean(reportType !== \"charge\" /* charge */) && (React.createElement(\"div\", { className: css(styles.value) },\n            requestValue,\n            React.createElement(\"div\", { className: css(styles.text) }, requestLabel)))));\n};\nexport { OcpReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './ocpReportSummaryItem.styles';\nconst OcpReportSummaryItem = ({ label, value, totalValue, formatValue, units, formatOptions, }) => {\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = `${formatValue(value, units, formatOptions)} (${percentVal}%)`;\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpReportSummaryItem.defaultProps = {\n    formatValue: v => v,\n};\nexport { OcpReportSummaryItem };\n","import React from 'react';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nclass OcpReportSummaryItems extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => i.id === 'Other');\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { report, children } = this.props;\n        if (!report) {\n            return null;\n        }\n        const items = this.getItems();\n        return React.createElement(\"ul\", null, children({ items }));\n    }\n}\nexport { OcpReportSummaryItems, };\n","import React from 'react';\nimport { TrendChart } from '../trendChart';\nconst OcpReportSummaryTrend = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(TrendChart, Object.assign({ height: 75 }, props))));\nexport { OcpReportSummaryTrend };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_primary_color_100, global_success_color_100, global_warning_color_100, global_warning_color_200, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentColorScale: [\n        global_success_color_100.value,\n        global_primary_color_100.value,\n    ],\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_warning_color_100.value,\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_primary_color_100.value,\n        },\n    },\n    previousColorScale: [\n        global_warning_color_200.value,\n        global_warning_color_100.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_warning_color_200.value,\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_success_color_100.value,\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    reportSummaryTrend: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { ChartArea, ChartGroup, ChartLegend, ChartTheme, ChartVoronoiContainer, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { getTooltipContent, getTooltipLabel, } from 'components/commonChart/chartUtils';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.getTooltipLabel = (datum) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        this.handleResize = () => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n        };\n    }\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.currentUsageData ||\n            !nextProps.previousUsageData ||\n            !nextProps.currentRequestData ||\n            !nextProps.previousRequestData) {\n            return false;\n        }\n        return true;\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({ width: this.containerRef.current.clientWidth });\n            window.addEventListener('resize', this.handleResize);\n        });\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    render() {\n        const { currentRequestData, currentRequestLabel, currentUsageData, currentUsageLabel, height, previousRequestData, previousRequestLabel, previousUsageData, previousUsageLabel, title, } = this.props;\n        const firstRowLegendData = [];\n        const secondRowLegendData = [];\n        if (previousUsageData && previousUsageData.length) {\n            firstRowLegendData.push({ name: previousUsageLabel });\n        }\n        if (previousRequestData && previousRequestData.length) {\n            secondRowLegendData.push({ name: previousRequestLabel });\n        }\n        if (currentUsageData && currentUsageData.length) {\n            firstRowLegendData.push({ name: currentUsageLabel });\n        }\n        if (currentRequestData && currentRequestData.length) {\n            secondRowLegendData.push({ name: currentRequestLabel });\n        }\n        const container = React.createElement(ChartVoronoiContainer, { labels: this.getTooltipLabel });\n        return (React.createElement(\"div\", { className: css(styles.reportSummaryTrend), ref: this.containerRef },\n            React.createElement(\"div\", null,\n                React.createElement(ChartGroup, { containerComponent: container, height: height, width: this.state.width },\n                    Boolean(currentUsageData && currentUsageData.length) && (React.createElement(ChartArea, { style: chartStyles.currentUsageData, data: currentUsageData })),\n                    Boolean(currentRequestData && currentRequestData.length) && (React.createElement(ChartArea, { style: chartStyles.currentRequestData, data: currentRequestData })),\n                    Boolean(previousUsageData && previousUsageData.length) && (React.createElement(ChartArea, { style: chartStyles.previousUsageData, data: previousUsageData })),\n                    Boolean(previousRequestData && previousRequestData.length) && (React.createElement(ChartArea, { style: chartStyles.previousRequestData, data: previousRequestData })))),\n            React.createElement(ChartLegend, { title: title, theme: ChartTheme.dark.blue, colorScale: chartStyles.currentColorScale, data: firstRowLegendData, gutter: 55, height: 25, width: this.state.width }),\n            React.createElement(ChartLegend, { title: title, theme: ChartTheme.dark.blue, colorScale: chartStyles.previousColorScale, data: secondRowLegendData, height: 25, width: this.state.width, style: { data: { strokeDasharray: '5,5' } } })));\n    }\n}\nexport { UsageChart };\n","import React from 'react';\nimport { UsageChart } from '../usageChart';\nconst OcpReportSummaryUsage = props => (React.createElement(\"div\", { style: { marginBottom: 16 } },\n    React.createElement(UsageChart, Object.assign({ height: 75 }, props))));\nexport { OcpReportSummaryUsage };\n","import { getQuery, parseQuery } from 'api/ocpQuery';\nimport { getDateRangeString, transformOcpReport, } from 'components/commonChart/chartUtils';\nimport { Link } from 'components/link';\nimport { OcpReportSummary, OcpReportSummaryDetails, OcpReportSummaryItem, OcpReportSummaryItems, OcpReportSummaryTrend, OcpReportSummaryUsage, } from 'components/ocpReportSummary';\nimport { Tabs } from 'components/tabs';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors, } from 'store/ocpDashboard';\nimport { ocpReportsSelectors } from 'store/ocpReports';\nimport { formatValue } from 'utils/formatValue';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nclass OcpDashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top', { groupBy: key });\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.all', { groupBy: key });\n        };\n        this.buildDetailsLink = () => {\n            const { currentQuery } = this.props;\n            const groupBy = parseQuery(currentQuery).group_by;\n            return `/ocp?${getQuery({\n                group_by: groupBy,\n                order_by: { charge: 'desc' },\n            })}`;\n        };\n        this.renderTab = (tabData) => {\n            const { reportType, tabs, topItems } = this.props;\n            const currentTab = tabData.id;\n            return (React.createElement(OcpReportSummaryItems, { idKey: getIdKeyForTab(currentTab), report: tabs }, ({ items }) => items.map(tabItem => (React.createElement(OcpReportSummaryItem, { key: tabItem.id, formatOptions: topItems.formatOptions, formatValue: formatValue, label: tabItem.label.toString(), totalValue: reportType === \"charge\" /* charge */\n                    ? tabs.total.charge\n                    : tabs.total.usage, units: tabItem.units, value: reportType === \"charge\" /* charge */\n                    ? tabItem.charge\n                    : tabItem.usage })))));\n        };\n        this.handleTabChange = (tabId) => {\n            this.props.updateTab(this.props.id, tabId);\n        };\n    }\n    componentDidMount() {\n        const { fetchReports, widgetId } = this.props;\n        fetchReports(widgetId);\n    }\n    render() {\n        const { t, titleKey, trend, details, current, previous, availableTabs, currentTab, reportType, status, } = this.props;\n        const today = new Date();\n        const month = getMonth(today);\n        const endDate = formatDate(today, 'Do');\n        const startDate = formatDate(startOfMonth(today), 'Do');\n        const title = t(titleKey, { endDate, month, startDate });\n        const subTitle = t('ocp_dashboard.widget_subtitle', {\n            endDate,\n            month,\n            startDate,\n            count: getDate(today),\n        });\n        const detailLabel = t(details.labelKey);\n        const requestLabel = t(details.requestLabelKey);\n        const detailsLink = reportType === \"charge\" /* charge */ && (React.createElement(Link, { to: this.buildDetailsLink() }, this.getDetailsLinkTitle(currentTab)));\n        const reportItem = reportType === \"charge\" /* charge */ ? 'charge' : 'usage';\n        const currentUsageData = transformOcpReport(current, trend.type, 'date', reportItem);\n        const previousUsageData = transformOcpReport(previous, trend.type, 'date', reportItem);\n        const currentRequestData = reportType !== \"charge\" /* charge */\n            ? transformOcpReport(current, trend.type, 'date', 'request')\n            : undefined;\n        const previousRequestData = reportType !== \"charge\" /* charge */\n            ? transformOcpReport(previous, trend.type, 'date', 'request')\n            : undefined;\n        const currentRequestLabel = t(trend.currentRequestLabelKey, {\n            date: getDateRangeString(currentRequestData),\n        });\n        const currentUsageLabel = t(trend.currentUsageLabelKey, {\n            date: getDateRangeString(currentUsageData),\n        });\n        const previousRequestLabel = t(trend.previousRequestLabelKey, {\n            date: getDateRangeString(previousRequestData),\n        });\n        const previousUsageLabel = t(trend.previousUsageLabel, {\n            date: getDateRangeString(previousUsageData),\n        });\n        return (React.createElement(OcpReportSummary, { title: title, subTitle: subTitle, detailsLink: detailsLink, status: status },\n            React.createElement(OcpReportSummaryDetails, { report: current, reportType: reportType, formatValue: formatValue, label: detailLabel, formatOptions: details.formatOptions, requestLabel: requestLabel }),\n            Boolean(reportType === \"charge\" /* charge */) ? (React.createElement(OcpReportSummaryTrend, { title: t(trend.titleKey), currentData: currentUsageData, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousData: previousUsageData })) : (React.createElement(OcpReportSummaryUsage, { currentRequestData: currentRequestData, currentRequestLabel: currentRequestLabel, currentUsageData: currentUsageData, currentUsageLabel: currentUsageLabel, formatDatumValue: formatValue, formatDatumOptions: trend.formatOptions, previousRequestData: previousRequestData, previousRequestLabel: previousRequestLabel, previousUsageData: previousUsageData, previousUsageLabel: previousUsageLabel })),\n            React.createElement(Tabs, { tabs: availableTabs.map(tab => ({\n                    id: tab,\n                    label: this.getTabTitle(tab),\n                    content: this.renderTab,\n                })), selected: currentTab, onChange: this.handleTabChange })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign({}, widget, { currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, current: ocpReportsSelectors.selectReport(state, widget.reportType, queries.current), previous: ocpReportsSelectors.selectReport(state, widget.reportType, queries.previous), tabs: ocpReportsSelectors.selectReport(state, widget.reportType, queries.tabs), status: ocpReportsSelectors.selectReportFetchStatus(state, widget.reportType, queries.current) });\n});\nconst mapDispatchToProps = {\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = translate()(connect(mapStateToProps, mapDispatchToProps)(OcpDashboardWidgetBase));\nexport { OcpDashboardWidget, OcpDashboardWidgetBase };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/ocpDashboard';\nimport { uiActions } from 'store/ui';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\nconst OcpDashboardBase = ({ t, openProvidersModal, widgets, }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { gutter: \"md\" }, widgets.map(widgetId => {\n        return (React.createElement(GridItem, { xl: 4, lg: 6, key: widgetId },\n            React.createElement(OcpDashboardWidget, { widgetId: widgetId })));\n    }))));\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = translate()(connect(mapStateToProps, {\n    openProvidersModal: uiActions.openProvidersModal,\n})(OcpDashboardBase));\nexport default OcpDashboard;\n","import { hot } from 'react-hot-loader';\nimport OcpDashboard from './ocpDashboard';\nexport default hot(module)(OcpDashboard);\n","import { hot } from 'react-hot-loader';\nimport AwsDashboard from './awsDashboard';\nexport default hot(module)(AwsDashboard);\n","import { hot } from 'react-hot-loader';\nimport Overview from './overview';\nexport default hot(module)(Overview);\n"],"sourceRoot":""}