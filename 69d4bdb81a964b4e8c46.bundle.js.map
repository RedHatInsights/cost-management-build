{"version":3,"file":"69d4bdb81a964b4e8c46.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/routes/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/routes/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/routes/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/routes/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/routes/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/routes/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/routes/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/routes/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/routes/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/routes/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/routes/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/routes/views/details/azureDetails/index.ts","webpack://koku-ui/./src/routes/views/details/components/breakdown/index.ts"],"sourcesContent":["import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CostOverviewBase } from 'routes/views/details/components/costOverview/costOverviewBase';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { HistoricalDataBase } from 'routes/views/details/components/historicalData/historicalDataBase';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport BreakdownBase from 'routes/views/details/components/breakdown';\nimport { getGroupById, getGroupByValue } from 'routes/views/utils/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"azure\" /* ReportPathsType.azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.azureDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        providersError,\n        providersFetchStatus,\n        providerType: \"azure\" /* ProviderType.azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* TagPathsType.azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n        minHeight: '90px',\n    },\n    headerContentRight: {\n        display: 'flex',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { ExportsLink } from 'components/exports';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Currency } from 'routes/components/currency';\nimport { GroupBy } from 'routes/views/components/groupBy/groupBy';\nimport { filterProviders } from 'routes/views/utils/providers';\nimport { createMapStateToProps } from 'store/common';\nimport { featureFlagsSelectors } from 'store/featureFlags';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* TagPathsType.azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, isCurrencyFeatureEnabled, isExportsFeatureEnabled, onGroupBySelected, providers, providersError, report, intl, } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.azureDetailsTitle)),\n                React.createElement(\"div\", { style: styles.headerContentRight },\n                    isCurrencyFeatureEnabled && React.createElement(Currency, null),\n                    isExportsFeatureEnabled && React.createElement(ExportsLink, null))),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        isCurrencyFeatureEnabled: featureFlagsSelectors.selectIsCurrencyFeatureEnabled(state),\n        isExportsFeatureEnabled: featureFlagsSelectors.selectIsExportsFeatureEnabled(state),\n        providers: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { EmptyFilterState } from 'routes/components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'routes/components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'routes/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'routes/views/utils/paths';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* ReportPathsType.azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.tagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    Object.assign({ orderBy: groupById, title: intl.formatMessage(messages.detailsResourceNames, { value: groupById }) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: intl.formatMessage(messages.monthOverMonthChange),\n                    },\n                    Object.assign({ orderBy: 'cost', title: intl.formatMessage(messages.cost) }, (computedItems.length && { transforms: [sortable] })),\n                    {\n                        title: '',\n                    },\n                ];\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.detailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.percentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.azureDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { DataToolbar } from 'routes/views/components/dataToolbar/dataToolbar';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* TagType.tag */;\nconst tagReportPathsType = \"azure\" /* TagPathsType.azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.filterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.filterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n            ];\n            if (tagReport && tagReport.data && tagReport.data.length) {\n                options.push({ name: intl.formatMessage(messages.filterByValues, { value: tagKey }), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString, tagReportFetchStatus } = this.props;\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        }, () => {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport, tagReportFetchStatus } = this.props;\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            }, () => {\n                if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                    fetchTag(tagReportPathsType, tagReportType, queryString);\n                }\n            });\n        }\n        else if (query && !isEqual(query, prevProps.query)) {\n            if (tagReportFetchStatus !== 1 /* FetchStatus.inProgress */) {\n                fetchTag(tagReportPathsType, tagReportType, queryString);\n            }\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* ResourcePathsType.azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport, tagReportPathsType: tagReportPathsType }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Note: Omitting key_only would help to share a single, cached request -- the toolbar requires key values\n    // However, for better server-side performance, we chose to use key_only here.\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        key_only: true,\n        limit: 1000,\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReportFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport Loading from 'routes/state/loading';\nimport NoData from 'routes/state/noData';\nimport NoProviders from 'routes/state/noProviders';\nimport NotAvailable from 'routes/state/notAvailable';\nimport { ExportModal } from 'routes/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'routes/views/utils/groupBy';\nimport { filterProviders, hasCurrentMonthData } from 'routes/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'routes/views/utils/query';\nimport { createMapStateToProps } from 'store/common';\nimport { providersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* ReportType.cost */;\nconst reportPathsType = \"azure\" /* ReportPathsType.azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { count: isAllSelected ? itemsTotal : items.length, isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* FetchStatus.inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            this.setState({ isAllSelected: false, selectedItems: [] }, () => {\n                history.replace(this.getRouteForQuery(newQuery, true));\n            });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.azureDetailsTitle);\n        // Note: Providers are fetched via the AccountSettings component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* FetchStatus.inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* FetchStatus.complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* ProviderType.azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* FetchStatus.inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(providersQuery);\n    const providers = providersSelectors.selectProviders(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"all\" /* ProviderType.all */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"all\" /* ProviderType.all */, providersQueryString);\n    return {\n        providers: filterProviders(providers, \"azure\" /* ProviderType.azure */),\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        // Testing...\n        //\n        // providers: {\n        //   meta: {\n        //     count: 0,\n        //   },\n        // } as any,\n        // providersError: {\n        //   response: {\n        //     // status: 401\n        //     status: 500\n        //   }\n        // } as any,\n        // providersFetchStatus: FetchStatus.inProgress,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","import BreakdownBase from './breakdownBase';\nexport default BreakdownBase;\n"],"names":["mapStateToProps","state","props","selectWidgets","azureCostOverview","widgets","CostOverview","injectIntl","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersError","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","resource_location","service_name","styles","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","global_spacer_md","tableContainer","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","padding","headerContent","display","justifyContent","headerContentLeft","headerContentRight","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","render","isCurrencyFeatureEnabled","isExportsFeatureEnabled","onGroupBySelected","this","showContent","meta","count","hasCost","total","cost","style","Title","headingLevel","size","TitleSizes","isDisabled","onSelected","options","showTags","Boolean","format","units","featureFlags","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","constructor","super","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","computedItems","idKey","orderBy","length","transforms","sortable","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","setState","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","tagReport","fetchTag","tagReportFetchStatus","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","key_only","limit","DetailsToolbarConnect","DetailsToolbar","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"sourceRoot":""}