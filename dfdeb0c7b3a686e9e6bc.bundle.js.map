{"version":3,"sources":["webpack:///./src/pages/ocpCloudDetails/index.ts","webpack:///./src/utils/formatValue.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/utils/equal.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/usageChart/usageChart.styles.ts","webpack:///./src/components/charts/usageChart/usageChart.tsx","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummary.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryAlt.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryDetails.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItem.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryItems.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.styles.ts","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryTrend.tsx","webpack:///./src/components/reports/ocpCloudReportSummary/ocpCloudReportSummaryUsage.tsx","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.styles.ts","webpack:///./src/components/charts/historicalUsageChart/historicalUsageChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.styles.ts","webpack:///./src/pages/ocpCloudDetails/groupBy.tsx","webpack:///./src/pages/ocpCloudDetails/detailsHeader.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTagView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTagModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidgetModal.tsx","webpack:///./src/pages/ocpCloudDetails/exportModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/exportModal.tsx","webpack:///./src/pages/ocpCloudDetails/historicalChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalChart.tsx","webpack:///./src/pages/ocpCloudDetails/historicalModal.styles.ts","webpack:///./src/pages/ocpCloudDetails/historicalModal.tsx","webpack:///./src/pages/ocpCloudDetails/detailsActions.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsChart.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsTag.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.styles.ts","webpack:///./src/pages/ocpCloudDetails/detailsWidgetView.tsx","webpack:///./src/pages/ocpCloudDetails/detailsWidget.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTableItem.tsx","webpack:///./src/pages/ocpCloudDetails/detailsTable.tsx","webpack:///./src/pages/ocpCloudDetails/detailsToolbar.tsx","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.styles.ts","webpack:///./src/pages/ocpCloudDetails/ocpCloudDetails.tsx"],"names":["__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_0__","module","_ocpCloudDetails__WEBPACK_IMPORTED_MODULE_1__","unitLookupKey","unit","lookup","toLowerCase","formatValue","value","options","fValue","formatCurrency","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","getTestProps","id","data-testid","testIds","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","transformAwsReport","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","map","i","createDatum","reduce","acc","d","prevValue","length","y","transformAzureReport","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","transformOcpReport","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","transformOcpCloudReport","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","computedItem","n","x","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","label","Number","parseFloat","toFixed","isInt","name","units","getDateRange","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","getDatumDateRange","setDate","lastDate","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","getDate","getMaxValue","max","forEach","datum","getTooltipContent","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","i18next__WEBPACK_IMPORTED_MODULE_5__","t","getTooltipLabel","formatOptions","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","toString","getCostRangeString","count","endDate","month","startDate","year","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","getUsageRangeString","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","__webpack_require__","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","labelKey","_sort__WEBPACK_IMPORTED_MODULE_0__","getUnsortedComputedOcpReportItems","itemMap","Map","visitDataPoint","dataPoint","values","capacity","cluster","cluster_alias","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","getIdKeyForGroupBy","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","tags","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","getNoDataForDateRangeString","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","getForDateRangeString","getSinceDateRangeString","isEqual","obj1","obj2","JSON","stringify","split","join","display","justifyContent","height","marginTop","viewSources","mapStateToProps","common","state","NoProvidersState","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","undefined","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","currentRequestData","strokeDasharray","currentUsageData","itemsPerRow","previousRequestData","previousUsageData","currentColorScale","previousColorScale","usageChart_UsageChart","legendItemsPerRow","maxCurrentRequest","maxCurrentUsage","maxPreviousRequest","maxPreviousUsage","currentRequestDate","currentUsageDate","previousRequestDate","previousUsageDate","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","tagKey","defaultFilters","tag","DetailsDataToolbar","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","indexOf","getActiveFilters","query","filter_by","keys","isArray","substring","onDelete","filterType","prevState","filter","_filterType","onFilterRemoved","onCategoryClick","currentCategory","onCategorySelect","event","currentTagKey","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","checked","target","prevSelections","getExportButton","isExportDisabled","DataToolbarItem","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","val","pagination","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","breakpointMods","modifier","historicalTrendChart_HistoricalTrendChart","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","OcpCloudReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","Boolean","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","ocpCloudReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","OcpCloudReportSummaryAlt","tabs","Grid","GridItem","lg","xl","ocpCloudReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","OcpCloudReportSummaryDetails","costLabel","reportType","requestFormatOptions","requestLabel","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","cloudReportType","meta","total","getCostLayout","Tooltip","content","enableFlip","getRequestLayout","usageUnits","_units","utils_formatValue","unitsLabel","getUsageLayout","ocpCloudReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","OcpCloudReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","OcpCloudReportSummaryItem","ocpCloudReportSummaryItems_styles_styles","skeleton","OcpCloudReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","ocpCloudReportSummaryTrend_styles_styles","OcpCloudReportSummaryTrend","trendChart","OcpCloudReportSummaryUsage","usageChart","currentCapacityData","currentLimitData","previousCapacityData","previousLimitData","historicalUsageChart_HistoricalUsageChart","maxCurrentLimit","maxPreviousLimit","costValue","costLabelUnit","costLabelDate","header","info","verticalAlign","infoIcon","infoTitle","fontWeight","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","ocpCloudQuery","resolution","time_scope_units","time_scope_value","ocpCloudReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","detailsHeader_reportType","baseQuery","delta","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","showPopover","handlePopoverClick","show","onGroupByClicked","showContent","sizes","Popover","bodyContent","info_circle_icon","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","ocpCloudReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_tagKey","exportModal_mapStateToProps","error","ocpCloudExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","cpuChart","memoryChart","cpuReportType","costReportType","memoryReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","ocpCloudReportsSelectors","currentCostReportFetchStatus","currentCpuReport","currentCpuReportFetchStatus","currentMemoryReport","currentMemoryReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousCpuReport","previousCpuReportFetchStatus","previousMemoryReport","previousMemoryReportFetchStatus","historicalChart_mapDispatchToProps","ocpCloudReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentCpuLimitData","currentCpuRequestData","currentCpuUsageData","previousCpuLimitData","previousCpuRequestData","previousCpuUsageData","currentMemoryLimitData","currentMemoryRequestData","currentMemoryUsageData","previousMemoryLimitData","previousMemoryRequestData","previousMemoryUsageData","costUnits","cpuUnits","memoryUnits","historicalTrendChart","historicalUsageChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","ocpCloudDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnSelect","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsChart_styles_styles","freeSpace","detailsChart_cpuReportType","detailsChart_memoryReportType","detailsChart_mapStateToProps","cpuReport","cpuReportFetchStatus","memoryReport","memoryReportFetchStatus","detailsChart_mapDispatchToProps","DetailsChart","ranges","hasTotal","hasLimit","trunc","limitUnits","hasRequest","requestUnits","hasUsage","hasCapacity","capacityUnits","unusedRequestCapacity","unusedRequestCapacityPercentage","unusedUsageCapacity","unusedUsageCapacityPercentage","TextContent","TextList","dl","TextListItem","dt","dd","percentage","cpuDatum","getChartDatumWithCapacity","getChartDatum","memoryDatum","ChartBullet","comparativeErrorMeasureData","comparativeErrorMeasureLegendData","maxDomain","minDomain","right","top","primarySegmentedMeasureData","primarySegmentedMeasureLegendData","qualitativeRangeData","qualitativeRangeLegendData","titlePosition","getFreeSpace","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","detailsTable_tagKey","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","exportText","detailsDataToolbar","ocpCloudDetails_styles_styles","ocpCloudDetails","paginationContainer","tableContainer","ocpCloudDetails_reportType","ocpCloudDetails_tagKey","ocpCloudDetails_baseQuery","ocpCloudDetails_mapStateToProps","ocpCloudDetails_mapDispatchToProps","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","history","found","filteredQuery","getRouteForQuery","replace","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"dfdeb0c7b3a686e9e6bc.bundle.js","sourcesContent":["import { hot } from 'react-hot-loader';\nimport OcpCloudDetails from './ocpCloudDetails';\nexport default hot(module)(OcpCloudDetails);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cluster = value.cluster_alias\n                    ? value.cluster_alias\n                    : value.cluster;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && value.cluster_alias) {\n                    label = value.cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.tags) {\n        return 'tags';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 2,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 380,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        global_disabled_color_200.value,\n        chart_color_green_200.value,\n    ],\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    // TBD: No grey scale, yet\n    previousColorScale: [\n        global_disabled_color_200.value,\n        global_disabled_color_200.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './usageChart.styles';\nclass UsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 300\n                    ? chartStyles.itemsPerRow\n                    : 1;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), height: 25, gutter: 10, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentRequest, maxCurrentUsage, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { UsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return undefined;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                const filterType = type.toLowerCase();\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: t(`filter_by.values.${categoryOption.label}`), chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if (event.key && event.key !== 'Enter') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            // Width prop is a workaround for https://github.com/patternfly/patternfly-react/issues/3574\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder'), width: 200 }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions, t } = this.props;\n        const { currentCategory, isCategoryDropdownOpen } = this.state;\n        const index = currentCategory ? currentCategory.indexOf('tag') : -1;\n        const label = index !== -1\n            ? t('filter_by.values.tag')\n            : t(`filter_by.values.${currentCategory}`);\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, t(`filter_by.values.${option.label}`)))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            categoryOptions &&\n                                categoryOptions\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        React.createElement(DataToolbarGroup, null, this.getExportButton())),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummary.styles';\nconst OcpCloudReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst OcpCloudReportSummary = translate()(OcpCloudReportSummaryBase);\nexport { OcpCloudReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './ocpCloudReportSummaryAlt.styles';\nconst OcpCloudReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst OcpCloudReportSummaryAlt = translate()(OcpCloudReportSummaryAltBase);\nexport { OcpCloudReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryDetails.styles';\nconst OcpCloudReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, requestFormatOptions, requestLabel, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let infrastructureCost = React.createElement(EmptyValueState, null);\n    let markupCost = React.createElement(EmptyValueState, null);\n    let request = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    const cloudReportType = reportType === \"database\" /* database */ ||\n        reportType === \"instance_type\" /* instanceType */ ||\n        reportType === \"network\" /* network */ ||\n        reportType === \"storage\" /* storage */;\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.value\n            : 0, report.meta.total.infrastructure_cost\n            ? report.meta.total.infrastructure_cost.units\n            : 'USD', formatOptions);\n        markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.markup_cost\n            ? report.meta.total.markup_cost.units\n            : 'USD', formatOptions);\n        if (cloudReportType) {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n        }\n        else {\n            usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n            request = formatValue(report.meta.total.request ? report.meta.total.request.value : 0, report.meta.total.request ? report.meta.total.request.units : '', requestFormatOptions ? usageFormatOptions : formatOptions);\n        }\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(Tooltip, { content: t('ocp_cloud_dashboard.total_cost_tooltip', {\n                infrastructureCost,\n                markupCost,\n            }), enableFlip: true },\n            React.createElement(\"div\", { className: css(styles.value) }, cost)),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getRequestLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.request\n            ? report.meta.total.request.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                request,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.request &&\n                    report.meta.total.request.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, requestLabel))));\n    };\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const _units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${_units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else if (cloudReportType) {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getRequestLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getRequestLayout(),\n            getUsageLayout()));\n    }\n};\nconst OcpCloudReportSummaryDetails = translate()(OcpCloudReportSummaryDetailsBase);\nexport { OcpCloudReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './ocpCloudReportSummaryItem.styles';\nconst OcpCloudReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nOcpCloudReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst OcpCloudReportSummaryItem = translate()(OcpCloudReportSummaryItemBase);\nexport { OcpCloudReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './ocpCloudReportSummaryItems.styles';\nclass OcpCloudReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedOcpCloudReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst OcpCloudReportSummaryItems = translate()(OcpCloudReportSummaryItemsBase);\nexport { OcpCloudReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryTrend };\n","import { css } from '@patternfly/react-styles';\nimport { UsageChart } from 'components/charts/usageChart';\nimport React from 'react';\nimport { styles } from './ocpCloudReportSummaryTrend.styles';\nconst OcpCloudReportSummaryUsage = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(UsageChart, Object.assign({}, props))));\nexport { OcpCloudReportSummaryUsage };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_blue_100, chart_color_blue_200, chart_color_blue_300, chart_color_blue_400, chart_color_blue_500, chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#519149',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    currentColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    currentLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#6EC664',\n        },\n    },\n    currentRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#88D080',\n            strokeDasharray: '3,3',\n        },\n    },\n    currentUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    itemsPerRow: 0,\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_blue_100.value,\n        chart_color_green_100.value,\n        chart_color_blue_200.value,\n        chart_color_green_200.value,\n        chart_color_blue_300.value,\n        chart_color_green_300.value,\n        chart_color_blue_400.value,\n        chart_color_green_400.value,\n        chart_color_blue_500.value,\n        chart_color_green_500.value,\n    ],\n    previousCapacityData: {\n        data: {\n            fill: 'none',\n            stroke: '#00659C',\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    previousColorScale: [\n        chart_color_blue_100.value,\n        chart_color_blue_200.value,\n        chart_color_blue_300.value,\n        chart_color_blue_400.value,\n        chart_color_blue_500.value,\n    ],\n    previousLimitData: {\n        data: {\n            fill: 'none',\n            stroke: '#007BBA',\n        },\n    },\n    previousRequestData: {\n        data: {\n            fill: 'none',\n            stroke: '#39A5DC',\n            strokeDasharray: '3,3',\n        },\n    },\n    previousUsageData: {\n        data: {\n            fill: 'none',\n            stroke: '#7DC3E8',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue, getTooltipContent, getTooltipLabel, getUsageRangeString, } from 'components/charts/commonChart/chartUtils';\nimport { getDateRange } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport i18next from 'i18next';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalUsageChart.styles';\nclass HistoricalUsageChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentLimitData, currentRequestData, currentUsageData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n            const limitKey = 'chart.limit_legend_label';\n            const usageKey = 'chart.usage_legend_label';\n            const requestKey = 'chart.requests_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousUsage',\n                        data: previousUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(previousUsageData, usageKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousUsageData,\n                    },\n                    {\n                        childName: 'currentUsage',\n                        data: currentUsageData,\n                        legendItem: {\n                            name: getUsageRangeString(currentUsageData, usageKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentUsageData,\n                    },\n                    {\n                        childName: 'previousRequest',\n                        data: previousRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(previousRequestData, requestKey, true, true, 1),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.previousRequestData,\n                    },\n                    {\n                        childName: 'currentRequest',\n                        data: currentRequestData,\n                        legendItem: {\n                            name: getUsageRangeString(currentRequestData, requestKey, true, false),\n                            symbol: {\n                                type: 'dash',\n                            },\n                        },\n                        style: chartStyles.currentRequestData,\n                    },\n                    {\n                        childName: 'previousLimit',\n                        data: previousLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(previousLimitData, limitKey, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousLimitData,\n                    },\n                    {\n                        childName: 'currentLimit',\n                        data: currentLimitData,\n                        legendItem: {\n                            name: getUsageRangeString(currentLimitData, limitKey, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentLimitData,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            const { width } = this.state;\n            const itemsPerRow = legendItemsPerRow\n                ? legendItemsPerRow\n                : width > 800\n                    ? chartStyles.itemsPerRow\n                    : 2;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 0, height: 25, itemsPerRow: itemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            const value = getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n            if (datum.childName === 'currentLimit' ||\n                datum.childName === 'previousLimit') {\n                return i18next.t('chart.limit_tooltip', { value });\n            }\n            else if (datum.childName === 'currentRequest' ||\n                datum.childName === 'previousRequest') {\n                return i18next.t('chart.requests_tooltip', { value });\n            }\n            else if (datum.childName === 'currentUsage' ||\n                datum.childName === 'previousUsage') {\n                return i18next.t('chart.usage_tooltip', { value });\n            }\n            return value;\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentLimitData !== this.props.currentLimitData ||\n            prevProps.currentRequestData !== this.props.currentRequestData ||\n            prevProps.currentUsageData !== this.props.currentUsageData ||\n            prevProps.previousLimitData !== this.props.previousLimitData ||\n            prevProps.previousRequestData !== this.props.previousRequestData ||\n            prevProps.previousUsageData !== this.props.previousUsageData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentRequestData, currentUsageData, currentLimitData, previousLimitData, previousRequestData, previousUsageData, } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrentLimit = currentLimitData\n            ? getMaxValue(currentLimitData)\n            : 0;\n        const maxCurrentRequest = currentRequestData\n            ? getMaxValue(currentRequestData)\n            : 0;\n        const maxCurrentUsage = currentUsageData\n            ? getMaxValue(currentUsageData)\n            : 0;\n        const maxPreviousLimit = previousLimitData\n            ? getMaxValue(previousLimitData)\n            : 0;\n        const maxPreviousRequest = previousRequestData\n            ? getMaxValue(previousRequestData)\n            : 0;\n        const maxPreviousUsage = previousUsageData\n            ? getMaxValue(previousUsageData)\n            : 0;\n        const maxValue = Math.max(maxCurrentLimit, maxCurrentRequest, maxCurrentUsage, maxPreviousLimit, maxPreviousRequest, maxPreviousUsage);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentRequestData, currentUsageData, previousRequestData, previousUsageData, } = this.props;\n        const currentRequestDate = currentRequestData\n            ? getDate(getDateRange(currentRequestData, true, true)[1])\n            : 0;\n        const currentUsageDate = currentUsageData\n            ? getDate(getDateRange(currentUsageData, true, true)[1])\n            : 0;\n        const previousRequestDate = previousRequestData\n            ? getDate(getDateRange(previousRequestData, true, true)[1])\n            : 0;\n        const previousUsageDate = previousUsageData\n            ? getDate(getDateRange(previousUsageData, true, true)[1])\n            : 0;\n        return currentRequestDate > 0 ||\n            currentUsageDate > 0 ||\n            previousRequestDate > 0 ||\n            previousUsageDate > 0\n            ? Math.max(currentRequestDate, currentUsageDate, previousRequestDate, previousUsageDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalUsageChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_md, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    info: {\n        marginLeft: global_spacer_sm.value,\n        verticalAlign: 'middle',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { parseQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getIdKeyForGroupBy } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst reportType = \"tag\" /* tag */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'project',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(tag => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${tag.key}`, onClick: () => this.handleGroupByClick(`${tagKey}${tag.key}`) }, t('group_by.tag_key', { value: tag.key }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'project';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Popover, Title, TitleSize, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            showPopover: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handlePopoverClick = () => {\n            this.setState({\n                show: !this.state.showPopover,\n            });\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let markupCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            cost = formatValue(report.meta.total.derived_cost ? report.meta.total.cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            markupCost = formatValue(report.meta.total.markup_cost ? report.meta.total.markup_cost.value : 0, report.meta.total.derived_cost\n                ? report.meta.total.derived_cost.units\n                : 'USD');\n            infrastructureCost = formatValue(report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.value\n                : 0, report.meta.total.infrastructure_cost\n                ? report.meta.total.infrastructure_cost.units\n                : 'USD');\n        }\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('ocp_cloud_details.title')),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_cloud_details.total_cost_tooltip', {\n                            infrastructureCost,\n                            markupCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) },\n                        t('ocp_cloud_details.total_cost'),\n                        React.createElement(\"span\", { className: css(styles.infoIcon) },\n                            React.createElement(Popover, { \"aria-label\": \"t('ocp_cloud_details.markup_aria_label')\", enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_cloud_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_cloud_details.infrastructure_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { className: css(styles.infoTitle) }, t('ocp_cloud_details.markup_title')),\n                                    React.createElement(\"p\", null, t('ocp_cloud_details.markup_desc'))) },\n                                React.createElement(InfoCircleIcon, { className: css(styles.info), onClick: this.handlePopoverClick })))),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { groupBy: groupBy, item: item, project: item.label || item.id })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('ocp_cloud_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(OcpCloudReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudExportActions, ocpCloudExportSelectors, } from 'store/ocpCloudExport';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: ocpCloudExportSelectors.selectExportError(state),\n        export: ocpCloudExportSelectors.selectExport(state),\n        fetchStatus: ocpCloudExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: ocpCloudExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    cpuChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    memoryChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformOcpCloudReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport { HistoricalUsageChart } from 'components/charts/historicalUsageChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport * as ocpCloudReportsActions from 'store/ocpCloudReports/ocpCloudReportsActions';\nimport * as ocpCloudReportsSelectors from 'store/ocpCloudReports/ocpCloudReportsSelectors';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst costReportType = \"cost\" /* cost */;\nconst memoryReportType = \"memory\" /* memory */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(cpuReportType, currentQueryString);\n        fetchReport(memoryReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(cpuReportType, previousQueryString);\n        fetchReport(memoryReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(cpuReportType, currentQueryString);\n            fetchReport(memoryReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(cpuReportType, previousQueryString);\n            fetchReport(memoryReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentCpuReport, currentCpuReportFetchStatus, currentMemoryReport, currentMemoryReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousCpuReport, previousCpuReportFetchStatus, previousMemoryReport, previousMemoryReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformOcpCloudReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformOcpCloudReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Cpu data\n        const currentCpuLimitData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'limit');\n        const currentCpuRequestData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'request');\n        const currentCpuUsageData = transformOcpCloudReport(currentCpuReport, 1 /* daily */, 'date', 'usage');\n        const previousCpuLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousCpuRequestData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'request');\n        const previousCpuUsageData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'usage');\n        // Memory data\n        const currentMemoryLimitData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'limit');\n        const currentMemoryRequestData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'request');\n        const currentMemoryUsageData = transformOcpCloudReport(currentMemoryReport, 1 /* daily */, 'date', 'usage');\n        const previousMemoryLimitData = transformOcpCloudReport(previousCpuReport, 1 /* daily */, 'date', 'limit');\n        const previousMemoryRequestData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'request');\n        const previousMemoryUsageData = transformOcpCloudReport(previousMemoryReport, 1 /* daily */, 'date', 'usage');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        const cpuUnits = currentCpuReport &&\n            currentCpuReport.meta &&\n            currentCpuReport.meta.total &&\n            currentCpuReport.meta.total.usage\n            ? currentCpuReport.meta.total.usage.units\n            : '';\n        const memoryUnits = currentMemoryReport &&\n            currentMemoryReport.meta &&\n            currentMemoryReport.meta.total &&\n            currentMemoryReport.meta.total.usage\n            ? currentMemoryReport.meta.total.usage.units\n            : '';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('ocp_cloud_details.historical.cost_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.cpuChart) }, currentCpuReportFetchStatus === 1 /* inProgress */ &&\n                previousCpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentCpuLimitData, currentRequestData: currentCpuRequestData, currentUsageData: currentCpuUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousCpuLimitData, previousRequestData: previousCpuRequestData, previousUsageData: previousCpuUsageData, title: t('ocp_cloud_details.historical.cpu_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.cpu_label', {\n                    units: t(`units.${unitLookupKey(cpuUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.memoryChart) }, currentMemoryReportFetchStatus === 1 /* inProgress */ &&\n                previousMemoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalUsageChart, { containerHeight: chartStyles.chartContainerHeight, currentLimitData: currentMemoryLimitData, currentRequestData: currentMemoryRequestData, currentUsageData: currentMemoryUsageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousLimitData: previousMemoryLimitData, previousRequestData: previousMemoryRequestData, previousUsageData: previousMemoryUsageData, title: t('ocp_cloud_details.historical.memory_title'), xAxisLabel: t('ocp_cloud_details.historical.day_of_month_label'), yAxisLabel: t('ocp_details.historical.memory_label', {\n                    units: t(`units.${unitLookupKey(memoryUnits)}`),\n                }) })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, currentQueryString);\n    const currentCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, currentQueryString);\n    const currentMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, currentQueryString);\n    const currentMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = ocpCloudReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousCpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, previousQueryString);\n    const previousCpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, previousQueryString);\n    const previousMemoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, previousQueryString);\n    const previousMemoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentCpuReport,\n        currentCpuReportFetchStatus,\n        currentMemoryReport,\n        currentMemoryReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousCpuReport,\n        previousCpuReportFetchStatus,\n        previousMemoryReport,\n        previousMemoryReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/ocpCloudDashboard';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('ocp_cloud_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose, project: item.label || item.id }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"project\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('ocp_cloud_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy !== 'cluster', onClick: this.handleWidgetModalOpen }, t('ocp_cloud_details.actions.projects')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'project', onClick: this.handleTagModalOpen }, t('ocp_cloud_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('ocp_cloud_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    &.tag {\n      tbody td + td + td {\n        text-align: right;\n      }\n    }\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        marginBottom: global_spacer_md.value,\n    },\n    freeSpace: {\n        marginBottom: global_spacer_lg.value,\n        marginLeft: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { ChartBullet } from '@patternfly/react-charts';\nimport { TextContent, TextList, TextListItem, TextListItemVariants, TextListVariants, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsChart.styles';\nconst cpuReportType = \"cpu\" /* cpu */;\nconst memoryReportType = \"memory\" /* memory */;\nclass DetailsChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            width: 0,\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current && this.containerRef.current.clientWidth) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(cpuReportType, queryString);\n        fetchReport(memoryReportType, queryString);\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== this.props.queryString) {\n            fetchReport(cpuReportType, queryString);\n            fetchReport(memoryReportType, queryString);\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getChartDatum(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n        ];\n        return datum;\n    }\n    getChartDatumWithCapacity(report, labelKey) {\n        const { t } = this.props;\n        const datum = {\n            legend: [],\n            limit: {},\n            ranges: [],\n            usage: [],\n        };\n        // Always show bullet chart legends https://github.com/project-koku/koku-ui/issues/963\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasLimit = hasTotal && report.meta.total.limit && report.meta.total.limit !== null;\n        const limit = Math.trunc(hasLimit ? report.meta.total.limit.value : 0);\n        const limitUnits = t(`units.${unitLookupKey(hasLimit ? report.meta.total.limit.units : '')}`);\n        datum.limit = {\n            legend: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            tooltip: t(`ocp_cloud_details.bullet.${labelKey}_limit`, {\n                value: limit,\n                units: limitUnits,\n            }),\n            value: Math.trunc(limit),\n        };\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const capacityUnits = t(`units.${unitLookupKey(hasCapacity ? report.meta.total.capacity.units : '')}`);\n        datum.ranges = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_capacity`, {\n                    value: capacity,\n                    units: capacityUnits,\n                }),\n                value: Math.trunc(capacity),\n            },\n        ];\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        datum.usage = [\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_usage`, {\n                    value: usage,\n                    units: usageUnits,\n                }),\n                value: Math.trunc(usage),\n            },\n            {\n                legend: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                tooltip: t(`ocp_cloud_details.bullet.${labelKey}_requests`, {\n                    value: request,\n                    units: requestUnits,\n                }),\n                value: Math.trunc(request),\n            },\n        ];\n        return datum;\n    }\n    getFreeSpace(report, labelKey) {\n        const { t } = this.props;\n        const hasTotal = report && report.meta && report.meta.total;\n        const hasCapacity = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasRequest = hasTotal &&\n            report.meta.total.request &&\n            report.meta.total.request !== null;\n        const hasUsage = hasTotal && report.meta.total.usage && report.meta.total.usage !== null;\n        const capacity = Math.trunc(hasCapacity ? report.meta.total.capacity.value : 0);\n        const request = Math.trunc(hasRequest ? report.meta.total.request.value : 0);\n        const requestUnits = t(`units.${unitLookupKey(hasRequest ? report.meta.total.request.units : '')}`);\n        const usage = Math.trunc(hasUsage ? report.meta.total.usage.value : 0);\n        const usageUnits = t(`units.${unitLookupKey(hasUsage ? report.meta.total.usage.units : '')}`);\n        // Note: Unused won't be negative since Kubernetes doesn't allow requests to exceed capacity -- see #1232\n        const unusedRequestCapacity = capacity - request;\n        const unusedRequestCapacityPercentage = (request / capacity) * 100;\n        const unusedUsageCapacity = capacity - usage;\n        const unusedUsageCapacityPercentage = (usage / capacity) * 100;\n        return (React.createElement(TextContent, { className: css(styles.freeSpace) },\n            React.createElement(TextList, { component: TextListVariants.dl },\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_cloud_details.bullet.${labelKey}_usage_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_cloud_details.bullet.${labelKey}_usage_unused`, {\n                    percentage: formatValue(unusedUsageCapacityPercentage, usageUnits),\n                    value: unusedUsageCapacity,\n                    units: usageUnits,\n                })),\n                React.createElement(TextListItem, { component: TextListItemVariants.dt }, t(`ocp_cloud_details.bullet.${labelKey}_requests_unused_label`)),\n                React.createElement(TextListItem, { component: TextListItemVariants.dd }, t(`ocp_cloud_details.bullet.${labelKey}_requests_unused`, {\n                    percentage: formatValue(unusedRequestCapacityPercentage, requestUnits),\n                    value: unusedRequestCapacity,\n                    units: requestUnits,\n                })))));\n    }\n    render() {\n        const { cpuReport, cpuReportFetchStatus, groupBy, memoryReport, memoryReportFetchStatus, t, } = this.props;\n        const { width } = this.state;\n        const cpuDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(cpuReport, 'cpu')\n            : this.getChartDatum(cpuReport, 'cpu');\n        const memoryDatum = groupBy === 'cluster'\n            ? this.getChartDatumWithCapacity(memoryReport, 'memory')\n            : this.getChartDatum(memoryReport, 'memory');\n        const itemsPerRow = width > 600 ? 3 : width > 450 ? 2 : 1;\n        return (React.createElement(\"div\", { ref: this.containerRef },\n            Boolean(cpuDatum && cpuDatum.usage.length) && (React.createElement(\"div\", null, cpuReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: cpuDatum.limit.value\n                        ? [\n                            {\n                                tooltip: cpuDatum.limit.tooltip,\n                                y: cpuDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: cpuDatum.limit.value\n                        ? [{ name: cpuDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, maxDomain: !cpuReport ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: cpuDatum.usage.length\n                        ? cpuDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: cpuDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: cpuDatum.ranges[0].tooltip,\n                                y: cpuDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: cpuDatum.ranges.length\n                        ? [{ name: cpuDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.cpu_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(cpuReport, 'cpu'))))),\n            Boolean(memoryDatum && memoryDatum.usage.length) && (React.createElement(\"div\", null, memoryReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(React.Fragment, null,\n                React.createElement(ChartBullet, { comparativeErrorMeasureData: memoryDatum.limit.value\n                        ? [\n                            {\n                                tooltip: memoryDatum.limit.tooltip,\n                                y: memoryDatum.limit.value,\n                            },\n                        ]\n                        : [], comparativeErrorMeasureLegendData: memoryDatum.limit.value\n                        ? [{ name: memoryDatum.limit.legend }]\n                        : [], height: 200, labels: ({ datum }) => `${datum.tooltip}`, legendPosition: \"bottom-left\", legendItemsPerRow: itemsPerRow, maxDomain: !memoryReport ? 100 : undefined, minDomain: 0, padding: {\n                        bottom: 75,\n                        left: 10,\n                        right: 50,\n                        top: 50,\n                    }, primarySegmentedMeasureData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                tooltip: datum.tooltip,\n                                y: datum.value,\n                            };\n                        })\n                        : [], primarySegmentedMeasureLegendData: memoryDatum.usage.length\n                        ? memoryDatum.usage.map(datum => {\n                            return {\n                                name: datum.legend,\n                            };\n                        })\n                        : [], qualitativeRangeData: memoryDatum.ranges.length\n                        ? [\n                            {\n                                tooltip: memoryDatum.ranges[0].tooltip,\n                                y: memoryDatum.ranges[0].value,\n                            },\n                        ]\n                        : [], qualitativeRangeLegendData: memoryDatum.ranges.length\n                        ? [{ name: memoryDatum.ranges[0].legend }]\n                        : [], title: t('ocp_details.bullet.memory_label'), titlePosition: \"top-left\", width: width }),\n                Boolean(groupBy === 'cluster') &&\n                    this.getFreeSpace(memoryReport, 'memory')))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const queryString = getQuery(query);\n    const cpuReport = ocpCloudReportsSelectors.selectReport(state, cpuReportType, queryString);\n    const cpuReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, cpuReportType, queryString);\n    const memoryReport = ocpCloudReportsSelectors.selectReport(state, memoryReportType, queryString);\n    const memoryReportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, memoryReportType, queryString);\n    return {\n        cpuReport,\n        cpuReportFetchStatus,\n        memoryReport,\n        memoryReportFetchStatus,\n        queryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsChart = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsChartBase));\nexport { DetailsChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, id, item, project, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('ocp_cloud_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose, project: project })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { project }) => {\n    const queryString = getQuery({\n        filter: {\n            project,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        project,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { OcpCloudReportSummaryItem, OcpCloudReportSummaryItems, } from 'components/reports/ocpCloudReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedOcpCloudReportItems } from 'utils/getComputedOcpCloudReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedOcpCloudReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(OcpCloudReportSummaryItem, { key: reportItem.id, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: report.meta.total.cost.value, units: reportItem.units, value: reportItem.cost }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('ocp_cloud_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(OcpCloudReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (!((groupBy === 'project' || groupBy === 'node') &&\n                    getIdKeyForTab(tab).toString() === 'project')) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.top_ocp_cloud', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"projects\" /* projects */,\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { DetailsChart } from './detailsChart';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('ocp_cloud_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        Boolean(groupBy !== 'cluster') && (React.createElement(\"div\", { className: css(styles.clusterContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.cluster_label'), fieldId: \"cluster-name\" },\n                                    React.createElement(\"div\", null, item.cluster))))),\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) },\n                        Boolean(groupBy === 'project') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                            React.createElement(Form, null,\n                                React.createElement(FormGroup, { label: t('ocp_cloud_details.tags_label'), fieldId: \"tags\" },\n                                    React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, project: item.label || item.id }))))),\n                        React.createElement(DetailsChart, { groupBy: groupBy, item: item })))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/ocpCloudQuery';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_cloud_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_cloud_details.name_column_title', {\n                            groupBy: groupById,\n                        }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_cloud_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_cloud_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedOcpCloudReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const total = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / total) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/ocpCloudQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { isEqual } from 'utils/equal';\nconst categoryOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n    { label: 'tag', value: 'tag' },\n];\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { exportText, groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: categoryOptions, exportText: exportText, groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    ocpCloudDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery, } from 'api/ocpCloudQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudReportsActions, ocpCloudReportsSelectors, } from 'store/ocpCloudReports';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nimport { styles } from './ocpCloudDetails.styles';\nconst reportType = \"cost\" /* cost */;\nconst tagKey = 'tag:'; // Show 'others' with group_by https://github.com/project-koku/koku-ui/issues/1090\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass OcpCloudDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report, t } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { exportText: t('ocp_cloud_details.export_link'), groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[filterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[filterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[filterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[filterType] = [\n                        newQuery.filter_by[filterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            if (filterType === null) {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (filterValue === null) {\n                newQuery.filter_by[filterType] = undefined; // Clear all values\n            }\n            else if (Array.isArray(newQuery.filter_by[filterType])) {\n                const index = newQuery.filter_by[filterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[filterType] = [\n                        ...query.filter_by[filterType].slice(0, index),\n                        ...query.filter_by[filterType].slice(index + 1),\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = undefined;\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/ocp-cloud?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedOcpCloudReportItems({\n            report,\n            idKey: groupByTagKey || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.ocpCloudDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = ocpCloudReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = ocpCloudReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = ocpCloudReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: ocpCloudReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(OcpCloudDetails));\n"],"sourceRoot":""}