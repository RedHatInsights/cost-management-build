{"version":3,"file":"4e3d2e0fadc0d4562430.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/pages/views/details/ocpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/ocpBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/ocpBreakdown/index.ts","webpack://koku-ui/./src/pages/views/details/components/columnManagement/columnManagementModal.tsx","webpack://koku-ui/./src/utils/computedReport/getComputedOcpReportItems.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/ocpDetails/ocpDetails.tsx","webpack://koku-ui/./src/pages/views/details/ocpDetails/index.ts"],"sourcesContent":["import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ocpCostOverviewSelectors } from 'store/breakdown/costOverview/ocpCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ocpHistoricalDataSelectors } from 'store/breakdown/historicalData/ocpHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.OCPDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"ocp\" /* ocp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"ocp\" /* ocp */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import OcpBreakdown from './ocpBreakdown';\nexport default OcpBreakdown;\n","import { Button, ButtonVariant, DataList, DataListCell, DataListCheck, DataListItem, DataListItemCells, DataListItemRow, Modal, ModalVariant, Text, TextContent, TextVariants, } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport const initHiddenColumns = (options) => {\n    const hiddenColumns = new Set();\n    options.map(option => {\n        if (option.hidden) {\n            hiddenColumns.add(option.value);\n        }\n    });\n    return hiddenColumns;\n};\nexport class ColumnManagementModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            hiddenColumns: initHiddenColumns(this.props.options),\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            const result = new Set(hiddenColumns);\n            if (!result.delete(value)) {\n                result.add(value);\n            }\n            return result;\n        };\n        this.isHidden = (value) => {\n            const { hiddenColumns } = this.state;\n            return hiddenColumns.has(value);\n        };\n        this.handleChange = (checked, event) => {\n            const hiddenColumns = this.getHidden(event.target.id);\n            this.setState({ hiddenColumns });\n        };\n        this.handleClose = () => {\n            // Reset defult state upon close\n            this.setState(Object.assign({}, this.defaultState), () => {\n                this.props.onClose(false);\n            });\n        };\n        this.handleSave = () => {\n            const { hiddenColumns } = this.state;\n            this.props.onSave(hiddenColumns);\n            this.handleClose();\n        };\n        this.selectAll = () => {\n            this.setState({ hiddenColumns: new Set() });\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { options } = this.props;\n        if (prevProps.options !== options) {\n            const hiddenColumns = initHiddenColumns(options);\n            this.setState({ hiddenColumns });\n        }\n    }\n    render() {\n        const { options, intl } = this.props;\n        return (React.createElement(Modal, { description: React.createElement(TextContent, null,\n                React.createElement(Text, { component: TextVariants.p }, intl.formatMessage(messages.ManageColumnsDesc)),\n                React.createElement(Button, { isInline: true, onClick: this.selectAll, variant: \"link\" }, intl.formatMessage(messages.SelectAll))), \n            // style={styles.modal}\n            isOpen: this.props.isOpen, onClose: this.handleClose, title: intl.formatMessage(messages.ManageColumnsTitle), variant: ModalVariant.medium, actions: [\n                React.createElement(Button, { key: \"save\", onClick: this.handleSave, variant: ButtonVariant.link }, intl.formatMessage(messages.Save)),\n                React.createElement(Button, { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.link }, intl.formatMessage(messages.Cancel)),\n            ] },\n            React.createElement(DataList, { \"aria-label\": intl.formatMessage(messages.ManageColumnsAriaLabel), id: \"table-column-management\", isCompact: true }, options.map(option => (React.createElement(DataListItem, { \"aria-labelledby\": option.value, key: option.value },\n                React.createElement(DataListItemRow, null,\n                    React.createElement(DataListCheck, { \"aria-labelledby\": option.value, checked: !this.isHidden(option.value), name: option.value, id: option.value, onChange: this.handleChange }),\n                    React.createElement(DataListItemCells, { dataListCells: [\n                            React.createElement(DataListCell, { id: \"table-column-management-item1\", key: \"table-column-management-item1\" },\n                                React.createElement(\"span\", null, intl.formatMessage(option.label))),\n                            React.createElement(DataListCell, { id: \"table-column-management-item2\", key: \"table-column-management-item2\" }, option.description && React.createElement(\"span\", null, intl.formatMessage(option.description))),\n                        ] }))))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(() => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ColumnManagementModalConnect = connect(mapStateToProps, mapDispatchToProps)(ColumnManagementModalBase);\nconst ColumnManagementModal = injectIntl(ColumnManagementModalConnect);\nexport { ColumnManagementModal };\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Title, TitleSizes, Tooltip } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { Currency } from 'components/currency/currency';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = \"ocp\" /* ocp */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { groupBy, onGroupBySelected, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatCurrency(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatCurrency(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.OCPDetailsTitle)),\n                insights.chrome.isBeta() && React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(\"div\", { style: styles.headerContentLeft },\n                    React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onSelected: onGroupBySelected, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Tooltip, { content: intl.formatMessage(messages.DashboardTotalCostTooltip, {\n                            infrastructureCost,\n                            supplementaryCost,\n                        }), enableFlip: true },\n                        React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, cost)),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport './detailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nexport const DetailsTableColumnIds = {\n    infrastructure: 'infrastructure',\n    monthOverMonth: 'monthOverMonth',\n    supplementary: 'supplementary',\n};\nconst reportPathsType = \"ocp\" /* ocp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { hiddenColumns, isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        title: intl.formatMessage(messages.OCPDetailsInfrastructureCost),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        title: intl.formatMessage(messages.OCPDetailsSupplementaryCost),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        id: DetailsTableColumnIds.monthOverMonth,\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        id: DetailsTableColumnIds.infrastructure,\n                        orderBy: 'infrastructure_cost',\n                        title: intl.formatMessage(messages.OCPDetailsInfrastructureCost),\n                    },\n                    {\n                        id: DetailsTableColumnIds.supplementary,\n                        orderBy: 'supplementary_cost',\n                        title: intl.formatMessage(messages.OCPDetailsSupplementaryCost),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.ocpDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth), id: DetailsTableColumnIds.monthOverMonth },\n                        { title: React.createElement(\"div\", null, InfrastructureCost), id: DetailsTableColumnIds.infrastructure },\n                        { title: React.createElement(\"div\", null, supplementaryCost), id: DetailsTableColumnIds.supplementary },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            const filteredColumns = columns.filter(column => !hiddenColumns.has(column.id));\n            const filteredRows = rows.map((_a) => {\n                var row = __rest(_a, []);\n                row.cells = row.cells.filter(cell => !hiddenColumns.has(cell.id));\n                return row;\n            });\n            this.setState({\n                columns: filteredColumns,\n                loadingRows,\n                rows: filteredRows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: \"ocp\" /* ocp */, query: query, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value, item.supplementary.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value, item.infrastructure.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { hiddenColumns, query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems ||\n            prevProps.hiddenColumns !== hiddenColumns) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.GCPDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"ocp\" /* ocp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'cluster' }), key: 'cluster' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'node' }), key: 'node' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'project' }), key: 'project' },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onColumnManagementClicked, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onColumnManagementClicked: onColumnManagementClicked, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"ocp\" /* ocp */, selectedItems: selectedItems, showBulkSelect: true, showColumnManagement: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { ColumnManagementModal, initHiddenColumns, } from 'pages/views/details/components/columnManagement/columnManagementModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable, DetailsTableColumnIds } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst defaultColumnOptions = [\n    { label: messages.MonthOverMonthChange, value: DetailsTableColumnIds.monthOverMonth },\n    {\n        description: messages.OCPDetailsInfrastructureCostDesc,\n        label: messages.OCPDetailsInfrastructureCost,\n        value: DetailsTableColumnIds.infrastructure,\n        hidden: true,\n    },\n    {\n        description: messages.OCPDetailsSupplementaryCostDesc,\n        label: messages.OCPDetailsSupplementaryCost,\n        value: DetailsTableColumnIds.supplementary,\n        hidden: true,\n    },\n];\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            hiddenColumns: initHiddenColumns(defaultColumnOptions),\n            isAllSelected: false,\n            isColumnManagementModalOpen: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getColumnManagementModal = () => {\n            const { hiddenColumns, isColumnManagementModalOpen } = this.state;\n            const options = cloneDeep(defaultColumnOptions);\n            options.map(option => {\n                option.hidden = hiddenColumns.has(option.value);\n            });\n            return (React.createElement(ColumnManagementModal, { isOpen: isColumnManagementModalOpen, options: options, onClose: this.handleColumnManagementModalClose, onSave: this.handleColumnManagementModalSave }));\n        };\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { hiddenColumns, isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, hiddenColumns: hiddenColumns, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onColumnManagementClicked: this.handleColumnManagementModalOpen, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleColumnManagementModalClose = (isOpen) => {\n            this.setState({ isColumnManagementModalOpen: isOpen });\n        };\n        this.handleColumnManagementModalOpen = () => {\n            this.setState({ isColumnManagementModalOpen: true });\n        };\n        this.handleColumnManagementModalSave = (hiddenColumns) => {\n            this.setState({ hiddenColumns });\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupBySelected = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleColumnManagementModalClose = this.handleColumnManagementModalClose.bind(this);\n        this.handleColumnManagementModalOpen = this.handleColumnManagementModalOpen.bind(this);\n        this.handleColumnManagementModalSave = this.handleColumnManagementModalSave.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.OCPDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"ocp\" /* ocp */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupBySelected: this.handleGroupBySelected, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                this.getColumnManagementModal(),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n","import OcpDetails from './ocpDetails';\nexport default OcpDetails;\n"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","injectIntl","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","Object","assign","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","intl","formatMessage","messages","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","initHiddenColumns","options","hiddenColumns","Set","map","option","hidden","add","value","ColumnManagementModalBase","constructor","stateProps","dispatchProps","super","this","defaultState","getHidden","result","delete","isHidden","has","handleChange","checked","event","target","id","setState","handleClose","onClose","handleSave","onSave","selectAll","componentDidUpdate","prevProps","render","Modal","TextContent","Text","component","TextVariants","Button","isInline","onClick","variant","isOpen","ModalVariant","actions","key","ButtonVariant","DataList","isCompact","DataListItem","DataListItemRow","DataListCheck","name","onChange","DataListItemCells","dataListCells","DataListCell","label","ColumnManagementModalConnect","ColumnManagementModal","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","groupByOptions","DetailsHeaderBase","arguments","onGroupBySelected","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","format","units","style","Title","headingLevel","size","TitleSizes","insights","chrome","isBeta","isDisabled","onSelected","showTags","Boolean","Tooltip","content","enableFlip","DetailsHeader","styles","emptyState","backgroundColor","global_BackgroundColor_light_100","display","justifyContent","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","DetailsTableColumnIds","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","getActions","to","basePath","toString","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","filteredColumns","column","filteredRows","_a","row","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","cell","sortBy","showPriceListOption","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","percentValue","toFixed","keys","tagIndex","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","ininfoArrow","getSortBy","direction","SortByDirection","order_by","c","handleOnSelect","isSelected","rowId","items","handleOnSort","onSort","bind","componentDidMount","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onColumnManagementClicked","onExportClicked","onFilterAdded","onFilterRemoved","pagination","resourcePathsType","showBulkSelect","showColumnManagement","showExport","showFilter","tagReportFetchStatus","DetailsToolbarConnect","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","padding","global_spacer_md","tableContainer","limit","offset","defaultColumnOptions","OcpDetails","isColumnManagementModalOpen","isExportModalOpen","getColumnManagementModal","cloneDeep","handleColumnManagementModalClose","handleColumnManagementModalSave","getComputedItems","getExportModal","computedItems","isAllItems","handleExportModalClose","getPagination","isBottom","page","Pagination","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleColumnManagementModalOpen","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupBySelected","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui"],"sourceRoot":""}