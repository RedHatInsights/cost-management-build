{"version":3,"sources":["webpack://koku-ui/./src/pages/details/awsBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/details/awsBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/details/awsBreakdown/awsBreakdown.tsx","webpack://koku-ui/./src/pages/details/awsBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAwsReportItems.ts","webpack://koku-ui/./src/pages/details/awsDetails/awsDetails.styles.ts","webpack://koku-ui/./src/pages/details/awsDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/details/awsDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/details/awsDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/details/awsDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/details/awsDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/details/awsDetails/awsDetails.tsx","webpack://koku-ui/./src/pages/details/awsDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","awsCostOverview","widgets","CostOverview","withTranslation","connect","awsHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","filterBy","groupBy","groupByOrg","group_by","undefined","newQuery","filter","Object","assign","time_scope_units","time_scope_value","resolution","limit","account","filter_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","instance_type","org_unit_id","region","service","styles","awsDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","marginLeft","marginRight","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","cost","display","alignItems","costLabel","costValue","marginTop","marginBottom","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","costLabelDate","global_Color_200","header","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","label","value","DetailsHeaderBase","onGroupByClicked","providersError","this","showContent","meta","count","hasCost","total","style","Title","headingLevel","size","isDisabled","onItemClicked","options","orgReportPathsType","showOrgs","showTags","Boolean","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","super","columns","rows","buildCostLink","id","orgUnitId","type","JSON","parse","stringify","initDatum","isAllSelected","selectedItems","groupById","getGroupByOrg","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","desc","push","cells","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","disabled","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","toFixed","showPercentage","showValue","iconOverride","className","key","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","orgReportType","tagReportType","DetailsToolbarBase","arguments","defaultState","getCategoryOptions","orgReport","tagReport","fetchOrg","fetchTag","categoryOptions","isBulkSelectDisabled","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","showBulkSelect","showExport","showFilter","orgReportFetchStatus","tagReportFetchStatus","DetailsToolbar","offset","AwsDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","isOpen","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","slice","_event","newItems","pageNumber","sortType","isSortAscending","hasCurrentMonthData","result","provider","current_month_data","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"c984dc272d9ffef1ef5f.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsCostOverviewSelectors } from 'store/costOverview/awsCostOverview';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsCostOverviewSelectors.selectWidgets(state),\n        widgets: awsCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsHistoricalDataSelectors } from 'store/historicalData/awsHistoricalData';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: awsHistoricalDataSelectors.selectWidgets(state),\n        widgets: awsHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/details/components/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.awsDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = queryFromRoute;\n    const filterBy = getGroupByValue(query);\n    const groupBy = getGroupById(query);\n    const groupByOrg = query && query.group_by && query.group_by[orgUnitIdKey] ? query.group_by[orgUnitIdKey] : undefined;\n    const newQuery = {\n        filter: Object.assign({ time_scope_units: 'month', time_scope_value: -1, resolution: 'monthly', limit: 3 }, (query && query.filter && query.filter.account && { ['account']: query.filter.account })),\n        filter_by: query ? query.filter_by : undefined,\n        group_by: Object.assign(Object.assign({}, (groupByOrg && { [orgUnitIdKey]: groupByOrg })), (groupBy && { [groupBy]: filterBy })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { filterBy: filterBy, groupBy: groupBy, query: query, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.aws_details'),\n        filterBy,\n        groupBy,\n        historicalDataComponent: React.createElement(HistoricalData, { filterBy: filterBy, groupBy: groupBy, query: query }),\n        providers,\n        providersFetchStatus,\n        providerType: \"aws\" /* aws */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"aws\" /* aws */,\n        title: query[breakdownTitleKey] ? query[breakdownTitleKey] : filterBy,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AwsBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AwsBreakdown;\n","import AwsBreakdown from './awsBreakdown';\nexport default AwsBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    awsDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_lg.var,\n        backgroundColor: global_BackgroundColor_light_100.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { GroupBy } from 'pages/details/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst orgReportPathsType = \"aws\" /* aws */;\nconst tagReportPathsType = \"aws\" /* aws */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('navigation.aws_details')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, showOrgs: true, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0)),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './awsDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery, getQueryRoute } from 'api/queries/awsQuery';\nimport { breakdownDescKey, breakdownTitleKey, orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/details/components/actions/actions';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"aws\" /* aws */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.buildCostLink = ({ description, groupByOrg, id, orgUnitId, title, type, }) => {\n            const { groupBy, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), (description && description !== title && { [breakdownDescKey]: description })), (title && { [breakdownTitleKey]: title })), (groupByOrg && orgUnitId && { [orgUnitIdKey]: orgUnitId })), { group_by: {\n                    [groupBy]: id,\n                } });\n            if (!newQuery.filter) {\n                newQuery.filter = {};\n            }\n            if (type === 'account') {\n                newQuery.filter.account = id;\n                newQuery.group_by = {\n                    [orgUnitIdKey]: groupByOrg,\n                };\n            }\n            else if (type === 'organizational_unit') {\n                newQuery.group_by = {\n                    [orgUnitIdKey]: id,\n                };\n            }\n            return `${paths.awsDetailsBreakdown}?${getQueryRoute(newQuery)}`;\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = this.getGroupByOrg();\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        title: groupByOrg ? t('aws_details.name_column_title') : t('aws_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                let name = (React.createElement(Link, { to: this.buildCostLink({\n                        description: item.id,\n                        groupByOrg,\n                        id: item.id,\n                        orgUnitId: this.getGroupByOrg(),\n                        title: item.label,\n                        type: item.type,\n                    }) }, label));\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index, disabled = false) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, isDisabled: disabled, item: item, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('aws_details.empty_state'))));\n        };\n        this.getGroupByOrg = () => {\n            const { query } = this.props;\n            let groupByOrg;\n            for (const groupBy of Object.keys(query.group_by)) {\n                if (groupBy === orgUnitIdKey) {\n                    groupByOrg = query.group_by[orgUnitIdKey];\n                    break;\n                }\n            }\n            return groupByOrg;\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/awsQuery';\nimport { orgUnitIdKey, tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst orgReportPathsType = \"aws\" /* aws */;\nconst orgReportType = \"org\" /* org */;\nconst tagReportPathsType = \"aws\" /* aws */;\nconst tagReportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, t, tagReport } = this.props;\n            const options = [\n                { name: t('filter_by.values.account'), key: 'account' },\n                { name: t('filter_by.values.service'), key: 'service' },\n                { name: t('filter_by.values.region'), key: 'region' },\n            ];\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: t('filter_by.values.org_unit_id'),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: t('filter_by.values.tag'), key: tagKey });\n            }\n            return options;\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, queryString } = this.props;\n        fetchOrg(orgReportPathsType, orgReportType, queryString);\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgReport, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchOrg(orgReportPathsType, orgReportType, queryString);\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, orgReport, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n    // key_only: true\n    });\n    const orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, queryString);\n    const orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, queryString);\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        orgReport,\n        orgReportFetchStatus,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbar = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/awsQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { addQueryFilter, getGroupByTagKey, removeQueryFilter } from 'pages/details/common/detailsUtils';\nimport { ExportModal } from 'pages/details/components/export/exportModal';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAwsReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"aws\" /* aws */;\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: {\n                    [groupByKey]: value,\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = () => {\n            const { providers } = this.props;\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.aws_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"aws\" /* aws */, title: title });\n            }\n            if (!this.hasCurrentMonthData()) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.awsDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetails from './awsDetails';\nexport default AwsDetails;\n"],"sourceRoot":""}