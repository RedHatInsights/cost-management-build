{"version":3,"sources":["webpack://koku-ui/./src/pages/details/ocpBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/details/ocpBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/details/ocpBreakdown/ocpBreakdown.tsx","webpack://koku-ui/./src/pages/details/ocpBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedOcpReportItems.ts","webpack://koku-ui/./src/pages/details/ocpDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/details/ocpDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/details/ocpDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/details/ocpDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/details/ocpDetails/ocpDetails.styles.ts","webpack://koku-ui/./src/pages/details/ocpDetails/ocpDetails.tsx","webpack://koku-ui/./src/pages/details/ocpDetails/index.ts"],"names":["mapStateToProps","state","props","selectWidgets","ocpCostOverview","widgets","CostOverview","withTranslation","connect","ocpHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","query","location","search","filterBy","groupBy","newQuery","Object","assign","undefined","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","t","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","project","cluster","node","baseQuery","delta","filter","time_scope_units","time_scope_value","resolution","groupByOptions","label","value","DetailsHeaderBase","super","arguments","this","defaultState","onGroupByClicked","providersError","showContent","meta","count","cost","supplementaryCost","infrastructureCost","total","hasCost","hasSupplementaryCost","supplementary","hasInfrastructureCost","infrastructure","formatValue","units","style","Title","headingLevel","size","isDisabled","onItemClicked","options","showTags","Boolean","Tooltip","content","enableFlip","Popover","bodyContent","Button","variant","ButtonVariant","DetailsHeader","styles","emptyState","backgroundColor","global_BackgroundColor_light_100","display","justifyContent","paddingTop","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","color","global_disabled_color_100","fontSize","global_FontSize_xs","DetailsTableBase","columns","rows","buildCostLink","group_by","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","map","item","index","monthOverMonth","getMonthOverMonthCost","InfrastructureCost","getInfrastructureCost","getSupplementaryCost","getTotalCost","actions","getActions","name","Link","to","toString","id","desc","push","cells","isOpen","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","textAlign","Spinner","setState","sortBy","showPriceListOption","getEmptyState","values","filter_by","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","percentValue","toFixed","key","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","ininfoArrow","getSortBy","direction","SortByDirection","order_by","c","column","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","prevProps","currentReport","data","JSON","stringify","previousReport","isLoading","Table","canSelectAll","onSelect","gridBreakPoint","TableHeader","TableBody","length","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","option","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","pagination","showBulkSelect","showExport","showFilter","tagReportFetchStatus","DetailsToolbar","paddingBottom","global_spacer_lg","ocpDetails","minHeight","paginationContainer","marginLeft","marginRight","padding","global_spacer_md","tableContainer","limit","offset","OcpDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","hasCurrentMonthData","result","provider","current_month_data","updateReport","prevState","noReport","noLocation","reset","pathname","queryFromRoute"],"mappings":"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","file":"d6ec252bf506dd94f24d.bundle.js","sourcesContent":["import { CostOverviewBase } from 'pages/details/components/costOverview/costOverviewBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCostOverviewSelectors } from 'store/costOverview/ocpCostOverview';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpCostOverviewSelectors.selectWidgets(state),\n        widgets: ocpCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = withTranslation()(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/details/components/historicalData/historicalDataBase';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpHistoricalDataSelectors } from 'store/historicalData/ocpHistoricalData';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: ocpHistoricalDataSelectors.selectWidgets(state),\n        widgets: ocpHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = withTranslation()(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport BreakdownBase from 'pages/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/details/components/utils/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.ocpDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = queryFromRoute;\n    const filterBy = getGroupByValue(query);\n    const groupBy = getGroupById(query);\n    const newQuery = Object.assign(Object.assign({}, query), { [breakdownDescKey]: undefined });\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { filterBy: filterBy, groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.t('navigation.ocp_details'),\n        filterBy,\n        groupBy,\n        historicalDataComponent: React.createElement(HistoricalData, { filterBy: filterBy, groupBy: groupBy }),\n        providers,\n        providersFetchStatus,\n        providerType: \"ocp\" /* ocp */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"ocp\" /* ocp */,\n        title: filterBy,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst OcpBreakdown = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default OcpBreakdown;\n","import OcpBreakdown from './ocpBreakdown';\nexport default OcpBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { Button, ButtonVariant, Popover, Title, Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { getQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { GroupBy } from 'pages/details/components/groupBy/groupBy';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatValue } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\nconst tagReportPathsType = \"ocp\" /* ocp */;\nclass DetailsHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, t } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        let cost = React.createElement(EmptyValueState, null);\n        let supplementaryCost = React.createElement(EmptyValueState, null);\n        let infrastructureCost = React.createElement(EmptyValueState, null);\n        if (report && report.meta && report.meta.total) {\n            const hasCost = report.meta.total.cost && report.meta.total.cost.total;\n            const hasSupplementaryCost = report.meta.total.supplementary && report.meta.total.supplementary.total;\n            const hasInfrastructureCost = report.meta.total.infrastructure && report.meta.total.infrastructure.total;\n            cost = formatValue(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD');\n            supplementaryCost = formatValue(hasSupplementaryCost ? report.meta.total.supplementary.total.value : 0, hasSupplementaryCost ? report.meta.total.supplementary.total.units : 'USD');\n            infrastructureCost = formatValue(hasInfrastructureCost ? report.meta.total.infrastructure.total.value : 0, hasInfrastructureCost ? report.meta.total.infrastructure.total.units : 'USD');\n        }\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.title, size: \"2xl\" }, t('ocp_details.title')),\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType })),\n            Boolean(showContent) && (React.createElement(\"div\", { style: styles.cost },\n                React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: \"4xl\" },\n                    React.createElement(Tooltip, { content: t('ocp_details.total_cost_tooltip', {\n                            supplementaryCost,\n                            infrastructureCost,\n                        }), enableFlip: true },\n                        React.createElement(\"span\", null, cost))),\n                React.createElement(\"div\", { style: styles.costLabel },\n                    React.createElement(\"div\", { style: styles.costLabelUnit },\n                        t('ocp_details.total_cost'),\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": t('ocp_details.supplementary_aria_label'), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('ocp_details.supplementary_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.supplementary_cost_desc')),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, t('ocp_details.infrastructure_cost_title')),\n                                    React.createElement(\"p\", null, t('ocp_details.infrastructure_cost_desc'))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, { style: styles.info }))))),\n                    React.createElement(\"div\", { style: styles.costLabelDate }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = withTranslation()(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './detailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/js/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery, getQueryRoute } from 'api/queries/ocpQuery';\nimport { breakdownDescKey, tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport { Actions } from 'pages/details/components/actions/actions';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"ocp\" /* ocp */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.buildCostLink = (label, description) => {\n            const { groupBy, query } = this.props;\n            const newQuery = Object.assign(Object.assign(Object.assign({}, query), (description && description !== label && { [breakdownDescKey]: description })), { group_by: {\n                    [groupBy]: label,\n                } });\n            return `${paths.ocpDetailsBreakdown}?${getQueryRoute(newQuery)}`;\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    // Sorting with tag keys is not supported\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        title: t('ocp_details.supplementary_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: t('ocp_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('ocp_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'infrastructure_cost',\n                        title: t('ocp_details.infrastructure_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'supplementary_cost',\n                        title: t('ocp_details.supplementary_cost_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('ocp_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const InfrastructureCost = this.getInfrastructureCost(item, index);\n                const supplementaryCost = this.getSupplementaryCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = React.createElement(Link, { to: this.buildCostLink(label.toString(), item.id) }, label);\n                if (label === `no-${groupById}` || label === `no-${groupByTagKey}`) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, InfrastructureCost) },\n                        { title: React.createElement(\"div\", null, supplementaryCost) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return (React.createElement(Actions, { groupBy: groupBy, item: item, providerType: \"ocp\" /* ocp */, query: query, reportPathsType: reportPathsType, showPriceListOption: groupBy === 'cluster' }));\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_details.empty_state'))));\n        };\n        this.getSupplementaryCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.supplementary.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.supplementary.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getInfrastructureCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.infrastructure.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.infrastructure.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value));\n            const percentage = item.delta_percent !== null ? Math.abs(item.delta_percent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? t('percent', { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.ininfoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: percentValue,\n                }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = withTranslation()(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/ocpQuery';\nimport { tagKey } from 'api/queries/query';\nimport { DataToolbar } from 'pages/details/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"ocp\" /* ocp */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { tagReport, t } = this.props;\n            const options = [\n                { name: t('filter_by.values.cluster'), key: 'cluster' },\n                { name: t('filter_by.values.node'), key: 'node' },\n                { name: t('filter_by.values.project'), key: 'project' },\n                { name: t('filter_by.values.tag'), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagReport,\n        tagReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbar = withTranslation()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    ocpDetails: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { addQueryFilter, getGroupByTagKey, removeQueryFilter } from 'pages/details/common/detailsUtils';\nimport { ExportModal } from 'pages/details/components/export/exportModal';\nimport Loading from 'pages/state/loading';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedOcpReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport NoData from '../../state/noData';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { styles } from './ocpDetails.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        project: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"ocp\" /* ocp */;\nclass OcpDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        // Ensure at least one source provider has data available\n        this.hasCurrentMonthData = () => {\n            const { providers } = this.props;\n            let result = false;\n            if (providers && providers.data) {\n                for (const provider of providers.data) {\n                    if (provider.current_month_data) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n            return result;\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, t } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = t('navigation.ocp_details');\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"ocp\" /* ocp */, title: title });\n            }\n            if (!this.hasCurrentMonthData()) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.ocpDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nexport default withTranslation()(connect(mapStateToProps, mapDispatchToProps)(OcpDetails));\n","import OcpDetails from './ocpDetails';\nexport default OcpDetails;\n"],"sourceRoot":""}