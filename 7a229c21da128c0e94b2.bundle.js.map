{"version":3,"sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/costOverview.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/historicalData.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/azureBreakdown.tsx","webpack://koku-ui/./src/pages/views/details/azureBreakdown/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedAzureReportItems.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsHeader.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.styles.ts","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsTable.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/detailsToolbar.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/azureDetails.tsx","webpack://koku-ui/./src/pages/views/details/azureDetails/index.ts","webpack://koku-ui/./src/utils/computedReport/getComputedExplorerReportItems.ts","webpack://koku-ui/./src/pages/views/explorer/explorer.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.styles.ts","webpack://koku-ui/./src/components/charts/costExplorerChart/costExplorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerChart.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerUtils.ts","webpack://koku-ui/./src/pages/views/explorer/explorerChart.tsx","webpack://koku-ui/./src/pages/views/explorer/dateRange.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerFilter.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerHeader.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerTable.styles.ts","webpack://koku-ui/./src/pages/views/explorer/explorerTable.tsx","webpack://koku-ui/./src/pages/views/explorer/explorerToolbar.tsx","webpack://koku-ui/./src/pages/views/explorer/explorer.tsx","webpack://koku-ui/./src/utils/userAccess.ts"],"names":["getUserAccessQuery","query","stringify","encode","indices","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isPerspectiveOpen","state","Object","assign","getDropDownItems","intl","options","props","map","option","DropdownItem","component","key","value","onClick","handleClick","formatMessage","label","getCurrentLabel","currentItem","getDropDown","isDisabled","dropdownItems","length","style","Dropdown","onSelect","handleSelect","toggle","DropdownToggle","onToggle","handleToggle","isOpen","onItemClicked","setState","render","Title","headingLevel","size","messages","Perspective","injectIntl","mapStateToProps","selectWidgets","azureCostOverview","widgets","CostOverview","connect","azureHistoricalData","HistoricalData","detailsURL","reportType","reportPathsType","location","search","groupBy","groupByValue","newQuery","filter","resolution","time_scope_units","time_scope_value","filter_by","undefined","group_by","queryString","report","reportError","reportFetchStatus","providersQueryString","providers","providersFetchStatus","costOverviewComponent","description","emptyStateTitle","historicalDataComponent","providerType","tagReportPathsType","title","mapDispatchToProps","fetchReport","getIdKeyForGroupBy","subscription_guid","instance_type","resource_location","service_name","azureDetails","minHeight","content","paddingBottom","global_spacer_lg","paddingTop","paginationContainer","pagination","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_md","tableContainer","costValue","costLabelUnit","fontSize","global_FontSize_sm","color","global_Color_100","dateTitle","textAlign","header","headerContent","justifyContent","global_spacer_sm","baseQuery","delta","groupByOptions","DetailsHeaderBase","onGroupByClicked","providersError","showContent","meta","count","hasCost","total","cost","TitleSizes","showTags","Boolean","format","units","DetailsHeader","emptyState","global_spacer_3xl","height","width","infoArrow","position","infoArrowDesc","bottom","global_spacer_xs","infoDescription","global_disabled_color_100","global_FontSize_xs","DetailsTableBase","columns","rows","initDatum","isAllSelected","selectedItems","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","idKey","item","index","monthOverMonth","getMonthOverMonthCost","getTotalCost","actions","getActions","name","Link","to","basePath","toString","id","selectable","desc","push","cells","disableSelection","selected","find","val","loadingRows","heightAuto","colSpan","Bullseye","Spinner","sortBy","getEmptyState","values","showMargin","EmptyState","EmptyStateIcon","icon","EmptyStateBody","keys","tagIndex","indexOf","substring","Math","abs","delta_value","percentage","delta_percent","showPercentage","showValue","iconOverride","className","getSortBy","direction","SortByDirection","order_by","c","column","percentValue","toFixed","handleOnSelect","event","isSelected","rowId","onSelected","items","row","handleOnSort","onSort","bind","componentDidMount","componentDidUpdate","prevProps","currentReport","data","JSON","previousReport","isLoading","Table","canSelectAll","gridBreakPoint","TableHeader","TableBody","DetailsTable","tagReportType","DetailsToolbarBase","getCategoryOptions","tagReport","fetchTag","categoryOptions","isExportDisabled","itemsPerPage","itemsTotal","onBulkSelected","onExportClicked","onFilterAdded","onFilterRemoved","resourcePathsType","showBulkSelect","showExport","showFilter","tagFetchStatus","DetailsToolbarConnect","DetailsToolbar","limit","offset","AzureDetails","stateProps","dispatchProps","isExportModalOpen","getComputedItems","getExportModal","computedItems","isAllItems","onClose","handleExportModalClose","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","variant","PaginationVariant","widgetId","getTable","handleSelected","handleSort","getToolbar","handleBulkSelected","handleExportModalOpen","handleFilterAdded","handleFilterRemoved","action","filterType","filterValue","history","filteredQuery","replace","getRouteForQuery","handleGroupByClick","groupByKey","parse","_event","newItems","pageNumber","sortType","isSortAscending","updateReport","resetState","prevState","noReport","noLocation","reset","pathname","queryFromRoute","ui","account","cluster","node","org_unit_id","project","region","service","chartContainer","paddingRight","chartContent","explorer","tableContent","chartStyles","colorScale","chart_color_blue_300","chart_color_gold_300","chart_color_green_300","chart_color_purple_300","chart_color_orange_300","chart_color_cyan_300","yAxis","axisLabel","grid","stroke","ticks","yAxisAlt","tickLabels","xAxis","CostExplorerChartBase","containerRef","observer","noop","hiddenSeries","Set","top1stData","top2ndData","top3rdData","top4thData","top5thData","top6thData","series","getTruncatedString","childName","initDatumChildName","legendItem","symbol","fill","tooltip","cursorVoronoiContainer","getCursorVoronoiContainer","getUnits","datum","getAdjustedContainerHeight","adjustContainerHeight","containerHeight","adjustedContainerHeight","getBarWidth","domainPadding","maxWidth","maxValue","forEach","s","sectionWidth","getChart","barWidth","has","y","ChartBar","formatter","formatOptions","CursorVoronoiContainer","cursorDimension","labels","mouseFollowTooltips","voronoiDimension","voronoiPadding","left","right","top","getDomain","domain","max","getEvents","chartNames","isDataHidden","isHidden","legendName","onLegendClick","handleLegendClick","getLegend","ChartLegend","gutter","responsive","getTickValues","x","tickValues","modVal","i","str","substr","maxChars","getTickValue","t","handleResize","clientWidth","current","componentWillUnmount","container","disable","labelComponent","ChartLegendTooltip","legendData","day","ref","Chart","containerComponent","events","legendAllowWrap","legendComponent","legendPosition","theme","themeColor","ChartTheme","ChartStack","ChartAxis","C","fixLabelOverlap","dependentAxis","tickFormat","CostExplorerChart","global_spacer_2xl","chartSkeleton","costChart","legendSkeleton","titleContainer","trendChart","usageChart","dateRangeOptions","insights","chrome","isBeta","groupByAwsOptions","groupByAzureOptions","groupByGcpOptions","groupByIbmOptions","groupByOcpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpCloudOptions","ocpOptions","getComputedReportItemType","perspective","result","getComputedReportItemValueType","getDateRange","dateRangeType","endDate","Date","startDate","dateRange","setDate","setMonth","getMonth","end_date","start_date","getDateRangeDefault","getGroupByDefault","getGroupByOptions","getOrgReportPathsType","getReportType","getReportPathsType","getTagReportPathsType","ExplorerChartBase","createReportDatum","computedItem","reportItem","reportItemValue","computedItemDate","date","xVal","getDate","month","yVal","parseFloat","_y","getChartDatums","computedReportItemType","computedReportItemValueType","chartDatums","datums","Map","Array","from","padChartDatums","getGroupBy","daily","groupByOrg","getSkeleton","Skeleton","skeleton","padDate","chartDatum","ExplorerChartConnect","ExplorerChart","withRouter","DateRangeBase","isDateRangeOpen","DateRange","toolbarContainer","orgReportType","ExplorerFilterBase","orgReport","getDefaultDateRange","currentDateRange","handleDateRangeClick","fetchOrg","orgQueryString","orgReportPathsType","tagQueryString","orgReportFetchStatus","tagReportFetchStatus","ExplorerFilterConnect","ExplorerFilter","costLabel","costLabelDate","global_Color_200","costType","paddingLeft","perspectiveContainer","ExplorerHeaderBase","getPerspective","currentPerspective","aws","isAwsAvailable","azure","isAzureAvailable","gcp","isGcpAvailable","ibm","isIbmAvailable","ocp","isOcpAvailable","handlePerspectiveClick","onPerspectiveClicked","awsProviders","awsProvidersFetchStatus","userAccess","azureProviders","azureProvidersFetchStatus","gcpProviders","gcpProvidersFetchStatus","ibmProviders","ibmProvidersFetchStatus","ibmUserAccess","ocpProviders","ocpProvidersFetchStatus","noProviders","getResourcePathsType","showOrgs","userAccessQueryString","userAccessError","userAccessFetchStatus","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ExplorerHeader","overflowX","ExplorerTableBase","cellTransforms","nowrap","currentDate","mapId","isSortable","rowItem","get","set","mapIdDate","selectItem","sort","a","b","unshift","ExplorerTableConnect","ExplorerTable","ExplorerToolbarBase","isBulkSelectDisabled","ExplorerToolbarConnect","ExplorerToolbar","Explorer","showAggregateType","showTimeScope","slice","newPerspective","getPerspectiveDefault","hasAccess","userAccessType","isArray","d","type","access","hasProviders","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"mappings":"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","file":"7a229c21da128c0e94b2.bundle.js","sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isPerspectiveOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { intl, options } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, intl.formatMessage(option.label, { value: option.value }))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, intl, options } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = intl.formatMessage(option.label, { value: option.value });\n                    break;\n                }\n            }\n            return label;\n        };\n        this.getDropDown = () => {\n            const { intl, isDisabled, options } = this.props;\n            const { isPerspectiveOpen } = this.state;\n            const dropdownItems = this.getDropDownItems();\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isPerspectiveOpen, dropdownItems: dropdownItems }));\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isPerspectiveOpen: !this.state.isPerspectiveOpen,\n            });\n        };\n        this.handleToggle = isPerspectiveOpen => {\n            this.setState({\n                isPerspectiveOpen,\n            });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getDropDown()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { CostOverviewBase } from 'pages/views/details/components/costOverview/costOverviewBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureCostOverviewSelectors } from 'store/breakdown/costOverview/azureCostOverview';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureCostOverviewSelectors.selectWidgets(state),\n        widgets: azureCostOverviewSelectors.selectCurrentWidgets(state),\n    };\n});\nconst CostOverview = injectIntl(connect(mapStateToProps, {})(CostOverviewBase));\nexport { CostOverview };\n","import { HistoricalDataBase } from 'pages/views/details/components/historicalData/historicalDataBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { azureHistoricalDataSelectors } from 'store/breakdown/historicalData/azureHistoricalData';\nimport { createMapStateToProps } from 'store/common';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        selectWidgets: azureHistoricalDataSelectors.selectWidgets(state),\n        widgets: azureHistoricalDataSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalData = injectIntl(connect(mapStateToProps, {})(HistoricalDataBase));\nexport { HistoricalData };\n","import { getQuery, parseQuery } from 'api/queries/ocpQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { breakdownDescKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport BreakdownBase from 'pages/views/details/components/breakdown/breakdownBase';\nimport { getGroupById, getGroupByValue } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { paths } from 'routes';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { CostOverview } from './costOverview';\nimport { HistoricalData } from './historicalData';\nconst detailsURL = paths.azureDetails;\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const query = parseQuery(location.search);\n    const groupBy = getGroupById(query);\n    const groupByValue = getGroupByValue(query);\n    const newQuery = {\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n        filter_by: Object.assign(Object.assign({}, (query && query.filter_by && query.filter_by)), (groupBy && { [groupBy]: undefined })),\n        group_by: Object.assign({}, (groupBy && { [groupBy]: groupByValue })),\n    };\n    const queryString = getQuery(newQuery);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        costOverviewComponent: React.createElement(CostOverview, { groupBy: groupBy, report: report }),\n        description: query[breakdownDescKey],\n        detailsURL,\n        emptyStateTitle: props.intl.formatMessage(messages.AzureDetailsTitle),\n        groupBy,\n        groupByValue,\n        historicalDataComponent: React.createElement(HistoricalData, null),\n        providers,\n        providersFetchStatus,\n        providerType: \"azure\" /* azure */,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        reportType,\n        reportPathsType,\n        tagReportPathsType: \"azure\" /* azure */,\n        title: groupByValue,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst AzureCost = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BreakdownBase));\nexport default AzureCost;\n","import AzureBreakdown from './azureBreakdown';\nexport default AzureBreakdown;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    azureDetails: {\n        minHeight: '100%',\n    },\n    content: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n};\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    costValue: {\n        marginTop: global_spacer_lg.var,\n        marginBottom: 0,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    dateTitle: {\n        textAlign: 'end',\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './detailsHeader.styles';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst groupByOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nconst tagReportPathsType = \"azure\" /* azure */;\nclass DetailsHeaderBase extends React.Component {\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, intl } = this.props;\n        const showContent = report && !providersError && providers && providers.meta && providers.meta.count > 0;\n        const hasCost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total;\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.AzureDetailsTitle)),\n                React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(GroupBy, { getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: !showContent, onItemClicked: onGroupByClicked, options: groupByOptions, showTags: true, tagReportPathsType: tagReportPathsType }),\n                Boolean(showContent) && (React.createElement(\"div\", null,\n                    React.createElement(Title, { headingLevel: \"h2\", style: styles.costValue, size: TitleSizes['4xl'] }, formatCurrency(hasCost ? report.meta.total.cost.total.value : 0, hasCost ? report.meta.total.cost.total.units : 'USD')),\n                    React.createElement(\"div\", { style: styles.dateTitle }, getSinceDateRangeString()))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n    };\n});\nconst DetailsHeader = injectIntl(connect(mapStateToProps, {})(DetailsHeaderBase));\nexport { DetailsHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n};\n","import './azureDetailsTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/azureQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport messages from 'locales/messages';\nimport { Actions } from 'pages/views/details/components/actions/actions';\nimport { getBreakdownPath } from 'pages/views/utils/paths';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { paths } from 'routes';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { getForDateRangeString, getNoDataForDateRangeString } from 'utils/dateRange';\nimport { formatCurrency, formatPercentage } from 'utils/format';\nimport { styles } from './detailsTable.styles';\nconst reportPathsType = \"azure\" /* azure */;\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { isAllSelected, query, report, selectedItems, intl } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: intl.formatMessage(messages.TagNames),\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById,\n                        title: intl.formatMessage(messages.DetailsResourceNames, { value: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: intl.formatMessage(messages.MonthOverMonthChange),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: intl.formatMessage(messages.Cost),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item);\n                let name = (React.createElement(Link, { to: getBreakdownPath({\n                        basePath: paths.azureDetailsBreakdown,\n                        label: label.toString(),\n                        description: item.id,\n                        groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById,\n                        query,\n                    }) }, label));\n                const selectable = !(label === `no-${groupById}` || label === `no-${groupByTagKey}`);\n                if (!selectable) {\n                    name = label;\n                }\n                const desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                rows.push({\n                    cells: [\n                        {\n                            title: (React.createElement(\"div\", null,\n                                name,\n                                desc)),\n                        },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    disableSelection: !selectable,\n                    isOpen: false,\n                    item,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === item.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(Actions, { groupBy: groupBy, item: item, query: query, reportPathsType: reportPathsType });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagPrefix);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagPrefix.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { intl } = this.props;\n            const value = formatCurrency(Math.abs(item.cost.total.value - item.delta_value), item.cost.total.units);\n            const percentage = item.delta_percent !== null ? formatPercentage(Math.abs(item.delta_percent)) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.delta_percent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.delta_percent !== null && item.delta_value < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.delta_percent !== null && item.delta_value > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: \"monthOverMonthOverride\" },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        showPercentage ? intl.formatMessage(messages.Percent, { value: percentage }) : React.createElement(EmptyValueState, null),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value > 0) && (React.createElement(\"span\", { className: \"fa fa-sort-up\", style: styles.infoArrow, key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage && item.delta_percent !== null && item.delta_value < 0) && (React.createElement(\"span\", { className: \"fa fa-sort-down\", style: Object.assign(Object.assign({}, styles.infoArrow), styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { style: styles.infoDescription, key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                        index = c + 1;\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, intl } = this.props;\n            const cost = report && report.meta && report.meta.total && report.meta.total.cost && report.meta.total.cost.total\n                ? report.meta.total.cost.total.value\n                : 0;\n            const percentValue = cost === 0 ? cost.toFixed(2) : ((item.cost.total.value / cost) * 100).toFixed(2);\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost.total.value, item.cost.total.units),\n                React.createElement(\"div\", { style: styles.infoDescription, key: `total-cost-${index}` }, intl.formatMessage(messages.PercentOfCost, { value: percentValue }))));\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 1].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.AzureDetailsTableAriaLabel), canSelectAll: false, cells: columns, className: \"tableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\nconst DetailsTable = injectIntl(DetailsTableBase);\nexport { DetailsTable };\n","import { getQuery } from 'api/queries/azureQuery';\nimport { tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { isEqual } from 'utils/equal';\nconst tagReportType = \"tag\" /* tag */;\nconst tagReportPathsType = \"azure\" /* azure */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { intl, tagReport } = this.props;\n            const options = [\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'subscription_guid' }),\n                    key: 'subscription_guid',\n                },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'service_name' }), key: 'service_name' },\n                {\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'resource_location' }),\n                    key: 'resource_location',\n                },\n                { name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey },\n            ];\n            return tagReport && tagReport.data && tagReport.data.length\n                ? options\n                : options.filter(option => option.key !== tagKey);\n        };\n    }\n    componentDidMount() {\n        const { fetchTag, queryString } = this.props;\n        fetchTag(tagReportPathsType, tagReportType, queryString);\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchTag, query, queryString, tagReport } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchTag(tagReportPathsType, tagReportType, queryString);\n        }\n        if (!isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n    }\n    render() {\n        const { groupBy, isAllSelected, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, selectedItems, tagReport, } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, groupBy: groupBy, isAllSelected: isAllSelected, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, resourcePathsType: \"azure\" /* azure */, selectedItems: selectedItems, showBulkSelect: true, showExport: true, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, queryString);\n    const tagFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, queryString);\n    return {\n        queryString,\n        tagFetchStatus,\n        tagReport,\n    };\n});\nconst mapDispatchToProps = {\n    fetchTag: tagActions.fetchTag,\n};\nconst DetailsToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase);\nconst DetailsToolbar = injectIntl(DetailsToolbarConnect);\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/queries/azureQuery';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { tagPrefix } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasCurrentMonthData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureProvidersQuery, providersSelectors } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedAzureReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { styles } from './azureDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        subscription_guid: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nconst reportPathsType = \"azure\" /* azure */;\nclass AzureDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n        };\n        this.getExportModal = (computedItems) => {\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: reportPathsType }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { query, report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(this.getRouteForQuery(filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        const { history } = this.props;\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n        }\n        return `${history.location.pathname}?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersFetchStatus, query, report, reportError, reportFetchStatus, intl } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const computedItems = this.getComputedItems();\n        const title = intl.formatMessage(messages.AzureDetailsTitle);\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (providersFetchStatus === 1 /* inProgress */ && reportFetchStatus === 1 /* inProgress */) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (providersFetchStatus === 2 /* complete */ && reportFetchStatus === 2 /* complete */) {\n            // API returns empy data array for no sources\n            const noProviders = providers && providers.meta && providers.meta.count === 0 && providersFetchStatus === 2 /* complete */;\n            if (noProviders) {\n                return React.createElement(NoProviders, { providerType: \"azure\" /* azure */, title: title });\n            }\n            if (!hasCurrentMonthData(providers)) {\n                return React.createElement(NoData, { title: title });\n            }\n        }\n        return (React.createElement(\"div\", { style: styles.azureDetails },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick, report: report }),\n            React.createElement(\"div\", { style: styles.content },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    const providersQueryString = getProvidersQuery(azureProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"azure\" /* azure */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, providersQueryString);\n    return {\n        providers,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(AzureDetails));\n","import AzureDetails from './azureDetails';\nexport default AzureDetails;\n","export function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    if (groupBy.org_unit_id) {\n        return 'org_unit_id';\n    }\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    return 'date';\n}\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    chartContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n        paddingRight: global_spacer_lg.value,\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n    chartContent: {\n        paddingTop: global_spacer_lg.value,\n    },\n    explorer: {\n        minHeight: '100%',\n    },\n    paginationContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_lg.value,\n        marginRight: global_spacer_lg.value,\n    },\n    tableContent: {\n        paddingBottom: global_spacer_lg.value,\n        paddingTop: global_spacer_lg.value,\n    },\n};\n","import { chart_color_blue_300 } from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport { chart_color_cyan_300 } from '@patternfly/react-tokens/dist/js/chart_color_cyan_300';\nimport { chart_color_gold_300 } from '@patternfly/react-tokens/dist/js/chart_color_gold_300';\nimport { chart_color_green_300 } from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { chart_color_orange_300 } from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { chart_color_purple_300 } from '@patternfly/react-tokens/dist/js/chart_color_purple_300';\nexport const chartStyles = {\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    colorScale: [\n        chart_color_blue_300.value,\n        chart_color_gold_300.value,\n        chart_color_green_300.value,\n        chart_color_purple_300.value,\n        chart_color_orange_300.value,\n        chart_color_cyan_300.value,\n    ],\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n    yAxisAlt: {\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\n","import 'components/charts/common/charts-common.scss';\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartLegendTooltip, ChartStack, ChartThemeColor, createContainer, getInteractiveLegendEvents, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getMaxValue } from 'components/charts/common/chartDatumUtils';\nimport { getChartNames, getLegendData, getResizeObserver, getTooltipLabel, initHiddenSeries, isDataAvailable, isDataHidden, isSeriesHidden, } from 'components/charts/common/chartUtils';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { formatCurrencyAbbreviation } from 'utils/format';\nimport { noop } from 'utils/noop';\nimport { chartStyles } from './costExplorerChart.styles';\nclass CostExplorerChartBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.observer = noop;\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            const series = [];\n            if (top1stData && top1stData.length) {\n                const name = this.getTruncatedString(top1stData[0].name);\n                series.push({\n                    childName: 'top1stData',\n                    data: this.initDatumChildName(top1stData, 'top1stData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[0],\n                        },\n                    },\n                });\n            }\n            if (top2ndData && top2ndData.length) {\n                const name = this.getTruncatedString(top2ndData[0].name);\n                series.push({\n                    childName: 'top2ndData',\n                    data: this.initDatumChildName(top2ndData, 'top2ndData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[1],\n                        },\n                    },\n                });\n            }\n            if (top3rdData && top3rdData.length) {\n                const name = this.getTruncatedString(top3rdData[0].name);\n                series.push({\n                    childName: 'top3rdData',\n                    data: this.initDatumChildName(top3rdData, 'top3rdData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[2],\n                        },\n                    },\n                });\n            }\n            if (top4thData && top4thData.length) {\n                const name = this.getTruncatedString(top4thData[0].name);\n                series.push({\n                    childName: 'top4thData',\n                    data: this.initDatumChildName(top4thData, 'top4thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[3],\n                        },\n                    },\n                });\n            }\n            if (top5thData && top5thData.length) {\n                const name = this.getTruncatedString(top5thData[0].name);\n                series.push({\n                    childName: 'top5thData',\n                    data: this.initDatumChildName(top5thData, 'top5thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[4],\n                        },\n                    },\n                });\n            }\n            if (top6thData && top6thData.length) {\n                const name = this.getTruncatedString(top6thData[0].name);\n                series.push({\n                    childName: 'top6thData',\n                    data: this.initDatumChildName(top6thData, 'top6thData'),\n                    legendItem: {\n                        name,\n                        symbol: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                        tooltip: name,\n                    },\n                    style: {\n                        data: {\n                            fill: chartStyles.colorScale[5],\n                        },\n                    },\n                });\n            }\n            const cursorVoronoiContainer = this.getCursorVoronoiContainer();\n            const units = this.getUnits(series);\n            this.setState({ cursorVoronoiContainer, series, units });\n        };\n        // Adds a child name to help identify hidden data series\n        this.initDatumChildName = (data, childName) => {\n            data.map(datum => (datum.childName = childName));\n            return data;\n        };\n        this.getAdjustedContainerHeight = () => {\n            const { adjustContainerHeight, height, containerHeight = height } = this.props;\n            const { width } = this.state;\n            let adjustedContainerHeight = containerHeight;\n            if (adjustContainerHeight) {\n                if (width > 675 && width < 1250) {\n                    adjustedContainerHeight += 25;\n                }\n                else if (width > 400 && width < 650) {\n                    adjustedContainerHeight += 50;\n                }\n                else if (width <= 400) {\n                    adjustedContainerHeight += 150;\n                }\n            }\n            return adjustedContainerHeight;\n        };\n        // If bar width exceeds max and domainPadding is true, extra width is returned to help center bars horizontally\n        this.getBarWidth = (domainPadding = false) => {\n            const { hiddenSeries, series, width } = this.state;\n            const maxWidth = 200;\n            let maxValue = -1;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        if (s.data.length > maxValue) {\n                            maxValue = s.data.length;\n                        }\n                    }\n                });\n            }\n            // Divide available width into equal sections\n            const sections = maxValue * 2 + 1;\n            const sectionWidth = maxValue > 0 ? width / sections : 0;\n            if (domainPadding) {\n                // Add any extra bar width for domain padding\n                const extraWidth = sectionWidth > maxWidth ? (sectionWidth - maxWidth) * maxValue : 0;\n                return (sectionWidth + extraWidth / 2) * 2;\n            }\n            return sectionWidth > maxWidth ? maxWidth : sectionWidth;\n        };\n        this.getChart = (series, index, barWidth) => {\n            const { hiddenSeries } = this.state;\n            const data = !hiddenSeries.has(index) ? series.data : [{ y: null }];\n            return (React.createElement(ChartBar, { barWidth: barWidth, data: data, key: series.childName, name: series.childName, style: series.style }));\n        };\n        // Returns CursorVoronoiContainer component\n        this.getCursorVoronoiContainer = () => {\n            const { formatter, formatOptions } = this.props;\n            // Note: Container order is important\n            const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n            return (React.createElement(CursorVoronoiContainer, { cursorDimension: \"x\", labels: ({ datum }) => getTooltipLabel(datum, formatter, formatOptions), mouseFollowTooltips: true, voronoiDimension: \"x\", voronoiPadding: {\n                    bottom: 75,\n                    left: 8,\n                    right: 8,\n                    top: 8,\n                } }));\n        };\n        // Returns domain only if max y values are zero\n        this.getDomain = (series, hiddenSeries) => {\n            let maxValue = -1;\n            let domain;\n            if (series) {\n                series.forEach((s, index) => {\n                    if (!isSeriesHidden(hiddenSeries, index) && s.data && s.data.length !== 0) {\n                        const max = getMaxValue(s.data);\n                        maxValue = Math.max(maxValue, max);\n                    }\n                });\n            }\n            if (maxValue <= 0) {\n                domain = { y: [0, 100] };\n            }\n            return domain;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const { hiddenSeries, series } = this.state;\n            const result = getInteractiveLegendEvents({\n                chartNames: getChartNames(series),\n                isDataHidden: data => isDataHidden(series, hiddenSeries, data),\n                isHidden: index => isSeriesHidden(hiddenSeries, index),\n                legendName: 'legend',\n                onLegendClick: props => this.handleLegendClick(props.index),\n            });\n            return result;\n        };\n        this.getLegend = () => {\n            const { hiddenSeries, series } = this.state;\n            return (React.createElement(ChartLegend, { data: getLegendData(series, hiddenSeries), height: 25, gutter: 20, name: \"legend\", responsive: false }));\n        };\n        // This ensures we show every 3rd tick value, including the first and last value\n        //\n        // Note: We're not using Victory's tickCount because it won't always include the last tick value.\n        this.getTickValues = () => {\n            const { top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData } = this.props;\n            // Find the datum with the greatest number of values\n            const allDatums = [top1stData, top2ndData, top3rdData, top4thData, top5thData, top6thData];\n            let datum;\n            allDatums.map(val => {\n                if (!datum || datum.length < val.length) {\n                    datum = val;\n                }\n            });\n            const values = [];\n            datum.map(val => {\n                values.push(val.x);\n            });\n            // Prune tick values\n            const tickValues = [];\n            const modVal = values.length < 6 ? 2 : 3;\n            for (let i = 0; i < values.length; i++) {\n                if (i % modVal === 0 && i + 2 < values.length) {\n                    tickValues.push(values[i]);\n                }\n                else if (values.length < 3 && i + 1 < values.length) {\n                    tickValues.push(values[i]);\n                }\n            }\n            tickValues.push(values[values.length - 1]);\n            return tickValues;\n        };\n        this.getTruncatedString = (str) => {\n            const maxChars = 20;\n            return str.length > maxChars ? str.substr(0, maxChars - 1) + '...' : str;\n        };\n        this.getTickValue = (t) => {\n            const { units } = this.state;\n            return formatCurrencyAbbreviation(t, units);\n        };\n        this.getUnits = (series) => {\n            if (series) {\n                for (const s of series) {\n                    for (const datum of s.data) {\n                        if (datum.units) {\n                            return datum.units;\n                        }\n                    }\n                }\n            }\n            return 'USD';\n        };\n        // Hide each data series individually\n        this.handleLegendClick = (index) => {\n            const hiddenSeries = initHiddenSeries(this.state.series, this.state.hiddenSeries, index);\n            this.setState({ hiddenSeries });\n        };\n        this.handleResize = () => {\n            const { width } = this.state;\n            const { clientWidth = 0 } = this.containerRef.current || {};\n            if (clientWidth !== width) {\n                this.setState({ width: clientWidth });\n            }\n        };\n    }\n    componentDidMount() {\n        this.initDatum();\n        this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.top1stData !== this.props.top1stData ||\n            prevProps.top2ndData !== this.props.top2ndData ||\n            prevProps.top3rdData !== this.props.top3rdData ||\n            prevProps.top4thData !== this.props.top4thData ||\n            prevProps.top5thData !== this.props.top5thData ||\n            prevProps.top6thData !== this.props.top6thData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        if (this.observer) {\n            this.observer();\n        }\n    }\n    render() {\n        const { height, intl, padding = {\n            bottom: 50,\n            left: 40,\n            right: 8,\n            top: 8,\n        }, } = this.props;\n        const { cursorVoronoiContainer, hiddenSeries, series, width } = this.state;\n        // Clone original container. See https://issues.redhat.com/browse/COST-762\n        const container = cursorVoronoiContainer\n            ? React.cloneElement(cursorVoronoiContainer, {\n                disable: !isDataAvailable(series, hiddenSeries),\n                labelComponent: (React.createElement(ChartLegendTooltip, { legendData: getLegendData(series, hiddenSeries, true), title: datum => intl.formatMessage(messages.ChartDayOfTheMonth, { day: datum.x }) })),\n            })\n            : undefined;\n        const barWidth = this.getBarWidth();\n        // Note: For tooltip values to match properly, chart groups must be rendered in the order given as legend data\n        return (React.createElement(\"div\", { className: \"chartOverride\", ref: this.containerRef, style: { height: this.getAdjustedContainerHeight() } },\n            React.createElement(\"div\", { style: { height, width } },\n                React.createElement(Chart, { containerComponent: container, domain: this.getDomain(series, hiddenSeries), domainPadding: { x: this.getBarWidth(true) }, events: this.getEvents(), height: height, legendAllowWrap: true, legendComponent: this.getLegend(), legendData: getLegendData(series, hiddenSeries), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, themeColor: ChartThemeColor.multiOrdered, width: width },\n                    series && series.length > 0 && (React.createElement(ChartStack, null, series.map((s, index) => this.getChart(s, index, barWidth)))),\n                    React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: this.getTickValues(), fixLabelOverlap: true }),\n                    React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis, tickFormat: this.getTickValue })))));\n    }\n}\nconst CostExplorerChart = injectIntl(CostExplorerChartBase);\nexport { CostExplorerChart };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const chartStyles = {\n    chartHeight: 300,\n    chartContainerHeight: 300,\n};\nexport const styles = {\n    chartContainer: {\n        marginLeft: global_spacer_2xl.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    titleContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    trendChart: {\n        marginBottom: global_spacer_sm.value,\n        marginTop: global_spacer_sm.value,\n    },\n    usageChart: {\n        marginTop: global_spacer_sm.value,\n    },\n};\n","import { getQueryRoute } from 'api/queries/query';\nimport { format } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getCurrentMonthDate, getLast30DaysDate, getLast60DaysDate, getLast90DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nexport const baseQuery = {\n    filter: {\n        limit: 10,\n        offset: 0,\n    },\n    filter_by: {},\n    order_by: {\n        cost: 'desc',\n    },\n};\nexport const dateRangeOptions = [\n    { label: messages.ExplorerDateRange, value: 'current_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'previous_month_to_date' },\n    { label: messages.ExplorerDateRange, value: 'last_thirty_days' },\n    { label: messages.ExplorerDateRange, value: 'last_sixty_days' },\n];\n// Todo: Show new features in beta environment only\nif (insights.chrome.isBeta()) {\n    dateRangeOptions.push({ label: messages.ExplorerDateRange, value: 'last_ninety_days' });\n}\nexport const groupByAwsOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByAzureOptions = [\n    { label: 'subscription_guid', value: 'subscription_guid' },\n    { label: 'service_name', value: 'service_name' },\n    { label: 'resource_location', value: 'resource_location' },\n];\nexport const groupByGcpOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByIbmOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'project', value: 'project' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nexport const groupByOcpOptions = [\n    { label: 'cluster', value: 'cluster' },\n    { label: 'node', value: 'node' },\n    { label: 'project', value: 'project' },\n];\n// Infrastructure AWS options\nexport const infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nexport const infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nexport const infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nexport const infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nexport const infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OpenShift options\nexport const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nexport const infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\nexport const infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\n// Ocp options\nexport const ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\nexport const getComputedReportItemType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift supplementary & usage\" perspectives -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getComputedReportItemValueType = (perspective) => {\n    let result;\n    switch (perspective) {\n        // Removed \"OpenShift usage\" perspective -- see https://issues.redhat.com/browse/COST-1722\n        default:\n            result = \"total\" /* total */;\n            break;\n    }\n    return result;\n};\nexport const getDateRange = (dateRangeType) => {\n    const endDate = new Date();\n    const startDate = new Date();\n    let dateRange;\n    switch (dateRangeType) {\n        case \"previous_month_to_date\" /* previousMonthToDate */:\n            startDate.setDate(1); // Required to obtain correct month\n            startDate.setMonth(startDate.getMonth() - 1); // Note: Must include previous and current month\n            dateRange = {\n                end_date: format(endDate, 'yyyy-MM-dd'),\n                start_date: format(startDate, 'yyyy-MM-dd'),\n            };\n            break;\n        case \"last_ninety_days\" /* lastNinetyDays */:\n            dateRange = getLast90DaysDate();\n            break;\n        case \"last_sixty_days\" /* lastSixtyDays */:\n            dateRange = getLast60DaysDate();\n            break;\n        case \"last_thirty_days\" /* lastThirtyDays */:\n            dateRange = getLast30DaysDate();\n            break;\n        case \"current_month_to_date\" /* currentMonthToDate */:\n        default:\n            dateRange = getCurrentMonthDate();\n            break;\n    }\n    return dateRange;\n};\nexport const getDateRangeDefault = (queryFromRoute) => {\n    return queryFromRoute.dateRange || \"current_month_to_date\" /* currentMonthToDate */;\n};\nexport const getPerspectiveDefault = ({ awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ocpProviders, ocpProvidersFetchStatus, queryFromRoute, userAccess, }) => {\n    let result = queryFromRoute.perspective;\n    if (result) {\n        return result;\n    }\n    const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n        azureProvidersFetchStatus === 1 /* inProgress */ ||\n        gcpProvidersFetchStatus === 1 /* inProgress */ ||\n        ibmProvidersFetchStatus === 1 /* inProgress */ ||\n        ocpProvidersFetchStatus === 1 /* inProgress */;\n    if (!isLoading) {\n        if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n            result = \"ocp\" /* ocp */;\n        }\n        else if (isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus)) {\n            result = \"aws\" /* aws */;\n        }\n        else if (isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus)) {\n            result = \"azure\" /* azure */;\n        }\n        else if (isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus)) {\n            result = \"gcp\" /* gcp */;\n        }\n        else if (isIbmAvailable(userAccess, ibmProviders, ibmProvidersFetchStatus)) {\n            result = \"ibm\" /* ibm */;\n        }\n    }\n    return result;\n};\nexport const getGroupByDefault = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n        case \"ibm\" /* ibm */:\n            result = 'account';\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = 'subscription_guid';\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = 'project';\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getGroupByOptions = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n        case \"aws_ocp\" /* awsOcp */:\n            result = groupByAwsOptions;\n            break;\n        case \"azure\" /* azure */:\n        case \"azure_ocp\" /* azureOcp */:\n            result = groupByAzureOptions;\n            break;\n        case \"gcp\" /* gcp */:\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = groupByGcpOptions;\n            break;\n        case \"ibm\" /* ibm */:\n            result = groupByIbmOptions;\n            break;\n        case \"ocp\" /* ocp */:\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = groupByOcpOptions;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getOrgReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getReportType = (perspective) => {\n    let result;\n    switch (perspective) {\n        default:\n            result = \"cost\" /* cost */;\n            break;\n    }\n    return result;\n};\nexport const getReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            result = \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            result = \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            result = \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            result = \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            result = \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            result = \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            result = \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            result = \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            result = \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getResourcePathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n        case \"ibm\" /* ibm */:\n            return \"ibm\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getTagReportPathsType = (perspective) => {\n    let result;\n    switch (perspective) {\n        case \"aws\" /* aws */:\n            return \"aws\" /* aws */;\n            break;\n        case \"aws_ocp\" /* awsOcp */:\n            return \"aws_ocp\" /* awsOcp */;\n            break;\n        case \"azure\" /* azure */:\n            return \"azure\" /* azure */;\n            break;\n        case \"azure_ocp\" /* azureOcp */:\n            return \"azure_ocp\" /* azureOcp */;\n            break;\n        case \"gcp\" /* gcp */:\n            return \"gcp\" /* gcp */;\n            break;\n        case \"gcp_ocp\" /* gcpOcp */:\n            return \"gcp_ocp\" /* gcpOcp */;\n            break;\n        case \"ibm\" /* ibm */:\n            return \"gcp\" /* ibm */;\n            break;\n        case \"ocp\" /* ocp */:\n            return \"ocp\" /* ocp */;\n            break;\n        case \"ocp_cloud\" /* ocpCloud */:\n            return \"ocp_cloud\" /* ocpCloud */;\n            break;\n        default:\n            result = undefined;\n            break;\n    }\n    return result;\n};\nexport const getRouteForQuery = (history, query, reset = false) => {\n    // Reset pagination\n    if (reset) {\n        query.filter = Object.assign(Object.assign({}, query.filter), { offset: baseQuery.filter.offset });\n    }\n    return `${history.location.pathname}?${getQueryRoute(query)}`;\n};\n","import { Skeleton, Title } from '@patternfly/react-core';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { isFloat, isInt, } from 'components/charts/common/chartDatumUtils';\nimport { CostExplorerChart } from 'components/charts/costExplorerChart';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatUnits } from 'utils/format';\nimport { skeletonWidth } from 'utils/skeleton';\nimport { chartStyles, styles } from './explorerChart.styles';\nimport { baseQuery, getDateRange, getDateRangeDefault, getGroupByDefault, getReportPathsType, getReportType, } from './explorerUtils';\nclass ExplorerChartBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.createReportDatum = (value, computedItem, reportItem = 'cost', reportItemValue = 'total') => {\n            const { intl } = this.props;\n            const computedItemDate = new Date(computedItem.date + 'T00:00:00');\n            const xVal = intl.formatMessage(messages.ExplorerChartDate, {\n                date: getDate(computedItemDate),\n                month: getMonth(computedItemDate),\n            });\n            const yVal = isFloat(value) ? parseFloat(value.toFixed(2)) : isInt(value) ? value : 0;\n            return Object.assign(Object.assign({ x: xVal, y: value === null ? null : yVal }, (value === null && { _y: 0 })), { date: computedItem.date, key: computedItem.id, name: computedItem.label ? computedItem.label : computedItem.id, units: computedItem[reportItem]\n                    ? computedItem[reportItem][reportItemValue]\n                        ? computedItem[reportItem][reportItemValue].units // cost, infrastructure, supplementary\n                        : computedItem[reportItem].units // capacity, limit, request, usage\n                    : undefined });\n        };\n        this.fetchReport = () => {\n            const { fetchReport, perspective, queryString } = this.props;\n            if (perspective) {\n                const reportPathsType = getReportPathsType(perspective);\n                const reportType = getReportType(perspective);\n                fetchReport(reportPathsType, reportType, queryString);\n            }\n        };\n        this.getChartDatums = (computedItems) => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, } = this.props;\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            const chartDatums = [];\n            computedItems.map(computedItem => {\n                const datums = [];\n                if (computedItem instanceof Map) {\n                    const items = Array.from(computedItem.values());\n                    items.map(i => {\n                        const val = i[reportItem][reportItemValue] ? i[reportItem][reportItemValue].value : i[reportItem].value;\n                        datums.push(this.createReportDatum(val, i, reportItem, reportItemValue));\n                    });\n                }\n                chartDatums.push(datums);\n            });\n            return this.padChartDatums(chartDatums);\n        };\n        this.getComputedItems = () => {\n            const { report } = this.props;\n            return getUnsortedComputedReportItems({\n                report,\n                idKey: this.getGroupBy(),\n                daily: true,\n            });\n        };\n        this.getGroupBy = () => {\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            return groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById;\n        };\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { style: styles.chartSkeleton, width: skeletonWidth.md }),\n                React.createElement(Skeleton, { style: styles.legendSkeleton, width: skeletonWidth.xs })));\n        };\n        // This pads chart datums with null datum objects, representing missing data at the beginning and end of the\n        // data series. The remaining data is left as is to allow for extrapolation. This allows us to display a \"no data\"\n        // message in the tooltip, which helps distinguish between zero values and when there is no data available.\n        this.padChartDatums = (items) => {\n            const { end_date, start_date } = this.props;\n            const result = [];\n            items.map(datums => {\n                const key = datums[0].key;\n                const label = datums[0].name;\n                const newItems = [];\n                for (let padDate = new Date(start_date + 'T00:00:00'); padDate <= new Date(end_date + 'T00:00:00'); padDate.setDate(padDate.getDate() + 1)) {\n                    const id = format(padDate, 'yyyy-MM-dd');\n                    const chartDatum = datums.find(val => val.date === id);\n                    if (chartDatum) {\n                        newItems.push(chartDatum);\n                    }\n                    else {\n                        const date = format(padDate, 'yyyy-MM-dd');\n                        newItems.push(this.createReportDatum(null, { date, id: key, label }, 'cost', null));\n                    }\n                }\n                result.push(newItems);\n            });\n            return result;\n        };\n    }\n    componentDidMount() {\n        this.fetchReport();\n    }\n    componentDidUpdate(prevProps) {\n        const { report, reportError, queryString } = this.props;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        if (newQuery || noReport) {\n            this.fetchReport();\n        }\n    }\n    render() {\n        const { perspective, reportFetchStatus, intl } = this.props;\n        const datums = this.getChartDatums(this.getComputedItems());\n        // Todo: get title from perspective menu\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { style: styles.titleContainer },\n                React.createElement(Title, { headingLevel: \"h3\", size: \"md\" }, intl.formatMessage(messages.ExplorerChartTitle, { value: perspective }))),\n            React.createElement(\"div\", { style: styles.chartContainer },\n                React.createElement(\"div\", { style: styles.costChart }, reportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(CostExplorerChart, { adjustContainerHeight: true, containerHeight: chartStyles.chartContainerHeight, formatOptions: {}, formatter: formatUnits, height: chartStyles.chartHeight, top1stData: datums.length > 0 ? datums[0] : [], top2ndData: datums.length > 1 ? datums[1] : [], top3rdData: datums.length > 2 ? datums[2] : [], top4thData: datums.length > 3 ? datums[3] : [], top5thData: datums.length > 4 ? datums[4] : [], top6thData: datums.length > 5 ? datums[5] : [] }))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter), { limit: 5, offset: undefined }),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        end_date,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n};\nconst ExplorerChartConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerChartBase);\nconst ExplorerChart = injectIntl(withRouter(ExplorerChartConnect));\nexport { ExplorerChart };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nclass DateRangeBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isDateRangeOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options, intl } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, intl.formatMessage(option.label, { value: option.value }))));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options, intl } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = intl.formatMessage(option.label, { value: option.value });\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isDateRangeOpen: !this.state.isDateRangeOpen,\n            });\n        };\n        this.handleToggle = isDateRangeOpen => {\n            this.setState({\n                isDateRangeOpen,\n            });\n        };\n    }\n    render() {\n        const { isDisabled } = this.props;\n        const { isDateRangeOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { isDisabled: isDisabled, onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isDateRangeOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst DateRange = injectIntl(DateRangeBase);\nexport { DateRange };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: `-${global_spacer_md.value}`,\n        paddingTop: global_spacer_sm.value,\n    },\n};\n","import { getQuery, orgUnitIdKey, parseQuery, tagKey } from 'api/queries/query';\nimport messages from 'locales/messages';\nimport { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { orgActions, orgSelectors } from 'store/orgs';\nimport { tagActions, tagSelectors } from 'store/tags';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isEqual } from 'utils/equal';\nimport { DateRange } from './dateRange';\nimport { styles } from './explorerFilter.styles';\nimport { dateRangeOptions, getDateRangeDefault, getGroupByOptions, getOrgReportPathsType, getRouteForQuery, getTagReportPathsType, } from './explorerUtils';\nconst orgReportType = \"org\" /* org */;\nconst tagReportType = \"tag\" /* tag */;\nexport class ExplorerFilterBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n        this.getCategoryOptions = () => {\n            const { orgReport, perspective, intl, tagReport } = this.props;\n            const options = [];\n            const groupByOptions = getGroupByOptions(perspective);\n            groupByOptions.map(option => {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: option.label }),\n                    key: option.value,\n                });\n            });\n            if (orgReport && orgReport.data && orgReport.data.length > 0) {\n                options.push({\n                    name: intl.formatMessage(messages.FilterByValues, { value: 'org_unit_id' }),\n                    key: orgUnitIdKey,\n                });\n            }\n            if (tagReport && tagReport.data && tagReport.data.length > 0) {\n                options.push({ name: intl.formatMessage(messages.FilterByValues, { value: 'tag' }), key: tagKey });\n            }\n            return options;\n        };\n        this.getDefaultDateRange = () => {\n            const { dateRange } = this.props;\n            return dateRange ? dateRange : dateRangeOptions[0];\n        };\n        this.getDateRange = () => {\n            const { isDisabled } = this.props;\n            const { currentDateRange } = this.state;\n            return (React.createElement(DateRange, { currentItem: currentDateRange, isDisabled: isDisabled, onItemClicked: this.handleDateRangeClick, options: dateRangeOptions }));\n        };\n        this.handleDateRangeClick = (value) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { dateRange: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentDateRange: value });\n        };\n    }\n    componentDidMount() {\n        const { fetchOrg, fetchTag, orgQueryString, orgReportPathsType, tagQueryString, tagReportPathsType } = this.props;\n        if (orgReportPathsType) {\n            fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n        }\n        if (tagReportPathsType) {\n            fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n        }\n        this.setState({\n            categoryOptions: this.getCategoryOptions(),\n            currentDateRange: this.getDefaultDateRange(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchOrg, fetchTag, orgQueryString, orgReport, orgReportPathsType, perspective, query, tagQueryString, tagReport, tagReportPathsType, } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            if (orgReportPathsType) {\n                fetchOrg(orgReportPathsType, orgReportType, orgQueryString);\n            }\n            if (tagReportPathsType) {\n                fetchTag(tagReportPathsType, tagReportType, tagQueryString);\n            }\n        }\n        if (!isEqual(orgReport, prevProps.orgReport) || !isEqual(tagReport, prevProps.tagReport)) {\n            this.setState({\n                categoryOptions: this.getCategoryOptions(),\n            });\n        }\n        // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n        if (prevProps.perspective !== perspective) {\n            this.handleDateRangeClick(dateRangeOptions[0].value);\n        }\n    }\n    render() {\n        const { groupBy, isDisabled, onFilterAdded, onFilterRemoved, orgReport, query, resourcePathsType, tagReport } = this.props;\n        const { categoryOptions } = this.state;\n        return (React.createElement(DataToolbar, { categoryOptions: categoryOptions, dateRange: this.getDateRange(), groupBy: groupBy, isDisabled: isDisabled, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, orgReport: orgReport, query: query, resourcePathsType: resourcePathsType, style: styles.toolbarContainer, showFilter: true, tagReport: tagReport }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    // Omitting key_only to share a single request -- the toolbar needs key values\n    const orgQueryString = getQuery({\n    // TBD...\n    });\n    let orgReport;\n    let orgReportFetchStatus;\n    const orgReportPathsType = getOrgReportPathsType(perspective);\n    if (orgReportPathsType) {\n        orgReport = orgSelectors.selectOrg(state, orgReportPathsType, orgReportType, orgQueryString);\n        orgReportFetchStatus = orgSelectors.selectOrgFetchStatus(state, orgReportPathsType, orgReportType, orgQueryString);\n    }\n    // Fetch tags with largest date range available\n    const { start_date, end_date } = getLast60DaysDate();\n    // Omitting key_only to share a single, cached request -- although the header doesn't need key values, the toolbar does\n    const tagQueryString = getQuery({\n        start_date,\n        end_date,\n    });\n    let tagReport;\n    let tagReportFetchStatus;\n    const tagReportPathsType = getTagReportPathsType(perspective);\n    if (tagReportPathsType) {\n        tagReport = tagSelectors.selectTag(state, tagReportPathsType, tagReportType, tagQueryString);\n        tagReportFetchStatus = tagSelectors.selectTagFetchStatus(state, tagReportPathsType, tagReportType, tagQueryString);\n    }\n    return {\n        dateRange,\n        orgQueryString,\n        orgReport,\n        orgReportFetchStatus,\n        orgReportPathsType,\n        perspective,\n        tagQueryString,\n        tagReport,\n        tagReportFetchStatus,\n        tagReportPathsType,\n    };\n});\nconst mapDispatchToProps = {\n    fetchOrg: orgActions.fetchOrg,\n    fetchTag: tagActions.fetchTag,\n};\nconst ExplorerFilterConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerFilterBase);\nconst ExplorerFilter = injectIntl(withRouter(ExplorerFilterConnect));\nexport { ExplorerFilter };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_Color_100 from '@patternfly/react-tokens/dist/js/global_Color_100';\nimport global_Color_200 from '@patternfly/react-tokens/dist/js/global_Color_200';\nimport global_FontSize_sm from '@patternfly/react-tokens/dist/js/global_FontSize_sm';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_sm from '@patternfly/react-tokens/dist/js/global_spacer_sm';\nexport const styles = {\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    costType: {\n        display: 'flex',\n        marginLeft: global_spacer_md.var,\n    },\n    groupBy: {\n        paddingLeft: global_spacer_lg.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_sm.var,\n        paddingLeft: global_spacer_lg.var,\n        paddingRight: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    perspectiveContainer: {\n        display: 'flex',\n        marginTop: global_spacer_md.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n};\n","import { Title, TitleSizes } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { CostType } from 'components/costType/costType';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport { GroupBy } from 'pages/views/components/groupBy/groupBy';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getLast60DaysDate } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { ExplorerFilter } from './explorerFilter';\nimport { styles } from './explorerHeader.styles';\nimport { baseQuery, getGroupByDefault, getGroupByOptions, getOrgReportPathsType, getResourcePathsType, getRouteForQuery, getTagReportPathsType, infrastructureAwsOcpOptions, infrastructureAwsOptions, infrastructureAzureOcpOptions, infrastructureAzureOptions, infrastructureGcpOptions, infrastructureIbmOptions, infrastructureOcpCloudOptions, ocpOptions, } from './explorerUtils';\nclass ExplorerHeaderBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n        // TBD...\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getPerspective = (isDisabled) => {\n            const { currentPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (ocp) {\n                options.push(...ocpOptions);\n                // Todo: Show new features in beta environment only\n                if (insights.chrome.isBeta()) {\n                    options.push(...infrastructureOcpCloudOptions);\n                }\n            }\n            if (aws) {\n                options.push(...infrastructureAwsOptions);\n            }\n            if (aws && ocp) {\n                options.push(...infrastructureAwsOcpOptions);\n            }\n            if (gcp) {\n                options.push(...infrastructureGcpOptions);\n            }\n            // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n            //\n            // if (gcp && ocp) {\n            //   options.push(...infrastructureGcpOcpOptions);\n            // }\n            if (ibm) {\n                options.push(...infrastructureIbmOptions);\n            }\n            if (azure) {\n                options.push(...infrastructureAzureOptions);\n            }\n            if (azure && ocp) {\n                options.push(...infrastructureAzureOcpOptions);\n            }\n            return (React.createElement(Perspective, { currentItem: currentPerspective || options[0].value, isDisabled: isDisabled, onItemClicked: this.handlePerspectiveClick, options: options }));\n        };\n        this.handlePerspectiveClick = (value) => {\n            const { history, onPerspectiveClicked, query } = this.props;\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { filter_by: undefined, group_by: { [getGroupByDefault(value)]: '*' }, order_by: undefined, perspective: value });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ currentPerspective: value }, () => {\n                if (onPerspectiveClicked) {\n                    onPerspectiveClicked(value);\n                }\n            });\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentPerspective: this.props.perspective,\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { perspective } = this.props;\n        if (prevProps.perspective !== perspective) {\n            this.setState({\n                currentPerspective: this.props.perspective,\n            });\n        }\n    }\n    render() {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, awsProvidersFetchStatus, azureProvidersFetchStatus, ibmProvidersFetchStatus, ibmUserAccess, groupBy, gcpProvidersFetchStatus, ocpProvidersFetchStatus, onFilterAdded, onFilterRemoved, onGroupByClicked, perspective, query, intl, userAccess, } = this.props;\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        const groupByOptions = getGroupByOptions(perspective);\n        const orgReportPathsType = getOrgReportPathsType(perspective);\n        const resourcePathsType = getResourcePathsType(perspective);\n        const tagReportPathsType = getTagReportPathsType(perspective);\n        // Fetch tags with largest date range available\n        const { start_date, end_date } = getLast60DaysDate();\n        return (React.createElement(\"header\", { style: styles.header },\n            React.createElement(\"div\", { style: styles.headerContent },\n                React.createElement(Title, { headingLevel: \"h1\", style: styles.title, size: TitleSizes['2xl'] }, intl.formatMessage(messages.ExplorerTitle)),\n                React.createElement(Currency, null)),\n            React.createElement(\"div\", { style: styles.perspectiveContainer },\n                this.getPerspective(noProviders),\n                React.createElement(\"div\", { style: styles.groupBy },\n                    React.createElement(GroupBy, { endDate: end_date, getIdKeyForGroupBy: getIdKeyForGroupBy, groupBy: groupBy, isDisabled: noProviders, onItemClicked: onGroupByClicked, options: groupByOptions, orgReportPathsType: orgReportPathsType, perspective: perspective, showOrgs: orgReportPathsType, showTags: tagReportPathsType, startDate: start_date, tagReportPathsType: tagReportPathsType })),\n                perspective === \"aws\" /* aws */ && (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, null)))),\n            React.createElement(ExplorerFilter, { groupBy: groupBy, isDisabled: noProviders, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, perspective: perspective, query: query, resourcePathsType: resourcePathsType })));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const queryFromRoute = parseQuery(location.search);\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined }));\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst ExplorerHeader = injectIntl(withRouter(connect(mapStateToProps, {})(ExplorerHeaderBase)));\nexport { ExplorerHeader };\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_disabled_color_100 from '@patternfly/react-tokens/dist/js/global_disabled_color_100';\nimport global_FontSize_xs from '@patternfly/react-tokens/dist/js/global_FontSize_xs';\nimport global_spacer_3xl from '@patternfly/react-tokens/dist/js/global_spacer_3xl';\nimport global_spacer_xs from '@patternfly/react-tokens/dist/js/global_spacer_xs';\nexport const styles = {\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    tableContainer: {\n        position: 'relative',\n        overflowX: 'auto',\n    },\n};\n","import './explorerTable.scss';\nimport { Bullseye, EmptyState, EmptyStateBody, EmptyStateIcon, Spinner } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons/dist/esm/icons/calculator-icon';\nimport { nowrap, sortable, SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { parseQuery } from 'api/queries/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { format, getDate, getMonth } from 'date-fns';\nimport messages from 'locales/messages';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { formatCurrency } from 'utils/format';\nimport { styles } from './explorerTable.styles';\nimport { getDateRange, getDateRangeDefault } from './explorerUtils';\nclass ExplorerTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { computedReportItemType = \"cost\" /* cost */, computedReportItemValueType = \"total\" /* total */, end_date, isAllSelected, perspective, query, report, selectedItems, start_date, intl, } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const rows = [];\n            // Add first column heading (i.e., name)\n            const columns = groupByTagKey || groupByOrg\n                ? [\n                    {\n                        cellTransforms: [nowrap],\n                        title: groupByOrg\n                            ? intl.formatMessage(messages.Names, { count: 2 })\n                            : intl.formatMessage(messages.TagNames),\n                    },\n                ]\n                : [\n                    {\n                        cellTransforms: [nowrap],\n                        date: undefined,\n                        orderBy: groupById === 'account' && perspective === \"aws\" /* aws */ ? 'account_alias' : groupById,\n                        title: intl.formatMessage(messages.GroupByValueNames, { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                ];\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: true,\n            });\n            // Fill in missing columns\n            for (let currentDate = new Date(start_date + 'T00:00:00'); currentDate <= new Date(end_date + 'T00:00:00'); currentDate.setDate(currentDate.getDate() + 1)) {\n                const mapId = format(currentDate, 'yyyy-MM-dd');\n                let isSortable = true;\n                computedItems.map(rowItem => {\n                    const item = rowItem.get(mapId);\n                    if (!item) {\n                        isSortable = false;\n                        rowItem.set(mapId, {\n                            date: mapId,\n                        });\n                    }\n                });\n                // Add column headings\n                const mapIdDate = new Date(mapId + 'T00:00:00');\n                const date = getDate(mapIdDate);\n                const month = getMonth(mapIdDate);\n                columns.push(Object.assign({ cellTransforms: [nowrap], title: intl.formatMessage(messages.ExplorerChartDate, { date, month }) }, (isSortable && {\n                    date: mapId,\n                    orderBy: 'cost',\n                    transforms: [sortable],\n                })));\n            }\n            const reportItem = computedReportItemType;\n            const reportItemValue = computedReportItemValueType;\n            // Sort by date and fill in missing cells\n            computedItems.map(rowItem => {\n                const cells = [];\n                let desc; // First column description (i.e., show ID if different than label)\n                let name; // For first column resource name\n                let selectItem; // Save for row selection\n                const items = Array.from(rowItem.values()).sort((a, b) => {\n                    if (new Date(a.date) > new Date(b.date)) {\n                        return 1;\n                    }\n                    else if (new Date(a.date) < new Date(b.date)) {\n                        return -1;\n                    }\n                    else {\n                        return 0;\n                    }\n                });\n                items.map(item => {\n                    if (!name) {\n                        name = item && item.label && item.label !== null ? item.label : null;\n                    }\n                    if (!desc) {\n                        desc = item.id && item.id !== item.label ? React.createElement(\"div\", { style: styles.infoDescription }, item.id) : null;\n                    }\n                    if (item.id && !selectItem) {\n                        selectItem = item;\n                    }\n                    // Add row cells\n                    cells.push({\n                        title: item[reportItem] && item[reportItem][reportItemValue]\n                            ? formatCurrency(item[reportItem][reportItemValue].value, item[reportItem][reportItemValue].units)\n                            : intl.formatMessage(messages.ChartNoData),\n                    });\n                });\n                // Add first row cell (i.e., name)\n                cells.unshift({\n                    title: (React.createElement(\"div\", null,\n                        name,\n                        desc)),\n                });\n                rows.push({\n                    cells,\n                    disableSelection: selectItem.label === `no-${groupById}` || selectItem.label === `no-${groupByTagKey}`,\n                    item: selectItem,\n                    selected: isAllSelected || (selectedItems && selectedItems.find(val => val.id === selectItem.id) !== undefined),\n                });\n            });\n            const loadingRows = [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 5 },\n                            title: (React.createElement(Bullseye, null,\n                                React.createElement(\"div\", { style: { textAlign: 'center' } },\n                                    React.createElement(Spinner, { size: \"xl\" })))),\n                        },\n                    ],\n                },\n            ];\n            this.setState({\n                columns,\n                loadingRows,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getEmptyState = () => {\n            const { query, intl } = this.props;\n            for (const val of Object.values(query.filter_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { filter: val, showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, intl.formatMessage(messages.DetailsEmptyState))));\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            let index = -1;\n            let direction = SortByDirection.asc;\n            if (query && query.order_by) {\n                for (const key of Object.keys(query.order_by)) {\n                    let c = 0;\n                    for (const column of columns) {\n                        if (column.orderBy === key && !column.date) {\n                            direction = query.order_by[key] === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        else if (column.date === query.order_by[key]) {\n                            direction = query.order_by.cost === 'asc' ? SortByDirection.asc : SortByDirection.desc;\n                            index = c + 1;\n                            break;\n                        }\n                        c++;\n                    }\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            let items = [];\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n                items = [rows[rowId].item];\n            }\n            this.setState({ rows }, () => {\n                if (onSelected) {\n                    onSelected(items, isSelected);\n                }\n            });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const column = columns[index - 1];\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(column.orderBy, column.date, isSortAscending);\n            }\n        };\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report, selectedItems } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data ? JSON.stringify(prevProps.report.data) : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport ||\n            prevProps.selectedItems !== selectedItems) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { intl, isLoading } = this.props;\n        const { columns, loadingRows, rows } = this.state;\n        return (React.createElement(\"div\", { style: styles.tableContainer },\n            React.createElement(Table, { \"aria-label\": intl.formatMessage(messages.ExplorerTableAriaLabel), canSelectAll: false, cells: columns, className: \"explorerTableOverride\", rows: isLoading ? loadingRows : rows, sortBy: this.getSortBy(), onSelect: isLoading ? undefined : this.handleOnSelect, onSort: this.handleOnSort },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && React.createElement(\"div\", { style: styles.emptyState }, this.getEmptyState())));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, { perspective }) => {\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    return {\n        dateRange,\n        end_date,\n        perspective,\n        start_date,\n    };\n});\nconst mapDispatchToProps = {};\nconst ExplorerTableConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerTableBase);\nconst ExplorerTable = injectIntl(ExplorerTableConnect);\nexport { ExplorerTable };\n","import { DataToolbar } from 'pages/views/components/dataToolbar/dataToolbar';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nexport class ExplorerToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {};\n        this.state = Object.assign({}, this.defaultState);\n    }\n    render() {\n        const { isAllSelected, isBulkSelectDisabled, isExportDisabled, itemsPerPage, itemsTotal, onBulkSelected, onExportClicked, pagination, selectedItems, } = this.props;\n        return (React.createElement(DataToolbar, { isAllSelected: isAllSelected, isBulkSelectDisabled: isBulkSelectDisabled, isExportDisabled: isExportDisabled, itemsPerPage: itemsPerPage, itemsTotal: itemsTotal, onBulkSelected: onBulkSelected, onExportClicked: onExportClicked, pagination: pagination, selectedItems: selectedItems, showBulkSelect: true, showExport: true }));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {};\n});\nconst mapDispatchToProps = {\n// TBD...\n};\nconst ExplorerToolbarConnect = connect(mapStateToProps, mapDispatchToProps)(ExplorerToolbarBase);\nconst ExplorerToolbar = injectIntl(ExplorerToolbarConnect);\nexport { ExplorerToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getQuery, parseQuery } from 'api/queries/query';\nimport { orgUnitIdKey, tagPrefix } from 'api/queries/query';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport NotAvailable from 'pages/state/notAvailable';\nimport { ExportModal } from 'pages/views/components/export/exportModal';\nimport { getGroupByOrgValue, getGroupByTagKey } from 'pages/views/utils/groupBy';\nimport { hasData } from 'pages/views/utils/providers';\nimport { addQueryFilter, removeQueryFilter } from 'pages/views/utils/query';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { reportActions, reportSelectors } from 'store/reports';\nimport { uiActions } from 'store/ui';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getIdKeyForGroupBy } from 'utils/computedReport/getComputedExplorerReportItems';\nimport { getUnsortedComputedReportItems } from 'utils/computedReport/getComputedReportItems';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './explorer.styles';\nimport { ExplorerChart } from './explorerChart';\nimport { ExplorerHeader } from './explorerHeader';\nimport { ExplorerTable } from './explorerTable';\nimport { ExplorerToolbar } from './explorerToolbar';\nimport { baseQuery, getComputedReportItemType, getComputedReportItemValueType, getDateRange, getDateRangeDefault, getGroupByDefault, getPerspectiveDefault, getReportPathsType, getReportType, getRouteForQuery, } from './explorerUtils';\nclass Explorer extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isAllSelected: false,\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getComputedItems = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByOrg = getGroupByOrgValue(query);\n            const groupByTagKey = getGroupByTagKey(query);\n            const computedItems = getUnsortedComputedReportItems({\n                report,\n                idKey: groupByTagKey ? groupByTagKey : groupByOrg ? 'org_entities' : groupById,\n                daily: false,\n            });\n            return computedItems;\n        };\n        this.getExportModal = (computedItems) => {\n            const { perspective, query, report } = this.props;\n            const { isAllSelected, isExportModalOpen, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            // Omit items labeled 'no-project'\n            const items = [];\n            selectedItems.map(item => {\n                if (!(item.label === `no-${groupById}` || item.label === `no-${groupByTagKey}`)) {\n                    items.push(item);\n                }\n            });\n            return (React.createElement(ExportModal, { isAllItems: (isAllSelected || selectedItems.length === itemsTotal) && computedItems.length > 0, groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: items, onClose: this.handleExportModalClose, query: query, reportPathsType: getReportPathsType(perspective), resolution: \"daily\", showAggregateType: false, showTimeScope: false }));\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: !isBottom, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { perspective, query, report, reportFetchStatus } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = getGroupByTagKey(query);\n            return (React.createElement(ExplorerTable, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, isAllSelected: isAllSelected, isLoading: reportFetchStatus === 1 /* inProgress */, onSelected: this.handleSelected, onSort: this.handleSort, perspective: perspective, query: query, report: report, selectedItems: selectedItems }));\n        };\n        this.getToolbar = (computedItems) => {\n            const { report } = this.props;\n            const { isAllSelected, selectedItems } = this.state;\n            const itemsTotal = report && report.meta ? report.meta.count : 0;\n            return (React.createElement(ExplorerToolbar, { isAllSelected: isAllSelected, isExportDisabled: computedItems.length === 0 || (!isAllSelected && selectedItems.length === 0), itemsPerPage: computedItems.length, itemsTotal: itemsTotal, onBulkSelected: this.handleBulkSelected, onExportClicked: this.handleExportModalOpen, pagination: this.getPagination(), selectedItems: selectedItems }));\n        };\n        this.handleBulkSelected = (action) => {\n            const { isAllSelected } = this.state;\n            if (action === 'none') {\n                this.setState({ isAllSelected: false, selectedItems: [] });\n            }\n            else if (action === 'page') {\n                this.setState({\n                    isAllSelected: false,\n                    selectedItems: this.getComputedItems(),\n                });\n            }\n            else if (action === 'all') {\n                this.setState({ isAllSelected: !isAllSelected, selectedItems: [] });\n            }\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = addQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const filteredQuery = removeQueryFilter(query, filterType, filterValue);\n            history.replace(getRouteForQuery(history, filteredQuery, true));\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            let groupByKey = groupBy;\n            let value = '*';\n            // Check for for org units\n            const index = groupBy.indexOf(orgUnitIdKey);\n            if (index !== -1) {\n                groupByKey = orgUnitIdKey.substring(0, orgUnitIdKey.length);\n                value = groupBy.slice(orgUnitIdKey.length);\n            }\n            const newQuery = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(query))), { \n                // filter_by: undefined, // Preserve filter -- see https://issues.redhat.com/browse/COST-1090\n                group_by: {\n                    [groupByKey]: value,\n                }, order_by: undefined });\n            history.replace(getRouteForQuery(history, newQuery, true));\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { limit: perPage });\n            const filteredQuery = getRouteForQuery(history, newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handlePerspectiveClick = () => {\n            this.setState({ isAllSelected: false, selectedItems: [] });\n        };\n        this.handleSelected = (items, isSelected = false) => {\n            const { isAllSelected, selectedItems } = this.state;\n            let newItems = [...(isAllSelected ? this.getComputedItems() : selectedItems)];\n            if (items && items.length > 0) {\n                if (isSelected) {\n                    items.map(item => newItems.push(item));\n                }\n                else {\n                    items.map(item => {\n                        newItems = newItems.filter(val => val.id !== item.id);\n                    });\n                }\n            }\n            this.setState({ isAllSelected: false, selectedItems: newItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign(Object.assign({}, query.filter), { offset });\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, date, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            if (date) {\n                newQuery.order_by.date = date;\n            }\n            const filteredQuery = getRouteForQuery(history, newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { dateRange, fetchReport, history, location, perspective, query, queryString } = this.props;\n            if (!location.search) {\n                history.replace(getRouteForQuery(history, {\n                    filter_by: query ? query.filter_by : undefined,\n                    group_by: query ? query.group_by : undefined,\n                    order_by: query ? query.order_by : undefined,\n                    dateRange,\n                }));\n            }\n            else if (perspective) {\n                fetchReport(getReportPathsType(perspective), getReportType(perspective), queryString);\n            }\n        };\n        this.handleBulkSelected = this.handleBulkSelected.bind(this);\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handlePerspectiveClick = this.handlePerspectiveClick.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, perspective, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newPerspective = prevProps.perspective !== perspective;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newPerspective || newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    render() {\n        const { awsProviders, awsProvidersFetchStatus, azureProviders, azureProvidersFetchStatus, gcpProviders, gcpProvidersFetchStatus, ibmProviders, ibmProvidersFetchStatus, ibmUserAccess, ibmUserAccessFetchStatus, ocpProviders, ocpProvidersFetchStatus, perspective, userAccessFetchStatus, query, report, reportError, reportFetchStatus, intl, userAccess, } = this.props;\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */ ||\n            ibmUserAccessFetchStatus === 1 /* inProgress */;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTagKey = getGroupByTagKey(query);\n        const computedItems = this.getComputedItems();\n        const itemsTotal = report && report.meta ? report.meta.count : 0;\n        const title = intl.formatMessage(messages.ExplorerTitle);\n        // Test for no providers\n        const noProviders = !(isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus) ||\n            isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus) ||\n            isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus) ||\n            isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus) ||\n            isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus));\n        // Note: Providers are fetched via the InactiveSources component used by all routes\n        if (reportError) {\n            return React.createElement(NotAvailable, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        else if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (!(hasData(awsProviders) ||\n            hasData(azureProviders) ||\n            hasData(gcpProviders) ||\n            hasData(ibmProviders) ||\n            hasData(ocpProviders))) {\n            return React.createElement(NoData, { title: title });\n        }\n        return (React.createElement(\"div\", { style: styles.explorer },\n            React.createElement(ExplorerHeader, { groupBy: groupByTagKey ? `${tagPrefix}${groupByTagKey}` : groupById, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, onGroupByClicked: this.handleGroupByClick, onPerspectiveClicked: this.handlePerspectiveClick, perspective: perspective }),\n            itemsTotal > 0 && (React.createElement(\"div\", { style: styles.chartContent },\n                React.createElement(\"div\", { style: styles.chartContainer },\n                    React.createElement(ExplorerChart, { computedReportItemType: getComputedReportItemType(perspective), computedReportItemValueType: getComputedReportItemValueType(perspective), perspective: perspective })))),\n            React.createElement(\"div\", { style: styles.tableContent },\n                this.getToolbar(computedItems),\n                this.getExportModal(computedItems),\n                reportFetchStatus === 1 /* inProgress */ ? (React.createElement(Loading, null)) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { style: styles.tableContainer }, this.getTable()),\n                    React.createElement(\"div\", { style: styles.paginationContainer },\n                        React.createElement(\"div\", { style: styles.pagination }, this.getPagination(true))))))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    // Cost Report\n    const queryFromRoute = parseQuery(location.search);\n    const dateRange = getDateRangeDefault(queryFromRoute);\n    const { end_date, start_date } = getDateRange(getDateRangeDefault(queryFromRoute));\n    const perspective = getPerspectiveDefault({\n        awsProviders,\n        awsProvidersFetchStatus,\n        azureProviders,\n        azureProvidersFetchStatus,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        queryFromRoute,\n        userAccess,\n    });\n    // Ensure group_by key is not undefined\n    let groupBy = queryFromRoute.group_by;\n    if (!groupBy && perspective) {\n        groupBy = { [getGroupByDefault(perspective)]: '*' };\n    }\n    const query = {\n        filter: Object.assign(Object.assign({}, baseQuery.filter), queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: groupBy,\n        order_by: queryFromRoute.order_by,\n        perspective,\n        dateRange,\n        end_date,\n        start_date,\n    };\n    const queryString = getQuery(Object.assign(Object.assign({}, query), { perspective: undefined, dateRange: undefined }));\n    const reportPathsType = getReportPathsType(perspective);\n    const reportType = getReportType(perspective);\n    const report = reportSelectors.selectReport(state, reportPathsType, reportType, queryString);\n    const reportError = reportSelectors.selectReportError(state, reportPathsType, reportType, queryString);\n    const reportFetchStatus = reportSelectors.selectReportFetchStatus(state, reportPathsType, reportType, queryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        dateRange,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        perspective,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: reportActions.fetchReport,\n    resetState: uiActions.resetState,\n};\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Explorer));\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"sourceRoot":""}