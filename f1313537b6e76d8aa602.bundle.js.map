{"version":3,"file":"f1313537b6e76d8aa602.bundle.js","mappings":"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","sources":["webpack://koku-ui/./src/api/queries/userAccessQuery.ts","webpack://koku-ui/./src/components/state/loadingState/loadingState.tsx","webpack://koku-ui/./src/pages/views/components/perspective/perspective.styles.ts","webpack://koku-ui/./src/pages/views/components/perspective/perspective.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardBase.tsx","webpack://koku-ui/./src/pages/views/overview/components/chartComparison.tsx","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/components/dashboardWidgetBase.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/awsDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/awsOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/awsOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/azureDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/azureOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/azureOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/gcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/gcpOcpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/gcpOcpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/ibmDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ibmDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/ocpCloudDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpCloudDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.styles.ts","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboardWidget.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/ocpDashboard.tsx","webpack://koku-ui/./src/pages/views/overview/ocpDashboard/index.ts","webpack://koku-ui/./src/pages/views/overview/overview.styles.ts","webpack://koku-ui/./src/pages/views/overview/overview.tsx","webpack://koku-ui/./src/pages/views/overview/index.ts","webpack://koku-ui/./src/utils/format.ts","webpack://koku-ui/./src/utils/userAccess.ts"],"sourcesContent":["import { parse, stringify } from 'qs';\nexport function getUserAccessQuery(query) {\n    return stringify(query, { encode: false, indices: false });\n}\nexport function parseUserAccessQuery(query) {\n    return parse(query, { ignoreQueryPrefix: true });\n}\n","import { EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title } from '@patternfly/react-core';\nimport { intl as defaultIntl } from 'components/i18n';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n// defaultIntl required for testing\nconst LoadingStateBase = ({ intl = defaultIntl }) => {\n    const title = intl.formatMessage(messages.LoadingStateTitle);\n    const subTitle = intl.formatMessage(messages.LoadingStateDesc);\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.large, className: \"pf-m-redhat-font\" },\n        React.createElement(Spinner, { size: \"lg\" }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, title),\n        React.createElement(EmptyStateBody, null, subTitle)));\n};\nconst LoadingState = injectIntl(LoadingStateBase);\nexport { LoadingState };\n","import global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    perspectiveSelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    perspectiveLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n        whiteSpace: 'nowrap',\n    },\n    perspectiveOptionLabel: {\n        marginBottom: 6,\n        marginLeft: 8,\n        marginTop: 6,\n    },\n};\n","import { Select, SelectOption, SelectVariant, Title } from '@patternfly/react-core';\nimport messages from 'locales/messages';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { styles } from './perspective.styles';\nclass PerspectiveBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isSelectOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getSelectOptions = () => {\n            const { intl, options } = this.props;\n            const selections = [];\n            options.map(option => {\n                selections.push({\n                    toString: () => intl.formatMessage(option.label, { value: option.value }),\n                    value: option.value,\n                });\n            });\n            return selections;\n        };\n        this.getSelect = () => {\n            const { currentItem, intl, isDisabled, options } = this.props;\n            const { isSelectOpen } = this.state;\n            if (options.length === 1) {\n                return (React.createElement(\"div\", { style: styles.perspectiveOptionLabel }, intl.formatMessage(options[0].label, { value: options[0].value })));\n            }\n            const selectOptions = this.getSelectOptions();\n            const selection = selectOptions.find((item) => item.value === currentItem);\n            return (React.createElement(Select, { id: \"perspectiveSelect\", isDisabled: isDisabled, isOpen: isSelectOpen, onSelect: this.handleSelect, onToggle: this.handleToggle, selections: selection, variant: SelectVariant.single }, selectOptions.map(item => (React.createElement(SelectOption, { key: item.value, value: item })))));\n        };\n        this.handleSelect = (event, selection) => {\n            const { onSelected } = this.props;\n            if (onSelected) {\n                onSelected(selection.value);\n            }\n            this.setState({\n                isSelectOpen: false,\n            });\n        };\n        this.handleToggle = isSelectOpen => {\n            this.setState({ isSelectOpen });\n        };\n    }\n    render() {\n        const { intl } = this.props;\n        return (React.createElement(\"div\", { style: styles.perspectiveSelector },\n            React.createElement(Title, { headingLevel: \"h3\", size: \"md\", style: styles.perspectiveLabel }, intl.formatMessage(messages.Perspective)),\n            this.getSelect()));\n    }\n}\nconst Perspective = injectIntl(PerspectiveBase);\nexport { Perspective };\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport React from 'react';\nconst DashboardBase = ({ DashboardWidget, selectWidgets, widgets }) => (React.createElement(\"div\", null,\n    React.createElement(Grid, { hasGutter: true }, widgets.map(widgetId => {\n        const widget = selectWidgets[widgetId];\n        return widget.details.showHorizontal ? (React.createElement(GridItem, { sm: 12, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId }))) : (React.createElement(GridItem, { lg: 12, xl: 6, xl2: 4, key: widgetId },\n            React.createElement(DashboardWidget, { widgetId: widgetId })));\n    }))));\nexport { DashboardBase };\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport React from 'react';\nclass ChartComparisonBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            isChartComparisonOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getDropDownItems = () => {\n            const { options } = this.props;\n            return options.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleClick(option.value) }, option.label)));\n        };\n        this.getCurrentLabel = () => {\n            const { currentItem, options } = this.props;\n            let label = '';\n            for (const option of options) {\n                if (currentItem === option.value) {\n                    label = option.label;\n                    break;\n                }\n            }\n            return label;\n        };\n        this.handleClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                onItemClicked(value);\n            }\n        };\n        this.handleSelect = () => {\n            this.setState({\n                isChartComparisonOpen: !this.state.isChartComparisonOpen,\n            });\n        };\n        this.handleToggle = isChartComparisonOpen => {\n            this.setState({\n                isChartComparisonOpen,\n            });\n        };\n    }\n    render() {\n        const { isChartComparisonOpen } = this.state;\n        const dropdownItems = this.getDropDownItems();\n        return (React.createElement(Dropdown, { onSelect: this.handleSelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleToggle }, this.getCurrentLabel()), isOpen: isChartComparisonOpen, dropdownItems: dropdownItems }));\n    }\n}\nconst ChartComparison = ChartComparisonBase;\nexport { ChartComparison };\n","import global_spacer_2xl from '@patternfly/react-tokens/dist/js/global_spacer_2xl';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nimport global_spacer_xl from '@patternfly/react-tokens/dist/js/global_spacer_xl';\nexport const chartStyles = {\n    chartAltHeight: 250,\n    chartHeight: 180,\n    containerAltHeight: 250,\n    containerTrendHeight: 180,\n    containerUsageHeight: 180,\n};\nexport const styles = {\n    comparison: {\n        marginBottom: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_2xl.value,\n    },\n    tabItems: {\n        marginTop: global_spacer_xl.value,\n    },\n};\n","import { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { getQuery } from 'api/queries/awsQuery';\nimport { transformForecast, transformForecastCone, transformReport, } from 'components/charts/common/chartDatumUtils';\nimport { ReportSummary, ReportSummaryAlt, ReportSummaryCost, ReportSummaryDailyCost, ReportSummaryDailyTrend, ReportSummaryDetails, ReportSummaryItem, ReportSummaryItems, ReportSummaryTrend, ReportSummaryUsage, } from 'components/reports/reportSummary';\nimport messages from 'locales/messages';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatCurrency, formatUnits, unitsLookupKey } from 'utils/format';\nimport { ChartComparison } from './chartComparison';\nimport { chartStyles, styles } from './dashboardWidget.styles';\nclass DashboardWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n            currentComparison: \"cumulative\" /* cumulative */,\n        };\n        this.buildDetailsLink = (tab) => {\n            const { details, getIdKeyForTab } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return `${details.viewAllPath}?${getQuery({\n                group_by: {\n                    [currentTab]: '*',\n                },\n                order_by: { cost: 'desc' },\n            })}`;\n        };\n        this.getChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { chartType, trend } = this.props;\n            if (chartType === \"dailyTrend\" /* dailyTrend */) {\n                return this.getDailyTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"dailyCost\" /* dailyCost */) {\n                return this.getDailyCostChart(containerHeight, height, adjustContainerHeight);\n            }\n            else if (chartType === \"trend\" /* trend */) {\n                return this.getTrendChart(containerHeight, height, adjustContainerHeight, trend.showInfrastructureLabel, trend.showSupplementaryLabel);\n            }\n            else if (chartType === \"usage\" /* usage */) {\n                return this.getUsageChart(height, adjustContainerHeight);\n            }\n            else {\n                return null;\n            }\n        };\n        // This dropdown is for cumulative and daily cost\n        this.getChartComparison = () => {\n            const { intl, trend } = this.props;\n            const { currentComparison } = this.state;\n            const units = this.getFormattedUnits();\n            const cumulativeTitle = intl.formatMessage(trend.titleKey, { units });\n            const dailyTitle = intl.formatMessage(trend.dailyTitleKey, { units });\n            const options = [\n                { label: dailyTitle, value: \"daily\" /* daily */ },\n                { label: cumulativeTitle, value: \"cumulative\" /* cumulative */ },\n            ];\n            return (React.createElement(ChartComparison, { currentItem: currentComparison || options[0].value, onItemClicked: this.handleComparisonClick, options: options }));\n        };\n        // This chart displays cumulative and daily cost compared to infrastructure cost\n        this.getDailyCostChart = (containerHeight, height, adjustContainerHeight = false) => {\n            const { currentReport, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Infrastructure data\n            const currentInfrastructureData = transformReport(currentReport, type, 'date', 'infrastructure', computedReportItemValue);\n            const previousInfrastructureData = transformReport(previousReport, type, 'date', 'infrastructure', computedReportItemValue);\n            // Cost data\n            const currentCostData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousCostData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const forecastData = this.getForecastData(currentReport, trend.computedForecastItem);\n            const forecastInfrastructureData = this.getForecastData(currentReport, trend.computedForecastInfrastructureItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyCost : ReportSummaryCost;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentCostData: currentCostData, currentInfrastructureCostData: currentInfrastructureData, forecastConeData: forecastData.forecastConeData, forecastData: forecastData.forecastData, forecastInfrastructureConeData: forecastInfrastructureData.forecastConeData, forecastInfrastructureData: forecastInfrastructureData.forecastData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousCostData: previousCostData, previousInfrastructureCostData: previousInfrastructureData, showForecast: trend.computedForecastItem !== undefined })));\n        };\n        // This chart displays cumulative and daily cost\n        this.getDailyTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, previousReport, trend } = this.props;\n            const { currentComparison } = this.state;\n            const computedReportItem = trend.computedReportItem; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            // Cost data\n            const currentData = transformReport(currentReport, type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            const ReportSummaryComponent = daily ? ReportSummaryDailyTrend : ReportSummaryTrend;\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { style: styles.comparison }, this.getChartComparison()),\n                React.createElement(ReportSummaryComponent, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, units: this.getUnits() })));\n        };\n        this.getForecastData = (report, computedForecastItem = 'cost') => {\n            const { forecast, trend } = this.props;\n            const { currentComparison } = this.state;\n            // Todo: Add cumulative / daily prop\n            const daily = currentComparison === \"daily\" /* daily */;\n            const type = daily ? 1 /* daily */ : trend.type;\n            let forecastData;\n            let forecastConeData;\n            if (computedForecastItem) {\n                const newForecast = cloneDeep(forecast);\n                if (newForecast) {\n                    newForecast.data = [];\n                }\n                if (forecast && report && report.data) {\n                    const total = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.value\n                        : 0;\n                    const units = report.meta && report.meta.total && report.meta.total[computedForecastItem]\n                        ? report.meta.total[computedForecastItem].total.units\n                        : 'USD';\n                    // Find last currentData date with values\n                    const reportedValues = report.data.filter(val => val.values.length);\n                    const lastReported = reportedValues[reportedValues.length - 1]\n                        ? reportedValues[reportedValues.length - 1].date\n                        : undefined;\n                    // Remove overlapping forecast dates, if any\n                    if (forecast && forecast.data && forecast.data.length > 0) {\n                        const lastReportedDate = new Date(lastReported);\n                        const lastReportedMonth = lastReportedDate.getMonth() + 1;\n                        for (const item of forecast.data) {\n                            const forecastDate = new Date(item.date);\n                            const forecastMonth = forecastDate.getMonth() + 1;\n                            // Ensure month match. AWS forecast may begin with \"2020-12-04\", but ends on \"2021-01-01\"\n                            if (forecastDate > lastReportedDate && lastReportedMonth === forecastMonth) {\n                                newForecast.data.push(item);\n                            }\n                        }\n                        // For cumulative data, forecast values should begin at last reported total with zero confidence values\n                        if (type === 0 /* rolling */) {\n                            const firstReported = forecast.data[0].values && forecast.data[0].values.length > 0\n                                ? forecast.data[0].values[0].date\n                                : undefined;\n                            const date = this.getNumberOfDays(lastReported, firstReported) === 1 ? lastReported : firstReported;\n                            newForecast.data.unshift({\n                                date,\n                                values: [\n                                    {\n                                        date,\n                                        cost: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        infrastructure: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                        supplementary: {\n                                            confidence_max: {\n                                                value: 0,\n                                            },\n                                            confidence_min: {\n                                                value: 0,\n                                            },\n                                            total: {\n                                                value: total,\n                                                units,\n                                            },\n                                        },\n                                    },\n                                ],\n                            });\n                        }\n                    }\n                }\n                forecastData = transformForecast(newForecast, type, computedForecastItem);\n                forecastConeData = transformForecastCone(newForecast, type, computedForecastItem);\n            }\n            return { forecastData, forecastConeData };\n        };\n        this.getNumberOfDays = (start, end) => {\n            const date1 = new Date(start);\n            const date2 = new Date(end);\n            // One day in milliseconds\n            const oneDay = 1000 * 60 * 60 * 24;\n            // Calculating the time difference between two dates\n            const diffInTime = date2.getTime() - date1.getTime();\n            // Calculating the no. of days between two dates\n            const diffInDays = Math.round(diffInTime / oneDay);\n            return diffInDays;\n        };\n        // This chart displays cumulative cost only\n        this.getTrendChart = (containerHeight, height, adjustContainerHeight = false, showInfrastructureLabel = false, showSupplementaryLabel = false) => {\n            const { currentReport, details, intl, previousReport, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost'; // cost, supplementary cost, etc.\n            const computedReportItemValue = trend.computedReportItemValue; // infrastructure usage cost\n            const title = intl.formatMessage(trend.titleKey, { units: this.getFormattedUnits() });\n            // Cost data\n            const currentData = transformReport(currentReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            const previousData = transformReport(previousReport, trend.type, 'date', computedReportItem, computedReportItemValue);\n            // Forecast data\n            const { forecastData, forecastConeData } = this.getForecastData(currentReport, trend.computedForecastItem);\n            return (React.createElement(ReportSummaryTrend, { adjustContainerHeight: adjustContainerHeight, containerHeight: containerHeight, currentData: currentData, forecastData: forecastData, forecastConeData: forecastConeData, formatOptions: trend.formatOptions, formatter: formatCurrency, height: height, previousData: previousData, showForecast: trend.computedForecastItem !== undefined, showInfrastructureLabel: showInfrastructureLabel, showSupplementaryLabel: showSupplementaryLabel, showUsageLegendLabel: details.showUsageLegendLabel, title: title, units: this.getUnits() }));\n        };\n        // This chart displays usage and requests\n        this.getUsageChart = (height, adjustContainerHeight = false) => {\n            const { currentReport, intl, previousReport, trend } = this.props;\n            const title = intl.formatMessage(trend.titleKey, {\n                units: this.getFormattedUnits(),\n            });\n            // Request data\n            const currentRequestData = transformReport(currentReport, trend.type, 'date', 'request');\n            const previousRequestData = transformReport(previousReport, trend.type, 'date', 'request');\n            // Usage data\n            const currentUsageData = transformReport(currentReport, trend.type, 'date', 'usage');\n            const previousUsageData = transformReport(previousReport, trend.type, 'date', 'usage');\n            return (React.createElement(ReportSummaryUsage, { adjustContainerHeight: adjustContainerHeight, containerHeight: chartStyles.containerUsageHeight, currentRequestData: currentRequestData, currentUsageData: currentUsageData, formatOptions: trend.formatOptions, formatter: formatUnits, height: height, previousRequestData: previousRequestData, previousUsageData: previousUsageData, title: title }));\n        };\n        this.getDetails = () => {\n            const { chartType, currentReport, details, reportType, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            return (React.createElement(ReportSummaryDetails, { chartType: chartType, computedReportItem: computedReportItem, computedReportItemValue: computedReportItemValue, costLabel: this.getDetailsLabel(details.costKey), formatOptions: details.formatOptions, report: currentReport, reportType: reportType, requestLabel: this.getDetailsLabel(details.requestKey), showTooltip: details.showTooltip, showUnits: details.showUnits, showUsageFirst: details.showUsageFirst, units: this.getUnits(), usageFormatOptions: details.usageFormatOptions, usageLabel: this.getDetailsLabel(details.usageKey) }));\n        };\n        this.getDetailsLabel = (key) => {\n            const { intl } = this.props;\n            return key ? intl.formatMessage(key) : undefined;\n        };\n        this.getDetailsLink = () => {\n            const { currentTab, details } = this.props;\n            if (details.viewAllPath) {\n                return React.createElement(Link, { to: this.buildDetailsLink(currentTab) }, this.getDetailsLinkTitle(currentTab));\n            }\n            return null;\n        };\n        this.getDetailsLinkTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByAll, { value: key, count: 2 });\n        };\n        this.getFormattedUnits = () => {\n            const { intl, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const units = this.getUnits();\n            if (computedReportItem === \"usage\" /* usage */) {\n                return intl.formatMessage(messages.Units, { units: unitsLookupKey(units) });\n            }\n            return intl.formatMessage(messages.CurrencyUnits, { units });\n        };\n        this.getHorizontalLayout = () => {\n            const { containerAltHeight = chartStyles.containerAltHeight, chartAltHeight = chartStyles.chartAltHeight, currentReportFetchStatus, details, } = this.props;\n            return (React.createElement(ReportSummaryAlt, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, tabs: this.getTabs(), title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(containerAltHeight, chartAltHeight, details.adjustContainerHeight)));\n        };\n        this.getTab = (tab, index) => {\n            const { getIdKeyForTab, tabsReport, tabsReportFetchStatus } = this.props;\n            const currentTab = getIdKeyForTab(tab);\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) },\n                React.createElement(\"div\", { style: styles.tabItems },\n                    React.createElement(ReportSummaryItems, { idKey: currentTab, key: `${currentTab}-items`, report: tabsReport, status: tabsReportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(tab, reportItem))))));\n        };\n        this.getTabItem = (tab, reportItem) => {\n            const { availableTabs, getIdKeyForTab, tabsReport, topItems, trend } = this.props;\n            const { activeTabKey } = this.state;\n            const currentTab = getIdKeyForTab(tab);\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            let totalValue;\n            const hasTotal = tabsReport && tabsReport.meta && tabsReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                if (hasTotal && tabsReport.meta.total.usage) {\n                    totalValue = tabsReport.meta.total.usage.value;\n                }\n            }\n            else {\n                if (hasTotal &&\n                    tabsReport.meta.total[computedReportItem] &&\n                    tabsReport.meta.total[computedReportItem][computedReportItemValue]) {\n                    totalValue = tabsReport.meta.total[computedReportItem][computedReportItemValue].value;\n                }\n            }\n            if (activeTab === currentTab) {\n                return (React.createElement(ReportSummaryItem, { formatOptions: topItems ? topItems.formatOptions : undefined, key: `${reportItem.id}-item`, label: reportItem.label ? reportItem.label.toString() : '', totalValue: totalValue, units: this.getUnits(), value: reportItem[computedReportItem][computedReportItemValue].value }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const { availableTabs } = this.props;\n            return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { getIdKeyForTab, intl } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return intl.formatMessage(messages.GroupByTop, { value: key, count: 2 });\n        };\n        this.getTitle = () => {\n            const { intl, titleKey } = this.props;\n            return intl.formatMessage(titleKey);\n        };\n        this.getUnits = () => {\n            const { currentReport, details, trend } = this.props;\n            const computedReportItem = trend.computedReportItem || 'cost';\n            const computedReportItemValue = trend.computedReportItemValue || 'total';\n            if (details.units) {\n                return details.units;\n            }\n            if (!currentReport) {\n                return '';\n            }\n            const hasTotal = currentReport && currentReport.meta && currentReport.meta.total;\n            if (computedReportItem === \"usage\" /* usage */) {\n                const hasUsage = hasTotal && currentReport.meta.total.usage;\n                return hasUsage ? currentReport.meta.total.usage.units : undefined;\n            }\n            else {\n                const hasCost = hasTotal &&\n                    currentReport.meta.total[computedReportItem] &&\n                    currentReport.meta.total[computedReportItem][computedReportItemValue];\n                return hasCost ? currentReport.meta.total[computedReportItem][computedReportItemValue].units : 'USD';\n            }\n        };\n        this.getVerticalLayout = () => {\n            const { availableTabs, currentReportFetchStatus, details } = this.props;\n            return (React.createElement(ReportSummary, { detailsLink: this.getDetailsLink(), status: currentReportFetchStatus, title: this.getTitle() },\n                this.getDetails(),\n                this.getChart(chartStyles.containerTrendHeight, chartStyles.chartHeight, details.adjustContainerHeight),\n                Boolean(availableTabs) && React.createElement(\"div\", { style: styles.tabs }, this.getTabs())));\n        };\n        this.handleComparisonClick = (value) => {\n            this.setState({ currentComparison: value });\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { availableTabs, id, updateTab } = this.props;\n            const tab = availableTabs[tabIndex];\n            updateTab(id, tab);\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n    }\n    componentDidMount() {\n        const { availableTabs, fetchForecasts, fetchReports, id, trend, updateTab, widgetId } = this.props;\n        if (availableTabs) {\n            updateTab(id, availableTabs[0]);\n        }\n        if (fetchReports) {\n            fetchReports(widgetId);\n        }\n        if (trend.computedForecastItem !== undefined) {\n            fetchForecasts(widgetId);\n        }\n    }\n    render() {\n        const { details } = this.props;\n        return details.showHorizontal ? this.getHorizontalLayout() : this.getVerticalLayout();\n    }\n}\nexport { DashboardWidgetBase };\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardActions, awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsDashboardActions.fetchWidgetReports,\n    updateTab: awsDashboardActions.changeWidgetTab,\n};\nconst AwsDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsDashboardSelectors } from 'store/dashboard/awsDashboard';\nimport { AwsDashboardWidget } from './awsDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AwsDashboardWidget,\n        selectWidgets: awsDashboardSelectors.selectWidgets(state),\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsDashboard;\n","import AwsDashboard from './awsDashboard';\nexport default AwsDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardActions, awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = awsOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = awsOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: awsOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: awsOcpDashboardActions.fetchWidgetReports,\n    updateTab: awsOcpDashboardActions.changeWidgetTab,\n};\nconst AwsOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AwsOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsOcpDashboardSelectors } from 'store/dashboard/awsOcpDashboard';\nimport { AwsOcpDashboardWidget } from './awsOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AwsOcpDashboardWidget,\n        selectWidgets: awsOcpDashboardSelectors.selectWidgets(state),\n        widgets: awsOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AwsOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AwsOcpDashboard;\n","import AwsOcpDashboard from './awsOcpDashboard';\nexport default AwsOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardActions, azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureDashboardActions.fetchWidgetReports,\n    updateTab: azureDashboardActions.changeWidgetTab,\n};\nconst AzureDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureDashboardSelectors } from 'store/dashboard/azureDashboard';\nimport { AzureDashboardWidget } from './azureDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: AzureDashboardWidget,\n        selectWidgets: azureDashboardSelectors.selectWidgets(state),\n        widgets: azureDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureDashboard;\n","import AzureDashboard from './azureDashboard';\nexport default AzureDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardActions, azureOcpDashboardSelectors, } from 'store/dashboard/azureOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"service_names\" /* service_names */:\n            return 'service_name';\n        case \"subscription_guids\" /* subscription_guids */:\n            return 'subscription_guid';\n        case \"resource_locations\" /* resource_locations */:\n            return 'resource_location';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = azureOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = azureOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: azureOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: azureOcpDashboardActions.fetchWidgetReports,\n    updateTab: azureOcpDashboardActions.changeWidgetTab,\n};\nconst AzureOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { AzureOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { azureOcpDashboardSelectors } from 'store/dashboard/azureOcpDashboard';\nimport { AzureOcpDashboardWidget } from './azureOcpDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: AzureOcpDashboardWidget,\n        selectWidgets: azureOcpDashboardSelectors.selectWidgets(state),\n        widgets: azureOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst AzureOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default AzureOcpDashboard;\n","import AzureOcpDashboard from './azureOcpDashboard';\nexport default AzureOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardActions, gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpDashboardActions.changeWidgetTab,\n};\nconst GcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpDashboardSelectors } from 'store/dashboard/gcpDashboard';\nimport { GcpDashboardWidget } from './gcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpDashboardWidget,\n        selectWidgets: gcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpDashboard;\n","import GcpDashboard from './gcpDashboard';\nexport default GcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardActions, gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = gcpOcpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = gcpOcpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: gcpOcpDashboardActions.fetchWidgetForecasts,\n    fetchReports: gcpOcpDashboardActions.fetchWidgetReports,\n    updateTab: gcpOcpDashboardActions.changeWidgetTab,\n};\nconst GcpOcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { GcpOcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { gcpOcpDashboardSelectors } from 'store/dashboard/gcpOcpDashboard';\nimport { GcpOcpDashboardWidget } from './gcpOcpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: GcpOcpDashboardWidget,\n        selectWidgets: gcpOcpDashboardSelectors.selectWidgets(state),\n        widgets: gcpOcpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst GcpOcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default GcpOcpDashboard;\n","import GcpOcpDashboard from './gcpOcpDashboard';\nexport default GcpOcpDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardActions, ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"services\" /* services */:\n            return 'service';\n        case \"projects\" /* projects */:\n            return 'project';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"instance_type\" /* instanceType */:\n            return 'instance_type';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ibmDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ibmDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ibmDashboardActions.fetchWidgetForecasts,\n    fetchReports: ibmDashboardActions.fetchWidgetReports,\n    updateTab: ibmDashboardActions.changeWidgetTab,\n};\nconst IbmDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { IbmDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ibmDashboardSelectors } from 'store/dashboard/ibmDashboard';\nimport { IbmDashboardWidget } from './ibmDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: IbmDashboardWidget,\n        selectWidgets: ibmDashboardSelectors.selectWidgets(state),\n        widgets: ibmDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst IbmDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default IbmDashboard;\n","import IbmDashboard from './ibmDashboard';\nexport default IbmDashboard;\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardActions, ocpCloudDashboardSelectors, } from 'store/dashboard/ocpCloudDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpCloudDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpCloudDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpCloudDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpCloudDashboardActions.fetchWidgetReports,\n    updateTab: ocpCloudDashboardActions.changeWidgetTab,\n};\nconst OcpCloudDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpCloudDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpCloudDashboardSelectors } from 'store/dashboard/ocpCloudDashboard';\nimport { OcpCloudDashboardWidget } from './ocpCloudDashboardWidget';\nconst mapStateToProps = createMapStateToProps(\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n(state, props) => {\n    return {\n        DashboardWidget: OcpCloudDashboardWidget,\n        selectWidgets: ocpCloudDashboardSelectors.selectWidgets(state),\n        widgets: ocpCloudDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpCloudDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpCloudDashboard;\n","import OcpCloudDashboard from './ocpCloudDashboard';\nexport default OcpCloudDashboard;\n","export const chartStyles = {\n    chartAltHeight: 250,\n    containerAltHeight: 250,\n};\n","import { DashboardWidgetBase, } from 'pages/views/overview/components/dashboardWidgetBase';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardActions, ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { forecastSelectors } from 'store/forecasts';\nimport { reportSelectors } from 'store/reports';\nimport { chartStyles } from './ocpDashboardWidget.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"clusters\" /* clusters */:\n            return 'cluster';\n        case \"nodes\" /* nodes */:\n            return 'node';\n        case \"projects\" /* projects */:\n            return 'project';\n    }\n};\nconst mapStateToProps = createMapStateToProps((state, { widgetId }) => {\n    const widget = ocpDashboardSelectors.selectWidget(state, widgetId);\n    const queries = ocpDashboardSelectors.selectWidgetQueries(state, widgetId);\n    return Object.assign(Object.assign({}, widget), { getIdKeyForTab, chartAltHeight: chartStyles.chartAltHeight, containerAltHeight: chartStyles.containerAltHeight, currentQuery: queries.current, forecastQuery: queries.forecast, previousQuery: queries.previous, tabsQuery: queries.tabs, currentReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.current), currentReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.current), forecast: forecastSelectors.selectForecast(state, widget.forecastPathsType, widget.forecastType, queries.forecast), previousReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.previous), tabsReport: reportSelectors.selectReport(state, widget.reportPathsType, widget.reportType, queries.tabs), tabsReportFetchStatus: reportSelectors.selectReportFetchStatus(state, widget.reportPathsType, widget.reportType, queries.tabs) });\n});\nconst mapDispatchToProps = {\n    fetchForecasts: ocpDashboardActions.fetchWidgetForecasts,\n    fetchReports: ocpDashboardActions.fetchWidgetReports,\n    updateTab: ocpDashboardActions.changeWidgetTab,\n};\nconst OcpDashboardWidget = injectIntl(connect(mapStateToProps, mapDispatchToProps)(DashboardWidgetBase));\nexport { OcpDashboardWidget };\n","import { DashboardBase } from 'pages/views/overview/components/dashboardBase';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { ocpDashboardSelectors } from 'store/dashboard/ocpDashboard';\nimport { OcpDashboardWidget } from './ocpDashboardWidget';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    return {\n        DashboardWidget: OcpDashboardWidget,\n        selectWidgets: ocpDashboardSelectors.selectWidgets(state),\n        widgets: ocpDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst OcpDashboard = connect(mapStateToProps, {})(DashboardBase);\nexport default OcpDashboard;\n","import OcpDashboard from './ocpDashboard';\nexport default OcpDashboard;\n","import global_BackgroundColor_light_100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_light_100';\nimport global_FontSize_md from '@patternfly/react-tokens/dist/js/global_FontSize_md';\nimport global_spacer_lg from '@patternfly/react-tokens/dist/js/global_spacer_lg';\nimport global_spacer_md from '@patternfly/react-tokens/dist/js/global_spacer_md';\nexport const styles = {\n    date: {\n        alignSelf: 'center',\n        flexGrow: 1,\n        textAlign: 'end',\n    },\n    costType: {\n        marginLeft: global_spacer_md.var,\n    },\n    header: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        padding: global_spacer_lg.var,\n    },\n    headerContent: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    headerContentLeft: {\n        display: 'flex',\n    },\n    infoIcon: {\n        fontSize: global_FontSize_md.value,\n    },\n    infoTitle: {\n        fontWeight: 'bold',\n    },\n    main: {\n        padding: global_spacer_lg.value,\n    },\n    tabs: {\n        backgroundColor: global_BackgroundColor_light_100.var,\n        paddingBottom: global_spacer_lg.var,\n        paddingTop: global_spacer_lg.var,\n    },\n};\n","import './overview.scss';\nimport { Button, ButtonVariant, Popover, Tab, TabContent, Tabs, TabTitleText, Title, TitleSizes, } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport { getProvidersQuery } from 'api/queries/providersQuery';\nimport { getUserAccessQuery } from 'api/queries/userAccessQuery';\nimport { CostType } from 'components/costType/costType';\nimport { Currency } from 'components/currency/currency';\nimport messages from 'locales/messages';\nimport Loading from 'pages/state/loading';\nimport NoData from 'pages/state/noData/noData';\nimport NoProviders from 'pages/state/noProviders';\nimport { Perspective } from 'pages/views/components/perspective/perspective';\nimport AwsDashboard from 'pages/views/overview/awsDashboard';\nimport AwsOcpDashboard from 'pages/views/overview/awsOcpDashboard';\nimport AzureDashboard from 'pages/views/overview/azureDashboard';\nimport AzureOcpDashboard from 'pages/views/overview/azureOcpDashboard';\nimport GcpDashboard from 'pages/views/overview/gcpDashboard';\nimport GcpOcpDashboard from 'pages/views/overview/gcpOcpDashboard';\nimport IbmDashboard from 'pages/views/overview/ibmDashboard';\nimport OcpCloudDashboard from 'pages/views/overview/ocpCloudDashboard';\nimport OcpDashboard from 'pages/views/overview/ocpDashboard';\nimport { hasCloudCurrentMonthData, hasCloudPreviousMonthData, hasCurrentMonthData, hasPreviousMonthData, } from 'pages/views/utils/providers';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, azureProvidersQuery, gcpProvidersQuery, ibmProvidersQuery, ocpProvidersQuery, providersSelectors, } from 'store/providers';\nimport { uiActions } from 'store/ui';\nimport { allUserAccessQuery, ibmUserAccessQuery, userAccessSelectors } from 'store/userAccess';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { isAwsAvailable, isAzureAvailable, isGcpAvailable, isIbmAvailable, isOcpAvailable } from 'utils/userAccess';\nimport { styles } from './overview.styles';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"infrastructure\" /* infrastructure */:\n            return 'infrastructure';\n        case \"ocp\" /* ocp */:\n            return 'ocp';\n    }\n};\n// Ocp options\nconst ocpOptions = [{ label: messages.PerspectiveValues, value: 'ocp' }];\n// Infrastructure AWS options\nconst infrastructureAwsOptions = [{ label: messages.PerspectiveValues, value: 'aws' }];\n// Infrastructure AWS filtered by OpenShift options\nconst infrastructureAwsOcpOptions = [{ label: messages.PerspectiveValues, value: 'aws_ocp' }];\n// Infrastructure Azure options\nconst infrastructureAzureOptions = [{ label: messages.PerspectiveValues, value: 'azure' }];\n// Infrastructure Azure filtered by OpenShift options\nconst infrastructureAzureOcpOptions = [{ label: messages.PerspectiveValues, value: 'azure_ocp' }];\n// Infrastructure GCP options\nconst infrastructureGcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp' }];\n// Infrastructure GCP filtered by OCP options\n//\n// Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n//\n// const infrastructureGcpOcpOptions = [{ label: messages.PerspectiveValues, value: 'gcp_ocp' }];\n// Infrastructure IBM options\nconst infrastructureIbmOptions = [{ label: messages.PerspectiveValues, value: 'ibm' }];\n// Infrastructure Ocp cloud options\nconst infrastructureOcpCloudOptions = [{ label: messages.PerspectiveValues, value: 'ocp_cloud' }];\nclass OverviewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            activeTabKey: 0,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getAvailableTabs = () => {\n            const availableTabs = [];\n            if (this.isOcpAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"ocp\" /* ocp */,\n                });\n            }\n            if (this.isAwsAvailable() ||\n                this.isAzureAvailable() ||\n                this.isGcpAvailable() ||\n                this.isIbmAvailable() ||\n                this.isOcpCloudAvailable()) {\n                availableTabs.push({\n                    contentRef: React.createRef(),\n                    tab: \"infrastructure\" /* infrastructure */,\n                });\n            }\n            return availableTabs;\n        };\n        this.getCostType = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            if (currentItem === \"aws\" /* aws */) {\n                return (React.createElement(\"div\", { style: styles.costType },\n                    React.createElement(CostType, null)));\n            }\n            return null;\n        };\n        this.getCurrentTab = () => {\n            const { activeTabKey } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            const ocpCloud = this.isOcpCloudAvailable();\n            const showOcpOnly = ocp && !(aws || azure || gcp || ibm || ocpCloud);\n            const showInfrastructureOnly = !ocp && (aws || azure || gcp || ibm || ocpCloud);\n            if (showOcpOnly) {\n                return \"ocp\" /* ocp */;\n            }\n            else if (showInfrastructureOnly) {\n                return \"infrastructure\" /* infrastructure */;\n            }\n            else {\n                return activeTabKey === 0 ? \"ocp\" /* ocp */ : \"infrastructure\" /* infrastructure */;\n            }\n        };\n        this.getDefaultInfrastructurePerspective = () => {\n            if (this.isOcpAvailable()) {\n                // Todo: Show new features in beta environment only\n                if (insights.chrome.isBeta()) {\n                    return \"ocp_cloud\" /* ocpCloud */;\n                }\n            }\n            if (this.isAwsAvailable()) {\n                return \"aws\" /* aws */;\n            }\n            if (this.isAzureAvailable()) {\n                return \"azure\" /* azure */;\n            }\n            if (this.isGcpAvailable()) {\n                return \"gcp\" /* gcp */;\n            }\n            if (this.isIbmAvailable()) {\n                return \"ibm\" /* ibm */;\n            }\n            return undefined;\n        };\n        this.getDefaultOcpPerspective = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            if (isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus)) {\n                return \"ocp\" /* ocp */;\n            }\n            return undefined;\n        };\n        this.getPerspective = () => {\n            const { currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const aws = this.isAwsAvailable();\n            const azure = this.isAzureAvailable();\n            const gcp = this.isGcpAvailable();\n            const ibm = this.isIbmAvailable();\n            const ocp = this.isOcpAvailable();\n            if (!(aws || azure || gcp || ibm || ocp)) {\n                return null;\n            }\n            // Dynamically show options if providers are available\n            const options = [];\n            if (this.getCurrentTab() === \"infrastructure\" /* infrastructure */) {\n                if (ocp) {\n                    // Todo: Show new features in beta environment only\n                    if (insights.chrome.isBeta()) {\n                        options.push(...infrastructureOcpCloudOptions);\n                    }\n                }\n                if (aws) {\n                    options.push(...infrastructureAwsOptions);\n                }\n                if (aws && ocp) {\n                    options.push(...infrastructureAwsOcpOptions);\n                }\n                if (gcp) {\n                    options.push(...infrastructureGcpOptions);\n                }\n                // Todo: Temp disabled -- see https://issues.redhat.com/browse/COST-1705\n                //\n                // if (gcp && ocp) {\n                //   options.push(...infrastructureGcpOcpOptions);\n                // }\n                if (ibm) {\n                    options.push(...infrastructureIbmOptions);\n                }\n                if (azure) {\n                    options.push(...infrastructureAzureOptions);\n                }\n                if (azure && ocp) {\n                    options.push(...infrastructureAzureOcpOptions);\n                }\n            }\n            else {\n                options.push(...ocpOptions);\n            }\n            const currentItem = this.getCurrentTab() === \"infrastructure\" /* infrastructure */ ? currentInfrastructurePerspective : currentOcpPerspective;\n            return (React.createElement(Perspective, { currentItem: currentItem || options[0].value, onSelected: this.handlePerspectiveSelected, options: options }));\n        };\n        this.getTab = (tab, contentRef, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, tabContentId: `tab-${index}`, tabContentRef: contentRef, title: React.createElement(TabTitleText, null, this.getTabTitle(tab)) }));\n        };\n        this.getTabContent = (availableTabs) => {\n            return availableTabs.map((val, index) => {\n                return (React.createElement(TabContent, { eventKey: index, key: `${getIdKeyForTab(val.tab)}-tabContent`, id: `tab-${index}`, ref: val.contentRef }, this.getTabItem(val.tab, index)));\n            });\n        };\n        this.getTabItem = (tab, index) => {\n            const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders } = this.props;\n            const { activeTabKey, currentInfrastructurePerspective, currentOcpPerspective } = this.state;\n            const emptyTab = React.createElement(React.Fragment, null); // Lazily load tabs\n            const noData = React.createElement(NoData, { showReload: false });\n            if (activeTabKey !== index) {\n                return emptyTab;\n            }\n            const currentTab = getIdKeyForTab(tab);\n            if (currentTab === \"infrastructure\" /* infrastructure */) {\n                if (currentInfrastructurePerspective === \"ocp_cloud\" /* ocpCloud */) {\n                    const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                    return hasData ? React.createElement(OcpCloudDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws\" /* aws */) {\n                    const hasData = hasCurrentMonthData(awsProviders) || hasPreviousMonthData(awsProviders);\n                    return hasData ? React.createElement(AwsDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"aws_ocp\" /* awsOcp */) {\n                    const hasData = hasCloudCurrentMonthData(awsProviders, ocpProviders) || hasCloudPreviousMonthData(awsProviders, ocpProviders);\n                    return hasData ? React.createElement(AwsOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp\" /* gcp */) {\n                    const hasData = hasCurrentMonthData(gcpProviders) || hasPreviousMonthData(gcpProviders);\n                    return hasData ? React.createElement(GcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"gcp_ocp\" /* gcpOcp */) {\n                    const hasData = hasCloudCurrentMonthData(gcpProviders, ocpProviders) || hasCloudPreviousMonthData(gcpProviders, ocpProviders);\n                    return hasData ? React.createElement(GcpOcpDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"ibm\" /* ibm */) {\n                    const hasData = hasCurrentMonthData(ibmProviders) || hasPreviousMonthData(ibmProviders);\n                    return hasData ? React.createElement(IbmDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure\" /* azure */) {\n                    const hasData = hasCurrentMonthData(azureProviders) || hasPreviousMonthData(azureProviders);\n                    return hasData ? React.createElement(AzureDashboard, null) : noData;\n                }\n                else if (currentInfrastructurePerspective === \"azure_ocp\" /* azureOcp */) {\n                    const hasData = hasCloudCurrentMonthData(azureProviders, ocpProviders) ||\n                        hasCloudPreviousMonthData(azureProviders, ocpProviders);\n                    return hasData ? React.createElement(AzureOcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else if (currentTab === \"ocp\" /* ocp */) {\n                const hasData = hasCurrentMonthData(ocpProviders) || hasPreviousMonthData(ocpProviders);\n                if (currentOcpPerspective === \"ocp\" /* ocp */) {\n                    return hasData ? React.createElement(OcpDashboard, null) : noData;\n                }\n                else {\n                    return noData;\n                }\n            }\n            else {\n                return emptyTab;\n            }\n        };\n        this.getTabs = (availableTabs) => {\n            const { activeTabKey } = this.state;\n            return (React.createElement(Tabs, { activeKey: activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((val, index) => this.getTab(val.tab, val.contentRef, index))));\n        };\n        this.getTabTitle = (tab) => {\n            const { intl } = this.props;\n            if (tab === \"infrastructure\" /* infrastructure */) {\n                return intl.formatMessage(messages.Infrastructure);\n            }\n            else if (tab === \"ocp\" /* ocp */) {\n                return intl.formatMessage(messages.OpenShift);\n            }\n        };\n        this.handlePerspectiveSelected = (value) => {\n            const currentTab = this.getCurrentTab();\n            this.setState(Object.assign(Object.assign({}, (currentTab === \"infrastructure\" /* infrastructure */ && {\n                currentInfrastructurePerspective: value,\n            })), (currentTab === \"ocp\" /* ocp */ && { currentOcpPerspective: value })));\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            const { activeTabKey } = this.state;\n            if (activeTabKey !== tabIndex) {\n                this.setState({\n                    activeTabKey: tabIndex,\n                });\n            }\n        };\n        this.isAwsAvailable = () => {\n            const { awsProviders, awsProvidersFetchStatus, userAccess } = this.props;\n            return isAwsAvailable(userAccess, awsProviders, awsProvidersFetchStatus);\n        };\n        this.isAzureAvailable = () => {\n            const { azureProviders, azureProvidersFetchStatus, userAccess } = this.props;\n            return isAzureAvailable(userAccess, azureProviders, azureProvidersFetchStatus);\n        };\n        this.isGcpAvailable = () => {\n            const { gcpProviders, gcpProvidersFetchStatus, userAccess } = this.props;\n            return isGcpAvailable(userAccess, gcpProviders, gcpProvidersFetchStatus);\n        };\n        this.isIbmAvailable = () => {\n            const { ibmProviders, ibmProvidersFetchStatus, ibmUserAccess } = this.props;\n            return isIbmAvailable(ibmUserAccess, ibmProviders, ibmProvidersFetchStatus);\n        };\n        this.isOcpAvailable = () => {\n            const { ocpProviders, ocpProvidersFetchStatus, userAccess } = this.props;\n            return isOcpAvailable(userAccess, ocpProviders, ocpProvidersFetchStatus);\n        };\n        this.isOcpCloudAvailable = () => {\n            return this.isAwsAvailable() && this.isOcpAvailable();\n        };\n    }\n    componentDidMount() {\n        const { resetState } = this.props;\n        resetState(); // Clear cached API responses\n        this.setState({\n            currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n            currentOcpPerspective: this.getDefaultOcpPerspective(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { awsProviders, azureProviders, gcpProviders, ibmProviders, ocpProviders, userAccess } = this.props;\n        // Note: User access and providers are fetched via the Permissions and InactiveSources components used by all routes\n        if (prevProps.userAccess !== userAccess ||\n            prevProps.awsProviders !== awsProviders ||\n            prevProps.azureProviders !== azureProviders ||\n            prevProps.gcpProviders !== gcpProviders ||\n            prevProps.ibmProviders !== ibmProviders ||\n            prevProps.ocpProviders !== ocpProviders) {\n            this.setState({\n                currentInfrastructurePerspective: this.getDefaultInfrastructurePerspective(),\n                currentOcpPerspective: this.getDefaultOcpPerspective(),\n            });\n        }\n    }\n    render() {\n        const { awsProvidersFetchStatus, azureProvidersFetchStatus, gcpProvidersFetchStatus, ibmProvidersFetchStatus, intl, ocpProvidersFetchStatus, userAccessFetchStatus, } = this.props;\n        const availableTabs = this.getAvailableTabs();\n        const isLoading = awsProvidersFetchStatus === 1 /* inProgress */ ||\n            azureProvidersFetchStatus === 1 /* inProgress */ ||\n            gcpProvidersFetchStatus === 1 /* inProgress */ ||\n            ibmProvidersFetchStatus === 1 /* inProgress */ ||\n            ocpProvidersFetchStatus === 1 /* inProgress */ ||\n            userAccessFetchStatus === 1 /* inProgress */;\n        // Test for no providers\n        const noAwsProviders = !this.isAwsAvailable() && awsProvidersFetchStatus === 2 /* complete */;\n        const noAzureProviders = !this.isAzureAvailable() && azureProvidersFetchStatus === 2 /* complete */;\n        const noGcpProviders = !this.isGcpAvailable() && gcpProvidersFetchStatus === 2 /* complete */;\n        const noIbmProviders = !this.isIbmAvailable() && ibmProvidersFetchStatus === 2 /* complete */;\n        const noOcpProviders = !this.isOcpAvailable() && ocpProvidersFetchStatus === 2 /* complete */;\n        const noProviders = noAwsProviders && noAzureProviders && noGcpProviders && noIbmProviders && noOcpProviders;\n        const title = intl.formatMessage(messages.OverviewTitle);\n        if (noProviders) {\n            return React.createElement(NoProviders, { title: title });\n        }\n        else if (isLoading) {\n            return React.createElement(Loading, { title: title });\n        }\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"header\", { style: styles.header },\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(Title, { headingLevel: \"h1\", size: TitleSizes['2xl'] },\n                        title,\n                        React.createElement(\"span\", { style: styles.infoIcon },\n                            React.createElement(Popover, { \"aria-label\": intl.formatMessage(messages.OverviewInfoArialLabel), enableFlip: true, bodyContent: React.createElement(React.Fragment, null,\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShiftCloudInfrastructure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftCloudInfrastructureDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.OpenShift)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.OpenShiftDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.GCP)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.GCPDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.IBM)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.IBMDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.AWS)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AWSDesc)),\n                                    React.createElement(\"br\", null),\n                                    React.createElement(\"p\", { style: styles.infoTitle }, intl.formatMessage(messages.Azure)),\n                                    React.createElement(\"p\", null, intl.formatMessage(messages.AzureDesc))) },\n                                React.createElement(Button, { variant: ButtonVariant.plain },\n                                    React.createElement(OutlinedQuestionCircleIcon, null))))),\n                    React.createElement(Currency, null)),\n                React.createElement(\"div\", { style: styles.tabs }, this.getTabs(availableTabs)),\n                React.createElement(\"div\", { style: styles.headerContent },\n                    React.createElement(\"div\", { style: styles.headerContentLeft },\n                        this.getPerspective(),\n                        this.getCostType()),\n                    React.createElement(\"div\", { style: styles.date }, getSinceDateRangeString()))),\n            React.createElement(\"div\", { style: styles.main }, this.getTabContent(availableTabs))));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const awsProvidersQueryString = getProvidersQuery(awsProvidersQuery);\n    const awsProviders = providersSelectors.selectProviders(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const awsProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, awsProvidersQueryString);\n    const azureProvidersQueryString = getProvidersQuery(azureProvidersQuery);\n    const azureProviders = providersSelectors.selectProviders(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const azureProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"azure\" /* azure */, azureProvidersQueryString);\n    const gcpProvidersQueryString = getProvidersQuery(gcpProvidersQuery);\n    const gcpProviders = providersSelectors.selectProviders(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const gcpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"gcp\" /* gcp */, gcpProvidersQueryString);\n    const ibmProvidersQueryString = getProvidersQuery(ibmProvidersQuery);\n    const ibmProviders = providersSelectors.selectProviders(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ibmProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ibm\" /* ibm */, ibmProvidersQueryString);\n    const ocpProvidersQueryString = getProvidersQuery(ocpProvidersQuery);\n    const ocpProviders = providersSelectors.selectProviders(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const ocpProvidersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"ocp\" /* ocp */, ocpProvidersQueryString);\n    const userAccessQueryString = getUserAccessQuery(allUserAccessQuery);\n    const userAccess = userAccessSelectors.selectUserAccess(state, \"\" /* all */, userAccessQueryString);\n    const userAccessError = userAccessSelectors.selectUserAccessError(state, \"\" /* all */, userAccessQueryString);\n    const userAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"\" /* all */, userAccessQueryString);\n    // Todo: temporarily request IBM separately with beta flag.\n    const ibmUserAccessQueryString = getUserAccessQuery(ibmUserAccessQuery);\n    const ibmUserAccess = userAccessSelectors.selectUserAccess(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessError = userAccessSelectors.selectUserAccessError(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    const ibmUserAccessFetchStatus = userAccessSelectors.selectUserAccessFetchStatus(state, \"ibm\" /* ibm */, ibmUserAccessQueryString);\n    return {\n        awsProviders,\n        awsProvidersFetchStatus,\n        awsProvidersQueryString,\n        azureProviders,\n        azureProvidersFetchStatus,\n        azureProvidersQueryString,\n        gcpProviders,\n        gcpProvidersFetchStatus,\n        gcpProvidersQueryString,\n        ibmProviders,\n        ibmProvidersFetchStatus,\n        ibmProvidersQueryString,\n        ibmUserAccess,\n        ibmUserAccessError,\n        ibmUserAccessFetchStatus,\n        ibmUserAccessQueryString,\n        ocpProviders,\n        ocpProvidersFetchStatus,\n        ocpProvidersQueryString,\n        userAccess,\n        userAccessError,\n        userAccessFetchStatus,\n        userAccessQueryString,\n    };\n});\nconst mapDispatchToProps = {\n    resetState: uiActions.resetState,\n};\nconst Overview = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OverviewBase));\nexport default Overview;\n","import Overview from './overview';\nexport default Overview;\n","import { getLocale, intl } from 'components/i18n';\nimport messages from 'locales/messages';\n// Returns the number of decimals for given string\nexport const countDecimals = (value, useLocale = false) => {\n    const decimalSeparator = useLocale ? Number('1.1').toLocaleString(getLocale(), {}).substring(1, 2) : '.';\n    const decimals = value.split(decimalSeparator);\n    return decimals[1] ? decimals[1].length : 0;\n};\n// Returns i18n key for given units\nexport const unitsLookupKey = (units) => {\n    const lookup = units ? units.replace(/[- ]/g, '_').toLowerCase() : '';\n    switch (lookup) {\n        case 'core_hours':\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'hour':\n        case 'hrs':\n        case 'tag_mo':\n        case 'vm_hours':\n            return lookup;\n        default:\n            return undefined;\n    }\n};\n// Currencies are formatted differently, depending on the locale you're using. For example, the dollar\n// sign may appear on the left or the right of the currency symbol for French Vs German.\n//\n// Using the ISO currency code AUD, $12.34 USD is formatted per the locales below.\n// See ICU currencies https://www.localeplanet.com/icu/currency.html\n//\n// en: A$12.34\n// fr: 12,34 $AU\n// de: 12,34 AU$\n//\n// Note: Some currencies do not have decimals, such as JPY, and some have 3 decimals such as IQD.\n// See https://docs.adyen.com/development-resources/currency-codes\nexport const formatCurrency = (value, units, options = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Don't specify default fraction digits here, rely on react-intl instead\n    return intl.formatNumber(fValue, Object.assign({ style: 'currency', currency: units ? units.toUpperCase() : 'USD' }, options));\n};\nexport const formatCurrencyAbbreviation = (value, units = 'USD') => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    // Derived from https://stackoverflow.com/questions/37799955/how-can-i-format-big-numbers-with-tolocalestring\n    const abbreviationFormats = [\n        { val: 1e15, symbol: 'quadrillion' },\n        { val: 1e12, symbol: 'trillion' },\n        { val: 1e9, symbol: 'billion' },\n        { val: 1e6, symbol: 'million' },\n        { val: 1e3, symbol: 'thousand' },\n    ];\n    // Find the proper format to use\n    let format;\n    if (abbreviationFormats != null) {\n        format = abbreviationFormats.find(f => fValue >= f.val);\n    }\n    // Apply format and insert symbol next to the numeric portion of the formatted string\n    if (format != null) {\n        const { val, symbol } = format;\n        return intl.formatMessage(messages.CurrencyAbbreviations, {\n            symbol,\n            value: formatCurrency(fValue / val, units, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0,\n            }),\n        });\n    }\n    // If no format was found, format value without abbreviation\n    return formatCurrency(value, units, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n    });\n};\n// Cost model rates may contain 0 to 10 decimals\n// https://issues.redhat.com/browse/COST-1884\nexport const formatRate = (value, units, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 10,\n}) => {\n    return formatCurrency(value, units, options);\n};\n// Some locales have a comma decimal separator (e.g., \"1.234,56\" in German is \"1,234.56\" USD).\n// This function formats a given rate using the current browser locale, but without a currency symbol.\n//\n// It does not replace the thousands separator or other special characters, so we don't hide errors from text inputs.\n// This is expected to be used in conjunction with a validator, ensuring thousands separators are not accepted.\n// For example, if the user enters \"1,234,56\" or \"1.234.56\", a validator should generate an isNaN error.\n//\n// Note: Use locale='en' to format as USD when submitting API values.\nexport const formatRaw = (value, locale = getLocale()) => {\n    // Get decimal separator used by current browser locale\n    const decimalSeparator = Number('1.1').toLocaleString(locale, {}).substring(1, 2);\n    const search = decimalSeparator === ',' ? /\\./g : /,/g;\n    return value.replace(search, decimalSeparator);\n};\n// Returns formatted units or currency with given currency-code\nexport const formatUnits = (value, units, options) => {\n    const lookup = unitsLookupKey(units);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'core_hours':\n        case 'hour':\n        case 'hrs':\n            return formatUsageHrs(fValue, options);\n        case 'gb':\n        case 'gb_hours':\n        case 'gb_mo':\n        case 'gibibyte_month':\n        case 'tag_mo':\n        case 'vm_hours':\n            return formatUsageGb(fValue, options);\n    }\n    return unknownTypeFormatter(fValue, options);\n};\nexport const formatPercentage = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageGb = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst formatUsageHrs = (value, options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n}) => {\n    return value.toLocaleString(getLocale(), options);\n};\nconst unknownTypeFormatter = (value, options) => {\n    return value.toLocaleString(getLocale(), options);\n};\n","const hasAccess = (userAccess, userAccessType) => {\n    let result = false;\n    if (userAccess && Array.isArray(userAccess.data)) {\n        // Used with multiple types (e.g., type=)\n        const data = userAccess.data.find(d => d.type === userAccessType);\n        result = data && data.access;\n    }\n    else {\n        // Used with type=any, type=GCP, etc.\n        result = userAccess && userAccess.data === true;\n    }\n    return result;\n};\nconst hasProviders = (providers, providersFetchStatus) => {\n    let result = false;\n    if (providersFetchStatus === 2 /* complete */) {\n        // providers API returns empty data array for no sources\n        result = providers !== undefined && providers.meta !== undefined && providers.meta.count > 0;\n    }\n    return result;\n};\n// Returns true if user has access to AWS\nexport const hasAwsAccess = (userAccess) => {\n    return hasAccess(userAccess, \"aws\" /* aws */);\n};\n// Returns true if user has access to AWS and at least one source provider\nexport const isAwsAvailable = (userAccess, awsProviders, awsProvidersFetchStatus) => {\n    return hasAwsAccess(userAccess) && hasProviders(awsProviders, awsProvidersFetchStatus);\n};\n// Returns true if user has access to Azure\nexport const hasAzureAccess = (userAccess) => {\n    return hasAccess(userAccess, \"azure\" /* azure */);\n};\n// Returns true if user has access to Azure and at least one source provider\nexport const isAzureAvailable = (userAccess, azureProviders, azureProvidersFetchStatus) => {\n    return hasAzureAccess(userAccess) && hasProviders(azureProviders, azureProvidersFetchStatus);\n};\n// Returns true if user has access to cost models\nexport const hasCostModelAccess = (userAccess) => {\n    return hasAccess(userAccess, \"cost_model\" /* cost_model */);\n};\n// Returns true if user has access to GCP\nexport const hasGcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */);\n};\n// Returns true if user has access to GCP and at least one source provider\nexport const isGcpAvailable = (userAccess, gcpProviders, gcpsProvidersFetchStatus) => {\n    return hasAccess(userAccess, \"gcp\" /* gcp */) && hasProviders(gcpProviders, gcpsProvidersFetchStatus);\n};\n// Returns true if user has access to IBM\nexport const hasIbmAccess = (userAccess) => {\n    return hasGcpAccess(userAccess);\n};\n// Returns true if user has access to IBM and at least one source provider\nexport const isIbmAvailable = (userAccess, ibmProviders, ibmProvidersFetchStatus) => {\n    return hasIbmAccess(userAccess) && hasProviders(ibmProviders, ibmProvidersFetchStatus);\n};\n// Returns true if user has access to OCP\nexport const hasOcpAccess = (userAccess) => {\n    return hasAccess(userAccess, \"ocp\" /* ocp */);\n};\n// Returns true if user has access to OCP and at least one source provider\nexport const isOcpAvailable = (userAccess, ocpProviders, ocpProvidersFetchStatus) => {\n    return hasOcpAccess(userAccess) && hasProviders(ocpProviders, ocpProvidersFetchStatus);\n};\n"],"names":["getUserAccessQuery","query","stringify","encode","indices","LoadingState","intl","title","formatMessage","subTitle","EmptyState","variant","EmptyStateVariant","className","Spinner","size","Title","headingLevel","EmptyStateBody","styles","perspectiveSelector","display","alignItems","perspectiveLabel","marginBottom","marginRight","whiteSpace","perspectiveOptionLabel","marginLeft","marginTop","PerspectiveBase","constructor","super","arguments","this","defaultState","isSelectOpen","state","Object","assign","getSelectOptions","options","props","selections","map","option","push","toString","label","value","getSelect","currentItem","isDisabled","length","style","selectOptions","selection","find","item","Select","id","isOpen","onSelect","handleSelect","onToggle","handleToggle","SelectVariant","SelectOption","key","event","onSelected","setState","render","messages","Perspective","injectIntl","DashboardBase","DashboardWidget","selectWidgets","widgets","Grid","hasGutter","widgetId","details","showHorizontal","GridItem","sm","lg","xl","xl2","ChartComparisonBase","isChartComparisonOpen","getDropDownItems","DropdownItem","component","onClick","handleClick","getCurrentLabel","onItemClicked","dropdownItems","Dropdown","toggle","DropdownToggle","ChartComparison","chartStyles","chartAltHeight","chartHeight","containerAltHeight","containerTrendHeight","containerUsageHeight","comparison","global_spacer_md","tabs","global_spacer_2xl","tabItems","global_spacer_xl","DashboardWidgetBase","activeTabKey","currentComparison","buildDetailsLink","tab","getIdKeyForTab","currentTab","viewAllPath","group_by","order_by","cost","getChart","containerHeight","height","adjustContainerHeight","chartType","trend","getDailyTrendChart","showInfrastructureLabel","showSupplementaryLabel","getDailyCostChart","getTrendChart","getUsageChart","getChartComparison","units","getFormattedUnits","cumulativeTitle","titleKey","dailyTitleKey","handleComparisonClick","currentReport","previousReport","computedReportItem","computedReportItemValue","daily","type","currentInfrastructureData","previousInfrastructureData","currentCostData","previousCostData","forecastData","getForecastData","computedForecastItem","forecastInfrastructureData","computedForecastInfrastructureItem","ReportSummaryComponent","currentInfrastructureCostData","forecastConeData","forecastInfrastructureConeData","formatOptions","formatter","format","previousInfrastructureCostData","showForecast","undefined","currentData","previousData","showUsageLegendLabel","getUnits","report","forecast","newForecast","cloneDeep","data","total","meta","reportedValues","filter","val","values","lastReported","date","lastReportedDate","Date","lastReportedMonth","getMonth","forecastDate","forecastMonth","firstReported","getNumberOfDays","unshift","confidence_max","confidence_min","infrastructure","supplementary","start","end","date1","diffInTime","getTime","Math","round","currentRequestData","previousRequestData","currentUsageData","previousUsageData","getDetails","reportType","costLabel","getDetailsLabel","costKey","requestLabel","requestKey","showTooltip","showUnits","showUsageFirst","usageFormatOptions","usageLabel","usageKey","getDetailsLink","Link","to","getDetailsLinkTitle","count","getHorizontalLayout","currentReportFetchStatus","detailsLink","status","getTabs","getTitle","getTab","index","tabsReport","tabsReportFetchStatus","Tab","eventKey","TabTitleText","getTabTitle","idKey","items","reportItem","getTabItem","availableTabs","topItems","activeTab","totalValue","hasTotal","usage","Tabs","isFilled","activeKey","handleTabClick","getVerticalLayout","Boolean","tabIndex","updateTab","componentDidMount","fetchForecasts","fetchReports","mapStateToProps","widget","awsDashboard","queries","currentQuery","current","forecastQuery","previousQuery","previous","tabsQuery","reportPathsType","forecastPathsType","forecastType","mapDispatchToProps","AwsDashboardWidget","connect","awsOcpDashboard","AwsOcpDashboardWidget","azureDashboard","AzureDashboardWidget","azureOcpDashboard","AzureOcpDashboardWidget","gcpDashboard","GcpDashboardWidget","gcpOcpDashboard","GcpOcpDashboardWidget","ibmDashboard","IbmDashboardWidget","ocpCloudDashboard","OcpCloudDashboardWidget","ocpDashboard","OcpDashboardWidget","alignSelf","flexGrow","textAlign","costType","header","backgroundColor","global_BackgroundColor_light_100","padding","global_spacer_lg","headerContent","justifyContent","headerContentLeft","infoIcon","fontSize","global_FontSize_md","infoTitle","fontWeight","main","paddingBottom","paddingTop","ocpOptions","infrastructureAwsOptions","infrastructureAwsOcpOptions","infrastructureAzureOptions","infrastructureAzureOcpOptions","infrastructureGcpOptions","infrastructureIbmOptions","infrastructureOcpCloudOptions","OverviewBase","getAvailableTabs","isOcpAvailable","contentRef","isAwsAvailable","isAzureAvailable","isGcpAvailable","isIbmAvailable","isOcpCloudAvailable","getCostType","currentInfrastructurePerspective","currentOcpPerspective","getCurrentTab","aws","azure","gcp","ibm","ocp","ocpCloud","getDefaultInfrastructurePerspective","insights","chrome","isBeta","getDefaultOcpPerspective","ocpProviders","ocpProvidersFetchStatus","userAccess","getPerspective","handlePerspectiveSelected","tabContentId","tabContentRef","getTabContent","TabContent","ref","awsProviders","azureProviders","gcpProviders","ibmProviders","emptyTab","noData","showReload","hasData","awsProvidersFetchStatus","azureProvidersFetchStatus","gcpProvidersFetchStatus","ibmProvidersFetchStatus","ibmUserAccess","resetState","componentDidUpdate","prevProps","userAccessFetchStatus","isLoading","noAwsProviders","noAzureProviders","noGcpProviders","noIbmProviders","noOcpProviders","noProviders","TitleSizes","Popover","enableFlip","bodyContent","Button","ButtonVariant","awsProvidersQueryString","azureProvidersQueryString","gcpProvidersQueryString","ibmProvidersQueryString","ocpProvidersQueryString","userAccessQueryString","userAccessError","ibmUserAccessQueryString","ibmUserAccessError","ibmUserAccessFetchStatus","ui","countDecimals","useLocale","decimalSeparator","Number","toLocaleString","substring","decimals","split","unitsLookupKey","lookup","replace","toLowerCase","formatCurrency","fValue","currency","toUpperCase","formatCurrencyAbbreviation","abbreviationFormats","symbol","f","minimumFractionDigits","maximumFractionDigits","formatRate","formatRaw","locale","search","formatUnits","formatUsageHrs","formatUsageGb","unknownTypeFormatter","formatPercentage","hasAccess","userAccessType","result","Array","isArray","d","access","hasProviders","providers","providersFetchStatus","hasAwsAccess","hasAzureAccess","hasCostModelAccess","hasGcpAccess","gcpsProvidersFetchStatus","hasIbmAccess","hasOcpAccess"],"sourceRoot":""}