{"version":3,"sources":["webpack:///./src/utils/formatValue.ts","webpack:///./src/components/charts/commonChart/chartUtils.ts","webpack:///./src/utils/sort.ts","webpack:///./src/testIds.ts","webpack:///./src/components/charts/chartTheme/theme-koku.ts","webpack:///./src/components/charts/chartTheme/index.ts","webpack:///./src/components/charts/chartTheme/theme-utils.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.styles.ts","webpack:///./src/components/state/emptyValueState/emptyValueState.tsx","webpack:///./src/utils/getComputedOcpReportItems.ts","webpack:///./src/utils/getComputedOcpCloudReportItems.ts","webpack:///./src/utils/getComputedAzureReportItems.ts","webpack:///./src/utils/getComputedAwsReportItems.ts","webpack:///./src/utils/equal.ts","webpack:///./src/utils/dateRange.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.styles.ts","webpack:///./src/components/state/noProvidersState/noProvidersState.tsx","webpack:///./src/components/charts/trendChart/trendChart.styles.ts","webpack:///./src/components/charts/trendChart/trendChart.tsx","webpack:///./src/components/charts/trendChart/index.ts","webpack:///./src/components/details/detailsDataToolbar.styles.ts","webpack:///./src/components/details/detailsDataToolbar.tsx","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.styles.ts","webpack:///./src/components/charts/historicalTrendChart/historicalTrendChart.tsx","webpack:///./src/components/charts/historicalTrendChart/index.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummary.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryAlt.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryDetails.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItem.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryItems.tsx","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.styles.ts","webpack:///./src/components/reports/awsReportSummary/awsReportSummaryTrend.tsx","webpack:///./src/components/reports/awsReportSummary/index.ts","webpack:///./src/components/details/tertiaryNav.tsx","webpack:///./src/pages/awsDetails/awsDetails.styles.ts","webpack:///./src/pages/awsDetails/detailsHeader.styles.ts","webpack:///./src/pages/awsDetails/groupBy.styles.ts","webpack:///./src/pages/awsDetails/groupBy.tsx","webpack:///./src/pages/awsDetails/detailsHeader.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.styles.ts","webpack:///./src/pages/awsDetails/detailsTagView.tsx","webpack:///./src/pages/awsDetails/detailsTagModal.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetModalView.tsx","webpack:///./src/pages/awsDetails/detailsWidgetModal.tsx","webpack:///./src/pages/awsDetails/exportModal.styles.ts","webpack:///./src/pages/awsDetails/exportModal.tsx","webpack:///./src/pages/awsDetails/historicalChart.styles.ts","webpack:///./src/pages/awsDetails/historicalChart.tsx","webpack:///./src/pages/awsDetails/historicalModal.styles.ts","webpack:///./src/pages/awsDetails/historicalModal.tsx","webpack:///./src/pages/awsDetails/detailsActions.tsx","webpack:///./src/pages/awsDetails/detailsTable.styles.ts","webpack:///./src/pages/awsDetails/detailsTableItem.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.styles.ts","webpack:///./src/pages/awsDetails/detailsTag.tsx","webpack:///./src/pages/awsDetails/detailsWidget.styles.ts","webpack:///./src/pages/awsDetails/detailsWidgetView.tsx","webpack:///./src/pages/awsDetails/detailsWidget.tsx","webpack:///./src/pages/awsDetails/detailsTableItem.tsx","webpack:///./src/pages/awsDetails/detailsTable.tsx","webpack:///./src/pages/awsDetails/detailsToolbar.tsx","webpack:///./src/pages/awsDetails/awsDetails.tsx","webpack:///./src/pages/awsDetails/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","unitLookupKey","formatValue","formatCurrency","unit","lookup","toLowerCase","value","options","fValue","formatUsageGb","formatUsageHrs","unknownTypeFormatter","_unit","fractionDigits","toLocaleString","minimumFractionDigits","maximumFractionDigits","style","currency","transformAwsReport","transformAzureReport","transformOcpReport","transformOcpCloudReport","getDateRange","getMaxValue","getTooltipContent","getTooltipLabel","getCostRangeString","getUsageRangeString","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0__","date_fns_end_of_month__WEBPACK_IMPORTED_MODULE_0___default","n","date_fns_format__WEBPACK_IMPORTED_MODULE_1__","date_fns_format__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_2___default","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3__","date_fns_get_year__WEBPACK_IMPORTED_MODULE_3___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_4___default","i18next__WEBPACK_IMPORTED_MODULE_5__","utils_formatValue__WEBPACK_IMPORTED_MODULE_6__","utils_getComputedAwsReportItems__WEBPACK_IMPORTED_MODULE_7__","utils_getComputedAzureReportItems__WEBPACK_IMPORTED_MODULE_8__","utils_getComputedOcpCloudReportItems__WEBPACK_IMPORTED_MODULE_9__","utils_getComputedOcpReportItems__WEBPACK_IMPORTED_MODULE_10__","report","type","key","reportItem","items","idKey","sortKey","sortDirection","computedItems","Object","map","i","createDatum","reduce","acc","prevValue","length","y","computedItem","x","id","label","Number","isFloat","parseFloat","toFixed","isInt","name","units","datums","firstOfMonth","lastOfMonth","offset","start","end","today","Date","setMonth","getMonth","getDatumDateRange","setDate","lastDate","getDate","max","forEach","datum","t","formatOptions","toString","count","endDate","month","startDate","year","getValueForItem","item","sort","array","direction","a","b","aVal","bVal","getTestProps","testIds","data-testid","details","historical_data_btn","tag_lnk","show_more_btn","view_all_btn","export","cancel_btn","submit_btn","login","alert","form","username_input","password_input","submit","masthead","username","sidebarToggle","logout","onboarding","btn_cancel","btn_back","btn_continue","btn_close","type_selector","type_opt_aws","type_opt_ocp","type_opt_non","name_input","check_box_1","check_box_2","s3_input","clusterid_input","arn_input","providers","add_btn","bucket_input","empty_state_add_btn","resource_name_input","cluster_id_input","type_input","view_all_link","sidebar","nav","link","backdrop","LAYOUT_PROPS","padding","theme_koku","area","assign","axis","bar","boxplot","candlestick","chart","errorbar","group","legend","line","pie","scatter","stack","tooltip","voronoi","chartTheme_ChartTheme","chart_theme","ChartTheme","default","theme_utils","styles","StyleSheet","create","container","fontSize","dist_esm","EmptyValueState","react_default","createElement","className","minus_icon","getComputedOcpReportItems","getUnsortedComputedOcpReportItems","getIdKeyForGroupBy","_sort__WEBPACK_IMPORTED_MODULE_0__","labelKey","itemMap","Map","visitDataPoint","dataPoint","values","cluster_alias","clusters","undefined","cluster","capacity","cost","derivedCost","derived_cost","infrastructureCost","infrastructure_cost","idSuffix","limit","request","usage","get","set","deltaPercent","delta_percent","deltaValue","delta_value","Array","data","from","groupBy","project","node","getComputedOcpCloudReportItems","getUnsortedComputedOcpCloudReportItems","markupCost","markup_cost","account_alias","getComputedAzureReportItems","getUnsortedComputedAzureReportItems","subscription_guid","instance_type","resource_location","service_name","getComputedAwsReportItems","getUnsortedComputedAwsReportItems","account","region","service","isEqual","obj1","obj2","JSON","stringify","split","join","getNoDataForDateRangeString","getForDateRangeString","getSinceDateRangeString","date_fns_format__WEBPACK_IMPORTED_MODULE_0__","date_fns_format__WEBPACK_IMPORTED_MODULE_0___default","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1__","date_fns_get_date__WEBPACK_IMPORTED_MODULE_1___default","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2__","date_fns_get_month__WEBPACK_IMPORTED_MODULE_2___default","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3__","date_fns_start_of_month__WEBPACK_IMPORTED_MODULE_3___default","i18next__WEBPACK_IMPORTED_MODULE_4__","display","justifyContent","height","marginTop","viewSources","NoProvidersState","mapStateToProps","common","state","es","react_redux_es","openProvidersModal","openModal","Component","[object Object]","super","arguments","this","getViewSources","props","Link","to","EmptyState","EmptyStateIcon","icon","dollar_sign_icon","Title","size","EmptyStateBody","chartStyles","labels","fontFamily","esm","minWidth","legendColorScale","previousMonth","fill","stroke","currentMonth","yAxis","axisLabel","grid","ticks","tickLabels","xAxis","chartContainer",":not(foo) svg","overflow","trendChart_TrendChart","containerRef","createRef","hiddenSeries","Set","width","initDatum","currentData","previousData","showUsageLegendLabel","setState","series","childName","legendItem","chartUtils","symbol","handleResize","current","clientWidth","getChart","index","ChartArea","has","interpolation","getLegend","ChartLegend","colorScale","getLegendData","gutter","orientation","formatDatumValue","formatDatumOptions","handleLegendClick","delete","add","isDataAvailable","unavailable","s","isSeriesHidden","push","getChartNames","result","serie","getEvents","chart_interactive_legend","chartNames","isHidden","legendName","onLegendClick","setTimeout","window","addEventListener","prevProps","removeEventListener","domain","maxCurrent","maxPrevious","maxValue","Math","ceil","previousDate","get_date_default","currentDate","adjustContainerHeight","containerHeight","title","ChartVoronoiContainer","allowTooltip","constrainToVisibleArea","voronoiDimension","getDomain","getEndDate","midDate","floor","adjustedContainerHeight","ref","Chart","containerComponent","events","legendComponent","legendData","legendPosition","theme","chartTheme","ChartAxis","tickValues","dependentAxis","marginRight","toolbarContainer","backgroundColor","paddingBottom","paddingTop","paddingLeft","paddingRight","marginLeft","DetailsDataToolbar","defaultFilters","tag","defaultState","categoryInput","filters","lodash","isCategoryDropdownOpen","isTagKeyDropdownOpen","isTagKeySelectExpanded","isTagValueSelectExpanded","getDefaultCategory","categoryOptions","option","indexOf","api_query","getActiveFilters","query","filter_by","keys","isArray","substring","onDelete","filterType","prevState","filter","_filterType","onFilterRemoved","getCurrentCategoryOption","currentCategory","onCategoryClick","onCategorySelect","event","currentTagKey","onCategoryToggle","isOpen","getCategoryInput","categoryOption","DataToolbarFilter","categoryName","chips","deleteChip","showToolbarItem","InputGroup","TextInput","aria-label","onChange","onCategoryInputChange","placeholder","onKeyDown","evt","onCategoryInput","Button","variant","control","onClick","search_icon","getDefaultCategoryOptions","trim","prevFilters","includes","onFilterAdded","getTagKeySelect","selectOptions","getTagKeyOptions","selectOption","SelectOption","DataToolbarItem","Select","selectConstants","typeahead","onClear","onTagKeyClear","onToggle","onTagKeyToggle","onSelect","onTagKeySelect","isExpanded","placeholderText","selections","selection","isPlaceholder","getTagValueSelect","tagKeyOption","getTagValueOptions","checkbox","onTagValueToggle","onTagValueSelect","checked","target","prevSelections","getExportButton","isExportDisabled","isDisabled","handleExportClicked","external_link_square_alt_icon","onExportClicked","equal","Dropdown","position","dropdownConstants","left","toggle","DropdownToggle","filter_icon","dropdownItems","DropdownItem","val","pagination","showExport","DataToolbar","clearAllFilters","collapseListedFiltersBreakpoint","DataToolbarContent","DataToolbarToggleGroup","toggleIcon","breakpoint","DataToolbarGroup","getCategoryDropdown","Boolean","breakpointMods","modifier","itemsPerRow","historicalTrendChart_HistoricalTrendChart","legendItemsPerRow","xAxisLabel","yAxisLabel","chartSkeleton","marginBottom","legendSkeleton","reportSummary","subtitle","color","var","AwsReportSummary","children","detailsLink","subTitle","status","Card","CardHeader","CardBody","Fragment","Skeleton","xs","md","sm","CardFooter","awsReportSummaryAlt_styles_styles","flexGrow","minHeight","tops","AwsReportSummaryAlt","tabs","Grid","GridItem","lg","xl","awsReportSummaryDetails_styles_styles","reportSummaryDetails","alignItems","text","lineHeight","valueContainer","wordWrap","AwsReportSummaryDetails","costLabel","reportType","showUnits","showUsageFirst","usageFormatOptions","usageLabel","emptyValueState","meta","total","getCostLayout","getUsageLayout","usageUnits","utils_formatValue","unitsLabel","awsReportSummaryItem_styles_styles","reportSummaryItem",":not(:last-child)","test","AwsReportSummaryItemBase","totalValue","percentVal","percentLabel","percent","Progress","defaultProps","v","AwsReportSummaryItem","awsReportSummaryItems_styles_styles","skeleton","AwsReportSummaryItems","nextProps","otherIndex","findIndex","slice","getItems","awsReportSummaryTrend_styles_styles","AwsReportSummaryTrend","trendChart","TertiaryNav","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_0__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_1__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_2__","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_4___default","react_i18next__WEBPACK_IMPORTED_MODULE_5__","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","getIdKeyForNavItem","navItem","getAvailableNavItems","getNavItemTitle","getNavItem","activeItem","navItemKey","itemId","isActive","handleOnSelect","selectedItem","history","replace","availableNavItems","tertiary","awsDetails","content","paginationContainer","tableContainer","detailsHeader_styles_styles","costValue","costLabelUnit","costLabelDate","header","groupBy_styles_styles","groupBySelector","groupBySelectorLabel","groupByOptions","queryString","awsQuery","resolution","time_scope_units","time_scope_value","awsReports","selectReport","reportFetchStatus","selectReportFetchStatus","mapDispatchToProps","fetchReport","GroupBy","stateProps","dispatchProps","currentItem","isGroupByOpen","handleGroupByClick","onItemClicked","getDropDownItems","component","getDropDownTags","getGroupBy","queryFromRoute","location","search","group_by","groupByKeys","handleGroupBySelect","handleGroupByToggle","bind","baseQuery","delta","detailsHeader_reportType","detailsHeader_mapStateToProps","reportError","selectReportError","providersQueryString","providersQuery","store_providers","selectProviders","providersError","selectProvidersError","providersFetchStatus","selectProvidersFetchStatus","detailsHeader_mapDispatchToProps","DetailsHeader","onGroupByClicked","showContent","sizes","tertiaryNav","dateRange","detailsTagModal_styles_styles","modal","textAlign","modalOverride","index_esm","detailsTagView_reportType","detailsTagView_mapStateToProps","detailsTagView_mapDispatchToProps","DetailsTagView","getTags","tags","DetailsTagModal","handleClose","onClose","Modal","detailsWidgetModal_styles_styles","mainContent","detailsWidgetModal_styles_modalOverride","detailsWidgetModalView_reportType","detailsWidgetModalView_mapStateToProps","parentGroupBy","detailsWidgetModalView_mapDispatchToProps","DetailsWidgetModalView","awsReportSummary","_item","DetailsWidgetModal","isLarge","exportModal_styles_styles","h2","input","ul","resolutionOptions","exportModal_mapStateToProps","error","awsExport","selectExportError","selectExport","fetchStatus","selectExportFetchStatus","exportModal_mapDispatchToProps","exportReport","ExportModal","getQueryString","isAllItems","newQuery","parse","order_by","handleFetchReport","handleResolutionChange","_","currentTarget","sortedItems","selectedLabel","actions","secondary","primary","Form","FormGroup","fieldId","Radio","isValid","groupItem","chartHeight","chartContainerHeight","historicalChart_styles_styles","costChart","instanceChart","storageChart","costReportType","instanceReportType","storageReportType","historicalChart_mapStateToProps","currentQueryString","previousQueryString","currentCostReport","awsReportsSelectors","currentCostReportFetchStatus","currentInstanceReport","currentInstanceReportFetchStatus","currentStorageReport","currentStorageReportFetchStatus","previousCostReport","previousCostReportFetchStatus","previousInstanceReport","previousInstanceReportFetchStatus","previousStorageReport","previousStorageReportFetchStatus","historicalChart_mapDispatchToProps","awsReportsActions","HistoricalChart","getSkeleton","currentCostData","previousCostData","currentInstanceData","previousInstanceData","currentStorageData","previousStorageData","costUnits","historicalTrendChart","historicalModal_styles_styles","historicalModal_styles_modalOverride","historicalModal_mapStateToProps","currentQuery","previousQuery","widgets","awsDashboard","selectCurrentWidgets","HistoricalModal","DetailsActions","isDropdownOpen","isExportModalOpen","isHistoricalModalOpen","isTagModalOpen","isWidgetModalOpen","getExportModal","handleExportModalClose","getHistoricalModal","handleHistoricalModalClose","getTagModal","handleTagModalClose","getWidgetModal","handleWidgetModalClose","handleExportModalOpen","handleHistoricalModalOpen","handleTagModalOpen","handleWidgetModalOpen","handleOnToggle","KebabToggle","isPlain","detailsTable_styles_styles","emptyState","infoArrow","infoArrowDesc","bottom","infoDescription","monthOverMonthOverride","tableOverride","detailsTableItem_styles_styles","clusterContainer","historicalContainer","leftPane","rightPane","tagsContainer","detailsTag_styles_styles","detailsTag_reportType","detailsTag_mapStateToProps","detailsTag_mapDispatchToProps","DetailsTag","showAll","handleOpen","preventDefault","charCount","someTags","allTags","tagString","concat","tagIndex","href","detailsWidget_styles_styles","viewAllContainer","detailsWidgetView_reportType","detailsWidgetView_mapStateToProps","detailsWidgetView_mapDispatchToProps","DetailsWidgetView","getTabItem","getViewAll","button","getIdKeyForTab","tab","detailsWidget_mapStateToProps","availableTabs","DetailsWidget","activeTabKey","handleTabClick","tabIndex","getAvailableTabs","getTab","Tab","eventKey","getTabTitle","activeTab","currentTab","getTabs","Tabs","isFilled","activeKey","detailsTableItem_mapStateToProps","DetailsTableItem","DetailsTable","columns","rows","groupById","groupByTagKey","getGroupByTagKey","orderBy","transforms","sortable","monthOverMonth","getMonthOverMonthCost","getTotalCost","getActions","cells","tableItem","parent","sortBy","getEmptyState","emptyFilterState","showMargin","calculator_icon","abs","percentage","showPercentage","showValue","iconOverride","getSortBy","Table","asc","c","column","desc","getTableItem","handleOnCollapse","rowId","isSelected","onSelected","row","selected","selectedItems","handleOnSort","onSort","currentReport","previousReport","onCollapse","gridBreakPoint","Header","Body","detailsToolbar_reportType","detailsToolbar_mapStateToProps","detailsToolbar_mapDispatchToProps","DetailsToolbar","getCategoryOptions","detailsDataToolbar","awsDetails_reportType","awsDetails_baseQuery","awsDetails_mapStateToProps","awsDetails_mapDispatchToProps","groupByTag","getPagination","isBottom","page","Pagination","isCompact","itemCount","onPerPageSelect","handlePerPageSelect","onSetPage","handleSetPage","perPage","top","widgetId","getTable","handleSelected","handleSort","getToolbar","handleFilterAdded","handleFilterRemoved","filterValue","found","filteredQuery","getRouteForQuery","groupByKey","_event","pageNumber","sortType","isSortAscending","updateReport","noReport","noLocation","newItems","reset","isLoading","noProviders","errorState","noProvidersState","loadingState"],"mappings":"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","file":"f7723209b883f3d2d4ff.bundle.js","sourcesContent":["export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    switch (lookup) {\n        case 'usd':\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'core-hours':\n        case 'hrs':\n        case 'tag-mo':\n        case 'vm-hours':\n            return lookup;\n        default:\n            return '';\n    }\n};\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n        case 'tag-mo':\n        case 'vm-hours':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\nconst unknownTypeFormatter = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageGb = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\nexport const formatUsageHrs = (value, _unit, { fractionDigits = 0 } = {}) => {\n    return value.toLocaleString('en', {\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits,\n    });\n};\n","import endOfMonth from 'date-fns/end_of_month';\nimport format from 'date-fns/format';\nimport formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getYear from 'date-fns/get_year';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nimport { unitLookupKey, } from 'utils/formatValue';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { getComputedAzureReportItems, } from 'utils/getComputedAzureReportItems';\nimport { getComputedOcpCloudReportItems, } from 'utils/getComputedOcpCloudReportItems';\nimport { getComputedOcpReportItems, } from 'utils/getComputedOcpReportItems';\nexport function transformAwsReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAwsReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformAzureReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedAzureReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpReport(report, type = 1 /* daily */, key = 'date', reportItem = 'cost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function transformOcpCloudReport(report, type = 1 /* daily */, key = 'date', reportItem = 'infrastructureCost') {\n    if (!report) {\n        return [];\n    }\n    const items = {\n        report,\n        idKey: key,\n        sortKey: 'id',\n        sortDirection: 1 /* desc */,\n    };\n    const computedItems = getComputedOcpCloudReportItems(items);\n    if (type === 1 /* daily */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    if (type === 2 /* monthly */) {\n        return computedItems.map(i => createDatum(i[reportItem], i, key));\n    }\n    return computedItems.reduce((acc, d) => {\n        const prevValue = acc.length ? acc[acc.length - 1].y : 0;\n        return [...acc, createDatum(prevValue + d[reportItem], d, key)];\n    }, []);\n}\nexport function createDatum(value, computedItem, idKey = 'date') {\n    const xVal = idKey === 'date' ? getDate(computedItem.id) : computedItem.label;\n    const yVal = isFloat(value)\n        ? parseFloat(value.toFixed(2))\n        : isInt(value)\n            ? value\n            : 0;\n    return {\n        x: xVal,\n        y: yVal,\n        key: computedItem.id,\n        name: computedItem.id,\n        units: computedItem.units,\n    };\n}\nexport function getDatumDateRange(datums, offset = 0) {\n    if (!(datums && datums.length)) {\n        const today = new Date();\n        // If datums is empty, obtain the month based on offset (e.g., to show previous month in chart legends)\n        if (offset) {\n            today.setMonth(today.getMonth() - offset);\n        }\n        const firstOfMonth = startOfMonth(today);\n        return [firstOfMonth, today];\n    }\n    const start = new Date(datums[0].key + 'T00:00:00');\n    const end = new Date(datums[datums.length - 1].key + 'T00:00:00');\n    return [start, end];\n}\nexport function getDateRange(datums, firstOfMonth = true, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDatumDateRange(datums, offset);\n    // Show the date range we are trying to cover (i.e., days 1-30/31)\n    if (firstOfMonth && start.setDate) {\n        start.setDate(1);\n    }\n    if (lastOfMonth && start.setDate) {\n        const lastDate = endOfMonth(start).getDate();\n        end.setDate(lastDate);\n    }\n    return [start, end];\n}\nexport function getDateRangeString(datums, firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(`chart.date_range`, {\n        count: getDate(end),\n        endDate: formatDate(end, 'DD'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'DD'),\n        year: getYear(end),\n    });\n}\nexport function getMonthRangeString(datums, key = 'chart.month_legend_label', offset = 0) {\n    const [start, end] = getDateRange(datums, true, false, offset);\n    return [\n        i18next.t(key, {\n            month: Number(formatDate(start, 'M')) - 1,\n        }),\n        i18next.t(key, {\n            month: Number(formatDate(end, 'M')) - 1,\n        }),\n    ];\n}\nexport function getMaxValue(datums) {\n    let max = 0;\n    if (datums && datums.length) {\n        datums.forEach(datum => {\n            if (datum.y > max) {\n                max = datum.y;\n            }\n        });\n    }\n    return max;\n}\nexport function getTooltipContent(formatValue) {\n    return function labelFormatter(value, unit = null, options = {}) {\n        const lookup = unitLookupKey(unit);\n        switch (lookup) {\n            case 'core-hours':\n            case 'hrs':\n            case 'gb':\n            case 'gb-hours':\n            case 'gb-mo':\n            case 'vm-hours':\n                return i18next.t(`unit_tooltips.${lookup}`, {\n                    value: `${formatValue(value, unit, options)}`,\n                });\n            default:\n                return `${formatValue(value, unit, options)}`;\n        }\n    };\n}\nexport function getTooltipLabel(datum, formatValue, formatOptions, idKey = 'date', units) {\n    if (!datum.key) {\n        return '';\n    }\n    if (idKey === 'date') {\n        const date = format(datum.key, 'DD MMM YYYY');\n        return `${date} ${formatValue(datum.y, units ? units : datum.units, formatOptions)}`;\n    }\n    return datum.key.toString();\n}\nexport function getCostRangeString(datums, key = 'chart.cost_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    const [start, end] = getDateRange(datums, firstOfMonth, lastOfMonth, offset);\n    return i18next.t(key, {\n        count: getDate(end),\n        endDate: formatDate(end, 'D'),\n        month: Number(formatDate(start, 'M')) - 1,\n        startDate: formatDate(start, 'D'),\n        year: getYear(end),\n    });\n}\nexport function getUsageRangeString(datums, key = 'chart.usage_legend_label', firstOfMonth = false, lastOfMonth = false, offset = 0) {\n    return getCostRangeString(datums, key, firstOfMonth, lastOfMonth, offset);\n}\nfunction isInt(n) {\n    return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n    return Number(n) === n && n % 1 !== 0;\n}\n","function getValueForItem(item, options) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    const sortKey = options.key;\n    return item[sortKey];\n}\nexport function sort(array, options) {\n    const { direction = 0 /* asc */ } = options || {};\n    return [...array].sort((a, b) => {\n        const aVal = direction === 0 /* asc */\n            ? getValueForItem(a, options)\n            : getValueForItem(b, options);\n        const bVal = direction === 0 /* asc */\n            ? getValueForItem(b, options)\n            : getValueForItem(a, options);\n        if (aVal > bVal) {\n            return -1;\n        }\n        if (aVal < bVal) {\n            return 1;\n        }\n        return 0;\n    });\n}\n","export const testIdProp = 'data-testid';\nexport const getTestProps = (id) => ({ [testIdProp]: id });\nexport const testIds = {\n    details: {\n        historical_data_btn: 'historical-data-btn',\n        tag_lnk: 'tag-lnk',\n        show_more_btn: 'show-more-btn',\n        view_all_btn: 'view-all-btn',\n    },\n    export: {\n        cancel_btn: 'cancel-btn',\n        submit_btn: 'submit-btn',\n    },\n    login: {\n        alert: 'alert',\n        form: 'login-form',\n        username_input: 'username-input',\n        password_input: 'password-input',\n        submit: 'submit',\n    },\n    masthead: {\n        masthead: 'masthead',\n        username: 'username',\n        sidebarToggle: 'sidebar-toggle',\n        logout: 'logout',\n    },\n    onboarding: {\n        btn_cancel: 'btn-cancel',\n        btn_back: 'btn-back',\n        btn_continue: 'btn-continue',\n        btn_close: 'btn-close',\n        type_selector: 'type-selector',\n        type_opt_aws: 'type-option-aws',\n        type_opt_ocp: 'type-option-ocp',\n        type_opt_non: 'type-option-non',\n        name_input: 'name-input',\n        check_box_1: 'check-box-1',\n        check_box_2: 'check-box-2',\n        s3_input: 's3-input',\n        clusterid_input: 'clusterid-input',\n        arn_input: 'arn-input',\n    },\n    providers: {\n        add_btn: 'add-btn',\n        bucket_input: 'bucket-input',\n        cancel_btn: 'cancel-btn',\n        empty_state_add_btn: 'empty_state_add-btn',\n        name_input: 'provider-name-input',\n        resource_name_input: 'provider-resource-name-input',\n        cluster_id_input: 'provider-cluster-id-input',\n        submit_btn: 'submit-btn',\n        type_input: 'provider-type-input',\n        view_all_link: 'view-all-lnk',\n    },\n    sidebar: {\n        nav: 'vertical-nav',\n        link: 'vertical-nav-link',\n        backdrop: 'sidebar-backdrop',\n    },\n};\n","// Layout\nconst LAYOUT_PROPS = {\n    padding: 8,\n};\n// Victory theme properties only\nexport default {\n    area: Object.assign({}, LAYOUT_PROPS),\n    axis: Object.assign({}, LAYOUT_PROPS),\n    bar: Object.assign({}, LAYOUT_PROPS),\n    boxplot: Object.assign({}, LAYOUT_PROPS),\n    candlestick: Object.assign({}, LAYOUT_PROPS),\n    chart: Object.assign({}, LAYOUT_PROPS),\n    errorbar: Object.assign({}, LAYOUT_PROPS),\n    group: Object.assign({}, LAYOUT_PROPS),\n    legend: {},\n    line: Object.assign({}, LAYOUT_PROPS),\n    pie: Object.assign({}, LAYOUT_PROPS),\n    scatter: Object.assign({}, LAYOUT_PROPS),\n    stack: Object.assign({}, LAYOUT_PROPS),\n    tooltip: {},\n    voronoi: Object.assign({}, LAYOUT_PROPS),\n};\n","import getTheme from './theme-utils';\nconst ChartTheme = getTheme();\nexport default ChartTheme;\n","import { ChartThemeColor, ChartThemeVariant, getCustomTheme, } from '@patternfly/react-charts';\nimport { default as ChartTheme } from './theme-koku';\n// Applies theme color and variant to base theme\nconst getTheme = () => getCustomTheme(ChartThemeColor.default, ChartThemeVariant.default, ChartTheme);\nexport default getTheme;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_FontSize_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        fontSize: global_FontSize_sm.value,\n    },\n});\n","import { MinusIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { styles } from './emptyValueState.styles';\nexport const EmptyValueState = () => {\n    return (React.createElement(\"span\", { className: css(styles.container) },\n        React.createElement(MinusIcon, null)));\n};\n","import { sort } from './sort';\nexport function getComputedOcpReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedOcpCloudReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedOcpCloudReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                // clusters will either contain the cluster alias or default to cluster ID\n                const cluster_alias = value.clusters && value.clusters.length > 0\n                    ? value.clusters[0]\n                    : undefined;\n                const cluster = cluster_alias || value.cluster;\n                const capacity = value.capacity ? value.capacity.value : 0;\n                const cost = value.cost ? value.cost.value : 0;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const markupCost = value.markup_cost ? value.markup_cost.value : 0;\n                // Ensure unique IDs -- https://github.com/project-koku/koku-ui/issues/706\n                const idSuffix = idKey !== 'date' && idKey !== 'cluster' && value.cluster\n                    ? `-${value.cluster}`\n                    : '';\n                const id = `${value[idKey]}${idSuffix}`;\n                let label;\n                if (labelKey === 'cluster' && cluster_alias) {\n                    label = cluster_alias;\n                }\n                else if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                const limit = value.limit ? value.limit.value : 0;\n                const request = value.request ? value.request.value : 0;\n                const usage = value.usage ? value.usage.value : 0;\n                const units = value.usage\n                    ? value.usage.units\n                    : value.cost\n                        ? value.cost.units\n                        : 'USD';\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        capacity,\n                        cluster,\n                        clusters: value.clusters,\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        limit,\n                        markupCost,\n                        request,\n                        units,\n                        usage,\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { capacity: itemMap.get(id).capacity + capacity, cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost, limit: itemMap.get(id).limit + limit, markupCost: itemMap.get(id).markupCost + markupCost, request: itemMap.get(id).request + request, usage: itemMap.get(id).usage + usage }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.project) {\n        return 'project';\n    }\n    if (groupBy.cluster) {\n        return 'cluster';\n    }\n    if (groupBy.node) {\n        return 'node';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAzureReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAzureReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAzureReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.subscription_guid) {\n        return 'subscription_guid';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.resource_location) {\n        return 'resource_location';\n    }\n    if (groupBy.service_name) {\n        return 'service_name';\n    }\n    return 'date';\n}\n","import { sort } from './sort';\nexport function getComputedAwsReportItems({ report, idKey, labelKey = idKey, sortKey = 'cost', sortDirection = 0 /* asc */, }) {\n    return sort(getUnsortedComputedAwsReportItems({\n        report,\n        idKey,\n        labelKey,\n        sortDirection,\n        sortKey,\n    }), {\n        key: sortKey,\n        direction: sortDirection,\n    });\n}\nexport function getUnsortedComputedAwsReportItems({ report, idKey, labelKey = idKey, }) {\n    if (!report) {\n        return [];\n    }\n    const itemMap = new Map();\n    const visitDataPoint = (dataPoint) => {\n        if (dataPoint.values) {\n            dataPoint.values.forEach(value => {\n                const cost = value.usage ? value.usage.value : value.cost.value;\n                const derivedCost = value.derived_cost ? value.derived_cost.value : 0;\n                const infrastructureCost = value.infrastructure_cost\n                    ? value.infrastructure_cost.value\n                    : 0;\n                const id = value[idKey];\n                let label;\n                if (value[labelKey] instanceof Object) {\n                    label = value[labelKey].value;\n                }\n                else {\n                    label = value[labelKey];\n                }\n                if (labelKey === 'account' && value.account_alias) {\n                    label = value.account_alias;\n                }\n                if (!itemMap.get(id)) {\n                    itemMap.set(id, {\n                        cost,\n                        deltaPercent: value.delta_percent,\n                        deltaValue: value.delta_value,\n                        derivedCost,\n                        id,\n                        infrastructureCost,\n                        label,\n                        units: value.usage\n                            ? value.usage.units\n                            : value.cost\n                                ? value.cost.units\n                                : 'USD',\n                    });\n                    return;\n                }\n                itemMap.set(id, Object.assign({}, itemMap.get(id), { cost: itemMap.get(id).cost + cost, derivedCost: itemMap.get(id).derivedCost + derivedCost, infrastructureCost: itemMap.get(id).infrastructureCost + infrastructureCost }));\n            });\n        }\n        for (const key in dataPoint) {\n            if (dataPoint[key] instanceof Array) {\n                return dataPoint[key].forEach(visitDataPoint);\n            }\n        }\n    };\n    if (report && report.data) {\n        report.data.forEach(visitDataPoint);\n    }\n    return Array.from(itemMap.values());\n}\nexport function getIdKeyForGroupBy(groupBy = {}) {\n    if (groupBy.account) {\n        return 'account';\n    }\n    if (groupBy.instance_type) {\n        return 'instance_type';\n    }\n    if (groupBy.region) {\n        return 'region';\n    }\n    if (groupBy.service) {\n        return 'service';\n    }\n    return 'date';\n}\n","export function isEqual(obj1, obj2) {\n    let a = JSON.stringify(obj1);\n    let b = JSON.stringify(obj2);\n    if (!a) {\n        a = '';\n    }\n    if (!b) {\n        b = '';\n    }\n    return (a\n        .split('')\n        .sort()\n        .join('') ===\n        b\n            .split('')\n            .sort()\n            .join(''));\n}\n","import formatDate from 'date-fns/format';\nimport getDate from 'date-fns/get_date';\nimport getMonth from 'date-fns/get_month';\nimport startOfMonth from 'date-fns/start_of_month';\nimport i18next from 'i18next';\nexport function getNoDataForDateRangeString(key = 'no_data_for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\nexport function getForDateRangeString(value, key = 'for_date', offset = 1) {\n    const today = new Date();\n    if (offset) {\n        today.setMonth(today.getMonth() - offset);\n    }\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n        value,\n    });\n}\nexport function getSinceDateRangeString(key = 'since_date') {\n    const today = new Date();\n    const month = getMonth(today);\n    const endDate = formatDate(today, 'D');\n    const startDate = formatDate(startOfMonth(today), 'D');\n    return i18next.t(key, {\n        count: getDate(today),\n        endDate,\n        month,\n        startDate,\n    });\n}\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        height: '100vh',\n        marginTop: '150px',\n    },\n    viewSources: {\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, Title, } from '@patternfly/react-core';\nimport { DollarSignIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createMapStateToProps } from 'store/common';\nimport { onboardingActions } from 'store/onboarding';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './noProvidersState.styles';\nclass NoProvidersStateBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getViewSources = () => {\n            const { t } = this.props;\n            return (React.createElement(Link, Object.assign({ to: \"/sources\" }, getTestProps(testIds.providers.view_all_link)), t('providers.view_sources')));\n        };\n    }\n    render() {\n        const { t } = this.props;\n        return (React.createElement(\"div\", { className: css(styles.container) },\n            React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: DollarSignIcon }),\n                React.createElement(Title, { size: \"lg\" }, t('providers.empty_state_title')),\n                React.createElement(EmptyStateBody, null, t('providers.empty_state_desc')),\n                React.createElement(\"div\", { className: css(styles.viewSources) }, this.getViewSources()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, {}) => {\n    return {};\n});\nconst NoProvidersState = translate()(connect(mapStateToProps, {\n    openProvidersModal: onboardingActions.openModal,\n})(NoProvidersStateBase));\nexport { NoProvidersState };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 14,\n        },\n        minWidth: 175,\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        global_disabled_color_200.value,\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './trendChart.styles';\nclass TrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { width } = this.state;\n            // Todo: use PF legendAllowWrap feature\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, name: \"legend\", orientation: width > 150 ? 'horizontal' : 'vertical', style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions, units } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date', units);\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            // Todo: Leave one legend item visible at all times?\n            // const { hiddenSeries, series } = this.state;\n            // const leaveVisible = hiddenSeries.size === series.length - 1;\n            // if (leaveVisible && !this.isSeriesHidden(props.index)) {\n            //   return;\n            // }\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { adjustContainerHeight, height, containerHeight = height, padding, title, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        const adjustedContainerHeight = adjustContainerHeight\n            ? width > 400\n                ? containerHeight\n                : containerHeight + 75\n            : containerHeight;\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef, style: { height: adjustedContainerHeight } },\n            React.createElement(\"div\", null, title),\n            React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom-left\", padding: padding, theme: ChartTheme, width: width },\n                series &&\n                    series.map((s, index) => {\n                        return this.getChart(s, index);\n                    }),\n                React.createElement(ChartAxis, { style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                React.createElement(ChartAxis, { dependentAxis: true, style: chartStyles.yAxis }))));\n    }\n}\nexport { TrendChart };\n","export { TrendChart } from './trendChart';\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    export: {\n        marginRight: global_spacer_md.value,\n    },\n    toolbarContainer: {\n        backgroundColor: global_BackgroundColor_100.value,\n        paddingBottom: global_spacer_md.value,\n        paddingTop: global_spacer_md.value,\n        paddingLeft: global_spacer_xl.value,\n        paddingRight: global_spacer_xl.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { Button, ButtonVariant, Dropdown, DropdownItem, DropdownPosition, DropdownToggle, InputGroup, Select, SelectOption, SelectVariant, TextInput, } from '@patternfly/react-core';\nimport { DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarGroup, DataToolbarItem, DataToolbarToggleGroup, } from '@patternfly/react-core/dist/esm/experimental';\nimport { ExternalLinkSquareAltIcon, FilterIcon, SearchIcon, } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { tagKey } from 'api/query';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { isEqual } from 'utils/equal';\nimport { styles } from './detailsDataToolbar.styles';\nconst defaultFilters = {\n    tag: {},\n};\nexport class DetailsDataToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defaultState = {\n            categoryInput: '',\n            filters: cloneDeep(defaultFilters),\n            isCategoryDropdownOpen: false,\n            isTagKeyDropdownOpen: false,\n            isTagKeySelectExpanded: false,\n            isTagValueSelectExpanded: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        // Initialize\n        this.getDefaultCategory = () => {\n            const { categoryOptions, groupBy } = this.props;\n            if (!categoryOptions) {\n                return 'name';\n            }\n            for (const option of categoryOptions) {\n                if (groupBy === option.value ||\n                    (groupBy && groupBy.indexOf(tagKey) !== -1 && option.value === 'tag')) {\n                    return option.value;\n                }\n            }\n            return categoryOptions[0].value;\n        };\n        this.getActiveFilters = query => {\n            const filters = cloneDeep(defaultFilters);\n            if (query && query.filter_by) {\n                Object.keys(query.filter_by).forEach(key => {\n                    const values = Array.isArray(query.filter_by[key])\n                        ? [...query.filter_by[key]]\n                        : [query.filter_by[key]];\n                    if (key.indexOf(tagKey) !== -1) {\n                        filters.tag[key.substring(tagKey.length)] = values;\n                    }\n                    else {\n                        filters[key] = values;\n                    }\n                });\n            }\n            return filters;\n        };\n        this.onDelete = (type, id) => {\n            if (type) {\n                // Workaround for https://github.com/patternfly/patternfly-react/issues/3552\n                // This prevents us from using an ID\n                let filterType = type.toLowerCase();\n                // Workaround for Azure IDs\n                if (filterType === 'account' && this.state.filters.subscription_guid) {\n                    filterType = 'subscription_guid';\n                }\n                else if (filterType === 'region' &&\n                    this.state.filters.resource_location) {\n                    filterType = 'resource_location';\n                }\n                else if (filterType === 'service' && this.state.filters.service_name) {\n                    filterType = 'service_name';\n                }\n                this.setState((prevState) => {\n                    if (prevState.filters.tag[filterType]) {\n                        // Todo: use ID\n                        prevState.filters.tag[filterType] = prevState.filters.tag[filterType].filter(s => s !== id);\n                    }\n                    else if (prevState.filters[filterType]) {\n                        prevState.filters[filterType] = prevState.filters[filterType].filter(s => s !== id);\n                    }\n                    return {\n                        filters: prevState.filters,\n                    };\n                }, () => {\n                    const { filters } = this.state;\n                    const _filterType = filters.tag[filterType]\n                        ? `${tagKey}${filterType}`\n                        : filterType; // Todo: use ID\n                    this.props.onFilterRemoved(_filterType, id);\n                });\n            }\n            else {\n                this.setState({\n                    filters: cloneDeep(defaultFilters),\n                }, () => {\n                    this.props.onFilterRemoved(null); // Clear all\n                });\n            }\n        };\n        this.getCurrentCategoryOption = () => {\n            const { categoryOptions } = this.props;\n            const { currentCategory } = this.state;\n            if (!categoryOptions) {\n                return undefined;\n            }\n            for (const option of categoryOptions) {\n                if (currentCategory === option.value) {\n                    return option;\n                }\n            }\n            return categoryOptions[0];\n        };\n        this.onCategoryClick = value => {\n            this.setState({\n                currentCategory: value,\n            });\n        };\n        this.onCategorySelect = event => {\n            this.setState({\n                categoryInput: '',\n                currentTagKey: undefined,\n                isCategoryDropdownOpen: !this.state.isCategoryDropdownOpen,\n            });\n        };\n        this.onCategoryToggle = isOpen => {\n            this.setState({\n                isCategoryDropdownOpen: isOpen,\n            });\n        };\n        // Category input\n        this.getCategoryInput = categoryOption => {\n            const { t } = this.props;\n            const { currentCategory, filters, categoryInput } = this.state;\n            return (React.createElement(DataToolbarFilter, { categoryName: categoryOption.label, chips: filters[categoryOption.value], deleteChip: this.onDelete, key: categoryOption.value, showToolbarItem: currentCategory !== 'tag' && currentCategory === categoryOption.value },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { name: `${categoryOption.value}-input`, id: `${categoryOption.value}-input`, type: \"search\", \"aria-label\": t(`filter_by.${categoryOption.value}_input_aria_label`), onChange: this.onCategoryInputChange, value: categoryInput, placeholder: t(`filter_by.${categoryOption.value}_placeholder`), onKeyDown: evt => this.onCategoryInput(evt, categoryOption.value) }),\n                    React.createElement(Button, { variant: ButtonVariant.control, \"aria-label\": t(`filter_by.${categoryOption.value}_button_aria_label`), onClick: evt => this.onCategoryInput(evt, categoryOption.value) },\n                        React.createElement(SearchIcon, null)))));\n        };\n        this.getDefaultCategoryOptions = () => {\n            const { t } = this.props;\n            return [{ label: t('filter_by.values.name'), value: 'name' }];\n        };\n        this.onCategoryInputChange = value => {\n            this.setState({ categoryInput: value });\n        };\n        this.onCategoryInput = (event, key) => {\n            const { categoryInput, currentCategory } = this.state;\n            if ((event.key && event.key !== 'Enter') || categoryInput.trim() === '') {\n                return;\n            }\n            this.setState((prevState) => {\n                const prevFilters = prevState.filters[key];\n                return {\n                    filters: Object.assign({}, prevState.filters, { [currentCategory]: prevFilters && prevFilters.includes(categoryInput)\n                            ? prevFilters\n                            : prevFilters\n                                ? [...prevFilters, categoryInput]\n                                : [categoryInput] }),\n                    categoryInput: '',\n                };\n            }, () => {\n                this.props.onFilterAdded(currentCategory, categoryInput);\n            });\n        };\n        // Tag key select\n        this.getTagKeySelect = () => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, isTagKeySelectExpanded, } = this.state;\n            if (currentCategory !== 'tag') {\n                return null;\n            }\n            const selectOptions = this.getTagKeyOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Select, { variant: SelectVariant.typeahead, \"aria-label\": t('filter_by.tag_key_aria_label'), onClear: this.onTagKeyClear, onToggle: this.onTagKeyToggle, onSelect: this.onTagKeySelect, isExpanded: isTagKeySelectExpanded, placeholderText: t('filter_by.tag_key_placeholder'), selections: currentTagKey }, selectOptions)));\n        };\n        this.onTagKeyClear = () => {\n            this.setState({\n                currentTagKey: undefined,\n                isTagKeySelectExpanded: false,\n            });\n        };\n        this.onTagKeySelect = (event, selection, isPlaceholder) => {\n            this.setState({\n                currentTagKey: selection,\n                isTagKeySelectExpanded: !this.state.isTagKeySelectExpanded,\n            });\n        };\n        this.onTagKeyToggle = isOpen => {\n            this.setState({\n                isTagKeySelectExpanded: isOpen,\n            });\n        };\n        // Tag value select\n        this.getTagValueSelect = tagKeyOption => {\n            const { t } = this.props;\n            const { currentCategory, currentTagKey, filters, isTagValueSelectExpanded, } = this.state;\n            const selectOptions = this.getTagValueOptions().map(selectOption => {\n                return (React.createElement(SelectOption, { key: selectOption.value, value: selectOption.value }));\n            });\n            return (React.createElement(DataToolbarFilter, { categoryName: tagKeyOption.value, chips: filters.tag[tagKeyOption.value], deleteChip: this.onDelete, key: tagKeyOption.value, showToolbarItem: currentCategory === 'tag' && currentTagKey === tagKeyOption.value },\n                React.createElement(Select, { variant: SelectVariant.checkbox, \"aria-label\": t('filter_by.tag_value_aria_label'), onToggle: this.onTagValueToggle, onSelect: this.onTagValueSelect, selections: filters.tag[tagKeyOption.value]\n                        ? filters.tag[tagKeyOption.value]\n                        : [], isExpanded: isTagValueSelectExpanded, placeholderText: t('filter_by.tag_value_placeholder') }, selectOptions)));\n        };\n        this.onTagValueSelect = (event, selection) => {\n            const { currentTagKey } = this.state;\n            const checked = event.target.checked;\n            this.setState((prevState) => {\n                const prevSelections = prevState.filters.tag[currentTagKey]\n                    ? prevState.filters.tag[currentTagKey]\n                    : [];\n                return {\n                    filters: Object.assign({}, prevState.filters, { tag: Object.assign({}, prevState.filters.tag, { [currentTagKey]: checked\n                                ? [...prevSelections, selection]\n                                : prevSelections.filter(value => value !== selection) }) }),\n                };\n            }, () => {\n                if (checked) {\n                    this.props.onFilterAdded(`${tagKey}${currentTagKey}`, selection);\n                }\n                else {\n                    this.onDelete(currentTagKey, selection);\n                }\n            });\n        };\n        this.onTagValueToggle = isOpen => {\n            this.setState({\n                isTagValueSelectExpanded: isOpen,\n            });\n        };\n        // Export button\n        this.getExportButton = () => {\n            const { isExportDisabled, t } = this.props;\n            return (React.createElement(DataToolbarItem, null,\n                React.createElement(Button, { isDisabled: isExportDisabled, onClick: this.handleExportClicked, variant: ButtonVariant.link },\n                    React.createElement(\"span\", { className: css(styles.export) }, t('export.export')),\n                    React.createElement(ExternalLinkSquareAltIcon, null))));\n        };\n        this.handleExportClicked = () => {\n            this.props.onExportClicked();\n        };\n    }\n    componentDidMount() {\n        this.setState({\n            currentCategory: this.getDefaultCategory(),\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { groupBy, query, report } = this.props;\n        if (groupBy !== prevProps.groupBy ||\n            (query && !isEqual(query, prevProps.query)) ||\n            (report && !isEqual(report, prevProps.report))) {\n            this.setState(() => {\n                const filters = this.getActiveFilters(query);\n                return prevProps.groupBy !== groupBy\n                    ? {\n                        currentCategory: this.getDefaultCategory(),\n                        filters,\n                    }\n                    : {\n                        filters,\n                    };\n            });\n        }\n    }\n    // Category dropdown\n    getCategoryDropdown() {\n        const { categoryOptions } = this.props;\n        const { isCategoryDropdownOpen } = this.state;\n        if (!categoryOptions) {\n            return null;\n        }\n        return (React.createElement(DataToolbarItem, null,\n            React.createElement(Dropdown, { onSelect: this.onCategorySelect, position: DropdownPosition.left, toggle: React.createElement(DropdownToggle, { onToggle: this.onCategoryToggle, style: { width: '100%' } },\n                    React.createElement(FilterIcon, null),\n                    \" \",\n                    this.getCurrentCategoryOption().label), isOpen: isCategoryDropdownOpen, dropdownItems: categoryOptions &&\n                    categoryOptions.map(option => (React.createElement(DropdownItem, { key: option.value, onClick: () => this.onCategoryClick(option.value) }, option.label))), style: { width: '100%' } })));\n    }\n    getTagKeyOptions() {\n        const { report } = this.props;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            options = data.map(tag => {\n                return {\n                    value: tag.key,\n                };\n            });\n        }\n        return options;\n    }\n    getTagValueOptions() {\n        const { report } = this.props;\n        const { currentTagKey } = this.state;\n        let data = [];\n        if (report && report.data) {\n            data = [...new Set([...report.data])]; // prune duplicates\n        }\n        let options = [];\n        if (data.length > 0) {\n            for (const tag of data) {\n                if (currentTagKey === tag.key) {\n                    options = tag.values.map(val => {\n                        return {\n                            value: val,\n                        };\n                    });\n                    break;\n                }\n            }\n        }\n        return options;\n    }\n    render() {\n        const { categoryOptions, pagination, showExport } = this.props;\n        const options = categoryOptions\n            ? categoryOptions\n            : this.getDefaultCategoryOptions();\n        return (React.createElement(\"div\", { className: css(styles.toolbarContainer) },\n            React.createElement(DataToolbar, { id: \"details-toolbar\", clearAllFilters: this.onDelete, collapseListedFiltersBreakpoint: \"xl\" },\n                React.createElement(DataToolbarContent, null,\n                    React.createElement(DataToolbarToggleGroup, { toggleIcon: React.createElement(FilterIcon, null), breakpoint: \"xl\" },\n                        React.createElement(DataToolbarGroup, { variant: \"filter-group\" },\n                            this.getCategoryDropdown(),\n                            this.getTagKeySelect(),\n                            this.getTagKeyOptions().map(option => this.getTagValueSelect(option)),\n                            options &&\n                                options\n                                    .filter(option => option.value !== 'tag')\n                                    .map(option => this.getCategoryInput(option))),\n                        Boolean(showExport) && (React.createElement(DataToolbarGroup, null, this.getExportButton()))),\n                    React.createElement(DataToolbarItem, { variant: \"pagination\", breakpointMods: [{ modifier: 'align-right' }] }, pagination)))));\n    }\n}\nconst DetailsDataToolbar = translate()(connect()(DetailsDataToolbarBase));\nexport { DetailsDataToolbar };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { chart_color_green_100, chart_color_green_200, chart_color_green_300, chart_color_green_400, chart_color_green_500, global_disabled_color_200, global_FontFamily_sans_serif, global_spacer_lg, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    currentMonth: {\n        data: {\n            fill: 'none',\n            stroke: '#A2DA9C',\n        },\n    },\n    legend: {\n        labels: {\n            fontFamily: global_FontFamily_sans_serif.value,\n            fontSize: 12,\n        },\n    },\n    // See: https://github.com/project-koku/koku-ui/issues/241\n    legendColorScale: [\n        chart_color_green_100.value,\n        chart_color_green_200.value,\n        chart_color_green_300.value,\n        chart_color_green_400.value,\n        chart_color_green_500.value,\n    ],\n    itemsPerRow: 0,\n    previousMonth: {\n        data: {\n            fill: 'none',\n            stroke: global_disabled_color_200.value,\n        },\n    },\n    yAxis: {\n        axisLabel: {\n            padding: 15,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n        tickLabels: {\n            fontSize: 0,\n        },\n    },\n    xAxis: {\n        axisLabel: {\n            padding: 40,\n        },\n        grid: {\n            stroke: 'none',\n        },\n        ticks: {\n            stroke: 'none',\n        },\n    },\n};\nexport const styles = StyleSheet.create({\n    chart: {\n        marginTop: global_spacer_sm.value,\n    },\n    chartContainer: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n    title: {\n        marginLeft: '-' + global_spacer_lg.value,\n    },\n});\n","import { Chart, ChartArea, ChartAxis, ChartLegend, ChartVoronoiContainer, getInteractiveLegendEvents, getInteractiveLegendItemStyles, } from '@patternfly/react-charts';\nimport { css } from '@patternfly/react-styles';\nimport { default as ChartTheme } from 'components/charts/chartTheme';\nimport { getCostRangeString, getDateRange, getMaxValue, getTooltipContent, getTooltipLabel, } from 'components/charts/commonChart/chartUtils';\nimport getDate from 'date-fns/get_date';\nimport React from 'react';\nimport { chartStyles, styles } from './historicalTrendChart.styles';\nclass HistoricalTrendChart extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.containerRef = React.createRef();\n        this.state = {\n            hiddenSeries: new Set(),\n            width: 0,\n        };\n        this.initDatum = () => {\n            const { currentData, previousData, showUsageLegendLabel = false, } = this.props;\n            const key = showUsageLegendLabel\n                ? 'chart.usage_legend_label'\n                : 'chart.cost_legend_label';\n            // Show all legends, regardless of length -- https://github.com/project-koku/koku-ui/issues/248\n            this.setState({\n                series: [\n                    {\n                        childName: 'previousCost',\n                        data: previousData,\n                        legendItem: {\n                            name: getCostRangeString(previousData, key, true, true, 1),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.previousMonth,\n                    },\n                    {\n                        childName: 'currentCost',\n                        data: currentData,\n                        legendItem: {\n                            name: getCostRangeString(currentData, key, true, false),\n                            symbol: {\n                                type: 'minus',\n                            },\n                        },\n                        style: chartStyles.currentMonth,\n                    },\n                ],\n            });\n        };\n        this.handleResize = () => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n        };\n        this.getChart = (series, index) => {\n            const { hiddenSeries } = this.state;\n            return (React.createElement(ChartArea, { data: !hiddenSeries.has(index) ? series.data : [{ y: null }], interpolation: \"monotoneX\", key: series.childName, name: series.childName, style: series.style }));\n        };\n        this.getLegend = () => {\n            const { legendItemsPerRow } = this.props;\n            return (React.createElement(ChartLegend, { colorScale: chartStyles.legendColorScale, data: this.getLegendData(), gutter: 10, height: 25, itemsPerRow: legendItemsPerRow, name: \"legend\", style: chartStyles.legend }));\n        };\n        this.getTooltipLabel = ({ datum }) => {\n            const { formatDatumValue, formatDatumOptions } = this.props;\n            return getTooltipLabel(datum, getTooltipContent(formatDatumValue), formatDatumOptions, 'date');\n        };\n        // Interactive legend\n        // Hide each data series individually\n        this.handleLegendClick = props => {\n            if (!this.state.hiddenSeries.delete(props.index)) {\n                this.state.hiddenSeries.add(props.index);\n            }\n            this.setState({ hiddenSeries: new Set(this.state.hiddenSeries) });\n        };\n        // Returns true if at least one data series is available\n        this.isDataAvailable = () => {\n            const { series } = this.state;\n            // API data may not be available (e.g., on 1st of month)\n            const unavailable = [];\n            if (series) {\n                series.forEach((s, index) => {\n                    if (this.isSeriesHidden(index) || (s.data && s.data.length === 0)) {\n                        unavailable.push(index);\n                    }\n                });\n            }\n            return unavailable.length === (series ? series.length : 0);\n        };\n        // Returns true if data series is hidden\n        this.isSeriesHidden = index => {\n            const { hiddenSeries } = this.state; // Skip if already hidden\n            return hiddenSeries.has(index);\n        };\n        // Returns groups of chart names associated with each data series\n        this.getChartNames = () => {\n            const { series } = this.state;\n            const result = [];\n            if (series) {\n                series.map((serie, index) => {\n                    // Each group of chart names are hidden / shown together\n                    result.push(serie.childName);\n                });\n            }\n            return result;\n        };\n        // Returns onMouseOver, onMouseOut, and onClick events for the interactive legend\n        this.getEvents = () => {\n            const result = getInteractiveLegendEvents({\n                chartNames: this.getChartNames(),\n                isHidden: this.isSeriesHidden,\n                legendName: 'legend',\n                onLegendClick: this.handleLegendClick,\n            });\n            return result;\n        };\n        // Returns legend data styled per hiddenSeries\n        this.getLegendData = () => {\n            const { hiddenSeries, series } = this.state;\n            if (series) {\n                const result = series.map((s, index) => {\n                    return Object.assign({}, s.legendItem, getInteractiveLegendItemStyles(hiddenSeries.has(index)));\n                });\n                return result;\n            }\n        };\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.containerRef.current) {\n                this.setState({ width: this.containerRef.current.clientWidth });\n            }\n            window.addEventListener('resize', this.handleResize);\n        });\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentData !== this.props.currentData ||\n            prevProps.previousData !== this.props.previousData) {\n            this.initDatum();\n        }\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n    getDomain() {\n        const { currentData, previousData } = this.props;\n        const domain = { x: [1, 31] };\n        const maxCurrent = currentData ? getMaxValue(currentData) : 0;\n        const maxPrevious = previousData ? getMaxValue(previousData) : 0;\n        const maxValue = Math.max(maxCurrent, maxPrevious);\n        const max = maxValue > 0 ? Math.ceil(maxValue + maxValue * 0.1) : 0;\n        if (max > 0) {\n            domain.y = [0, max];\n        }\n        return domain;\n    }\n    getEndDate() {\n        const { currentData, previousData } = this.props;\n        const previousDate = previousData\n            ? getDate(getDateRange(previousData, true, true)[1])\n            : 0;\n        const currentDate = currentData\n            ? getDate(getDateRange(currentData, true, true)[1])\n            : 0;\n        return currentDate > 0 || previousDate > 0\n            ? Math.max(currentDate, previousDate)\n            : 31;\n    }\n    render() {\n        const { height, containerHeight = height, padding, title, xAxisLabel, yAxisLabel, } = this.props;\n        const { series, width } = this.state;\n        const isDataAvailable = this.isDataAvailable();\n        const container = (React.createElement(ChartVoronoiContainer, { allowTooltip: !isDataAvailable, constrainToVisibleArea: true, labels: !isDataAvailable ? this.getTooltipLabel : undefined, voronoiDimension: \"x\" }));\n        const domain = this.getDomain();\n        const endDate = this.getEndDate();\n        const midDate = Math.floor(endDate / 2);\n        return (React.createElement(\"div\", { className: css(styles.chartContainer), ref: this.containerRef },\n            React.createElement(\"div\", { className: css(styles.title) }, title),\n            React.createElement(\"div\", { className: css(styles.chart), style: { height: containerHeight } },\n                React.createElement(Chart, { containerComponent: container, domain: domain, events: this.getEvents(), height: height, legendComponent: this.getLegend(), legendData: this.getLegendData(), legendPosition: \"bottom\", padding: padding, theme: ChartTheme, width: width },\n                    series &&\n                        series.map((s, index) => {\n                            return this.getChart(s, index);\n                        }),\n                    React.createElement(ChartAxis, { label: xAxisLabel, style: chartStyles.xAxis, tickValues: [1, midDate, endDate] }),\n                    React.createElement(ChartAxis, { dependentAxis: true, label: yAxisLabel, style: chartStyles.yAxis })))));\n    }\n}\nexport { HistoricalTrendChart };\n","export { HistoricalTrendChart, } from './historicalTrendChart';\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummary.styles';\nconst AwsReportSummaryBase = ({ children, detailsLink, title, subTitle, status, t, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(CardHeader, null,\n        React.createElement(Title, { size: \"lg\" }, title),\n        Boolean(subTitle) && React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle)),\n    React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n        React.createElement(Skeleton, { size: SkeletonSize.xs }),\n        React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n        React.createElement(Skeleton, { size: SkeletonSize.sm }),\n        React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)),\n    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)));\nconst AwsReportSummary = translate()(AwsReportSummaryBase);\nexport { AwsReportSummary };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_200, global_FontSize_xs, global_spacer_lg, global_spacer_md, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chartSkeleton: {\n        height: '175px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_md.value,\n    },\n    container: {\n        display: 'flex',\n    },\n    cost: {\n        flexGrow: 1,\n        minHeight: '470px',\n        marginRight: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    reportSummary: {\n        height: '100%',\n    },\n    subtitle: {\n        display: 'inline-block',\n        fontSize: global_FontSize_xs.value,\n        color: global_Color_200.var,\n        marginBottom: '0',\n    },\n    tops: {\n        flexGrow: 1,\n        marginTop: global_spacer_lg.value,\n    },\n});\n","import { Card, CardBody, CardFooter, CardHeader, Grid, GridItem, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { styles } from './awsReportSummaryAlt.styles';\nconst AwsReportSummaryAltBase = ({ children, detailsLink, status, subTitle, t, tabs, title, }) => (React.createElement(Card, { className: css(styles.reportSummary) },\n    React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { lg: 5, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(CardHeader, null,\n                    React.createElement(Title, { size: \"lg\" }, title),\n                    Boolean(subTitle) && (React.createElement(\"p\", { className: css(styles.subtitle) }, subTitle))),\n                React.createElement(CardBody, null, status === 1 /* inProgress */ ? (React.createElement(React.Fragment, null,\n                    React.createElement(Skeleton, { size: SkeletonSize.xs }),\n                    React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                    React.createElement(Skeleton, { size: SkeletonSize.sm }),\n                    React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs }))) : (children)))),\n        React.createElement(GridItem, { lg: 7, xl: 6 },\n            React.createElement(\"div\", { className: css(styles.container) },\n                React.createElement(\"div\", { className: css(styles.tops) }, status !== 1 /* inProgress */ && (React.createElement(React.Fragment, null,\n                    Boolean(tabs) && React.createElement(CardBody, null, tabs),\n                    Boolean(detailsLink) && React.createElement(CardFooter, null, detailsLink)))))))));\nconst AwsReportSummaryAlt = translate()(AwsReportSummaryAltBase);\nexport { AwsReportSummaryAlt };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_Color_100, global_FontSize_4xl, global_FontSize_xs, global_LineHeight_sm, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryDetails: {\n        marginBottom: global_spacer_md.value,\n        display: 'flex',\n        alignItems: 'flex-end',\n    },\n    text: {\n        paddingBottom: 14,\n        lineHeight: global_LineHeight_sm.value,\n        fontSize: global_FontSize_xs.value,\n    },\n    value: {\n        color: global_Color_100.var,\n        marginRight: global_spacer_sm.value,\n        fontSize: global_FontSize_4xl.value,\n    },\n    valueContainer: {\n        display: 'inline-block',\n        marginBottom: global_spacer_md.value,\n        width: '50%',\n        wordWrap: 'break-word',\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryDetails.styles';\nconst AwsReportSummaryDetailsBase = ({ costLabel, formatValue, formatOptions, report, reportType = \"cost\" /* cost */, showUnits = false, showUsageFirst = false, t, usageFormatOptions, usageLabel, }) => {\n    let cost = React.createElement(EmptyValueState, null);\n    let usage = React.createElement(EmptyValueState, null);\n    if (report && report.meta && report.meta.total) {\n        cost = formatValue(report.meta.total.cost ? report.meta.total.cost.value : 0, report.meta.total.cost ? report.meta.total.cost.units : 'USD', formatOptions);\n        usage = formatValue(report.meta.total.usage ? report.meta.total.usage.value : 0, report.meta.total.usage ? report.meta.total.usage.units : '', usageFormatOptions ? usageFormatOptions : formatOptions);\n    }\n    const getCostLayout = () => (React.createElement(\"div\", { className: css(styles.valueContainer) },\n        React.createElement(\"div\", { className: css(styles.value) }, cost),\n        React.createElement(\"div\", { className: css(styles.text) },\n            React.createElement(\"div\", null, costLabel))));\n    const getUsageLayout = () => {\n        if (!usageLabel) {\n            return null;\n        }\n        const usageUnits = report && report.meta && report.meta.total && report.meta.total.usage\n            ? report.meta.total.usage.units\n            : '';\n        const units = unitLookupKey(usageUnits);\n        const unitsLabel = t(`units.${units}`);\n        return (React.createElement(\"div\", { className: css(styles.valueContainer) },\n            React.createElement(\"div\", { className: css(styles.value) },\n                usage,\n                Boolean(showUnits &&\n                    report &&\n                    report.meta &&\n                    report.meta.total.usage &&\n                    report.meta.total.usage.value >= 0) && React.createElement(\"span\", { className: css(styles.text) }, unitsLabel)),\n            React.createElement(\"div\", { className: css(styles.text) },\n                React.createElement(\"div\", null, usageLabel))));\n    };\n    if (reportType === \"cost\" /* cost */) {\n        return React.createElement(React.Fragment, null, getCostLayout());\n    }\n    else {\n        if (showUsageFirst) {\n            return (React.createElement(React.Fragment, null,\n                getUsageLayout(),\n                getCostLayout()));\n        }\n        return (React.createElement(React.Fragment, null,\n            getCostLayout(),\n            getUsageLayout()));\n    }\n};\nconst AwsReportSummaryDetails = translate()(AwsReportSummaryDetailsBase);\nexport { AwsReportSummaryDetails };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    reportSummaryItem: {\n        ':not(:last-child)': {\n            marginBottom: global_spacer_md.value,\n        },\n    },\n    test: {\n        ':not(foo) svg': {\n            overflow: 'visible',\n        },\n    },\n});\n","import { Progress, ProgressSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { unitLookupKey } from 'utils/formatValue';\nimport { styles } from './awsReportSummaryItem.styles';\nconst AwsReportSummaryItemBase = ({ label, formatOptions, formatValue, t, totalValue, units, value, }) => {\n    const lookup = unitLookupKey(units);\n    const unitsLabel = lookup !== 'usd' ? t(`units.${lookup}`) : undefined;\n    const percent = !totalValue ? 0 : (value / totalValue) * 100;\n    const percentVal = Number(percent.toFixed(2));\n    const percentLabel = t('percent_of_total', {\n        percent: percentVal,\n        units: unitsLabel,\n        value: formatValue(value, units, formatOptions),\n    });\n    return (React.createElement(\"li\", { className: css(styles.reportSummaryItem) },\n        React.createElement(Progress, { label: percentLabel, value: percentVal, title: label, size: ProgressSize.sm })));\n};\nAwsReportSummaryItemBase.defaultProps = {\n    formatValue: v => v,\n};\nconst AwsReportSummaryItem = translate()(AwsReportSummaryItemBase);\nexport { AwsReportSummaryItem };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { getComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsReportSummaryItems.styles';\nclass AwsReportSummaryItemsBase extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.report !== this.props.report;\n    }\n    getItems() {\n        const { report, idKey, labelKey } = this.props;\n        const computedItems = getComputedAwsReportItems({\n            report,\n            idKey,\n            labelKey,\n        });\n        const otherIndex = computedItems.findIndex(i => {\n            const id = i.id;\n            if (id && id !== null) {\n                return id.toString().includes('Other');\n            }\n        });\n        if (otherIndex !== -1) {\n            return [\n                ...computedItems.slice(0, otherIndex),\n                ...computedItems.slice(otherIndex + 1),\n                computedItems[otherIndex],\n            ];\n        }\n        return computedItems;\n    }\n    render() {\n        const { children, status } = this.props;\n        if (status === 1 /* inProgress */) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { size: SkeletonSize.md }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n                React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) })));\n        }\n        else {\n            const items = this.getItems();\n            return React.createElement(\"ul\", null, children({ items }));\n        }\n    }\n}\nconst AwsReportSummaryItems = translate()(AwsReportSummaryItemsBase);\nexport { AwsReportSummaryItems, };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    chart: {\n        marginBottom: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { TrendChart } from 'components/charts/trendChart';\nimport React from 'react';\nimport { styles } from './awsReportSummaryTrend.styles';\nconst AwsReportSummaryTrend = props => (React.createElement(\"div\", { className: css(styles.chart) },\n    React.createElement(TrendChart, Object.assign({}, props))));\nexport { AwsReportSummaryTrend };\n","export { AwsReportSummary } from './awsReportSummary';\nexport { AwsReportSummaryAlt } from './awsReportSummaryAlt';\nexport { AwsReportSummaryDetails } from './awsReportSummaryDetails';\nexport { AwsReportSummaryItem } from './awsReportSummaryItem';\nexport { AwsReportSummaryItems } from './awsReportSummaryItems';\nexport { AwsReportSummaryTrend } from './awsReportSummaryTrend';\n","import { Nav, NavItem, NavList, NavVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nexport const getIdKeyForNavItem = (navItem) => {\n    switch (navItem) {\n        case \"aws\" /* aws */:\n            return 'aws';\n        case \"azure\" /* azure */:\n            return 'azure';\n    }\n};\nexport class TertiaryNavBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getAvailableNavItems = () => {\n            const availableTabs = [\n                {\n                    navItem: \"aws\" /* aws */,\n                },\n                {\n                    navItem: \"azure\" /* azure */,\n                },\n            ];\n            return availableTabs;\n        };\n        this.getNavItemTitle = (navItem) => {\n            const { t } = this.props;\n            if (navItem === \"aws\" /* aws */) {\n                return t('aws_details.title');\n            }\n            else if (navItem === \"azure\" /* azure */) {\n                return t('azure_details.title');\n            }\n        };\n        this.getNavItem = (navItem, index) => {\n            const { activeItem } = this.props;\n            const navItemKey = getIdKeyForNavItem(navItem);\n            return (React.createElement(NavItem, { key: navItemKey, itemId: navItemKey, isActive: activeItem === navItem }, this.getNavItemTitle(navItem)));\n        };\n        // tslint:disable-next-line:no-empty\n        this.handleOnSelect = selectedItem => {\n            const { history } = this.props;\n            if (selectedItem.itemId === \"aws\" /* aws */) {\n                history.replace('/aws');\n            }\n            else if (selectedItem.itemId === \"azure\" /* azure */) {\n                history.replace('/azure');\n            }\n        };\n    }\n    render() {\n        const availableNavItems = this.getAvailableNavItems();\n        return (React.createElement(Nav, { onSelect: this.handleOnSelect },\n            React.createElement(NavList, { variant: NavVariants.tertiary }, availableNavItems.map((val, index) => this.getNavItem(val.navItem, index)))));\n    }\n}\nconst TertiaryNav = withRouter(translate()(TertiaryNavBase));\nexport { TertiaryNav };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_300, global_BackgroundColor_light_100, global_spacer_md, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    awsDetails: {\n        backgroundColor: global_BackgroundColor_300.value,\n        minHeight: '100%',\n    },\n    content: {\n        backgroundColor: global_BackgroundColor_300.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingTop: global_spacer_xl.value,\n    },\n    paginationContainer: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n    pagination: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        padding: global_spacer_md.value,\n    },\n    tableContainer: {\n        marginLeft: global_spacer_xl.value,\n        marginRight: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_100, global_Color_100, global_Color_200, global_FontSize_sm, global_spacer_md, global_spacer_sm, global_spacer_xl, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    cost: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    costLabel: {},\n    costValue: {\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n    costLabelUnit: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_100.var,\n    },\n    costLabelDate: {\n        fontSize: global_FontSize_sm.value,\n        color: global_Color_200.var,\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: global_spacer_xl.var,\n        backgroundColor: global_BackgroundColor_100.var,\n    },\n    nav: {\n        marginBottom: global_spacer_xl.var,\n    },\n    title: {\n        paddingBottom: global_spacer_sm.var,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    groupBySelector: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    groupBySelectorLabel: {\n        marginBottom: 0,\n        marginRight: global_spacer_md.var,\n    },\n});\n","import { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { parseQuery } from 'api/awsQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getIdKeyForGroupBy } from 'utils/getComputedAwsReportItems';\nimport { styles } from './groupBy.styles';\nconst groupByOptions = [\n    { label: 'account', value: 'account' },\n    { label: 'service', value: 'service' },\n    { label: 'region', value: 'region' },\n];\nconst reportType = \"tag\" /* tag */;\nclass GroupByBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            currentItem: this.props.groupBy || 'account',\n            isGroupByOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleGroupByClick = value => {\n            const { onItemClicked } = this.props;\n            if (onItemClicked) {\n                this.setState({\n                    currentItem: value,\n                });\n                onItemClicked(value);\n            }\n        };\n        this.getDropDownItems = () => {\n            const { t } = this.props;\n            return groupByOptions.map(option => (React.createElement(DropdownItem, { component: \"button\", key: option.value, onClick: () => this.handleGroupByClick(option.value) }, t(`group_by.values.${option.label}`))));\n        };\n        this.getDropDownTags = () => {\n            const { report, t } = this.props;\n            if (report && report.data) {\n                const data = [...new Set([...report.data])]; // prune duplicates\n                return data.map(tag => (React.createElement(DropdownItem, { component: \"button\", key: `${tagKey}${tag.key}`, onClick: () => this.handleGroupByClick(`${tagKey}${tag.key}`) }, t('group_by.tag_key', { value: tag.key }))));\n            }\n            else {\n                return [];\n            }\n        };\n        this.getGroupBy = () => {\n            const queryFromRoute = parseQuery(location.search);\n            let groupBy = getIdKeyForGroupBy(queryFromRoute.group_by);\n            const groupByKeys = queryFromRoute && queryFromRoute.group_by\n                ? Object.keys(queryFromRoute.group_by)\n                : [];\n            for (const key of groupByKeys) {\n                const index = key.indexOf(tagKey);\n                if (index !== -1) {\n                    groupBy = key;\n                    break;\n                }\n            }\n            return groupBy !== 'date' ? groupBy : 'account';\n        };\n        this.handleGroupBySelect = event => {\n            this.setState({\n                isGroupByOpen: !this.state.isGroupByOpen,\n            });\n        };\n        this.handleGroupByToggle = isGroupByOpen => {\n            this.setState({\n                isGroupByOpen,\n            });\n        };\n        this.handleGroupByClick = this.handleGroupByClick.bind(this);\n        this.handleGroupBySelect = this.handleGroupBySelect.bind(this);\n        this.handleGroupByToggle = this.handleGroupByToggle.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n        this.setState({\n            currentItem: this.getGroupBy(),\n        });\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, groupBy, queryString } = this.props;\n        if (prevProps.queryString !== queryString ||\n            prevProps.groupBy !== groupBy) {\n            fetchReport(reportType, queryString);\n            this.setState({ currentItem: this.getGroupBy() });\n        }\n    }\n    render() {\n        const { t } = this.props;\n        const { currentItem, isGroupByOpen } = this.state;\n        const dropdownItems = [\n            ...this.getDropDownItems(),\n            ...this.getDropDownTags(),\n        ];\n        const index = currentItem ? currentItem.indexOf(tagKey) : -1;\n        const label = index !== -1\n            ? t('group_by.tag_key', { value: currentItem.slice(tagKey.length) })\n            : t(`group_by.values.${currentItem}`);\n        return (React.createElement(\"div\", { className: css(styles.groupBySelector) },\n            React.createElement(\"label\", { className: css(styles.groupBySelectorLabel) },\n                t('group_by.cost'),\n                \":\"),\n            React.createElement(Dropdown, { onSelect: this.handleGroupBySelect, toggle: React.createElement(DropdownToggle, { onToggle: this.handleGroupByToggle }, label), isOpen: isGroupByOpen, dropdownItems: dropdownItems })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst GroupBy = translate()(connect(mapStateToProps, mapDispatchToProps)(GroupByBase));\nexport { GroupBy };\n","import { Title, TitleSize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { TertiaryNav } from 'components/details/tertiaryNav';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getSinceDateRangeString } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsHeader.styles';\nimport { GroupBy } from './groupBy';\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        time_scope_units: 'month',\n        time_scope_value: -1,\n        resolution: 'monthly',\n    },\n};\nconst reportType = \"cost\" /* cost */;\nclass DetailsHeaderBase extends React.Component {\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, onGroupByClicked, providers, providersError, report, reportError, t, } = this.props;\n        const showContent = report &&\n            !reportError &&\n            !providersError &&\n            providers &&\n            providers.meta &&\n            providers.meta.count > 0;\n        return (React.createElement(\"header\", { className: css(styles.header) },\n            React.createElement(\"div\", null,\n                React.createElement(Title, { className: css(styles.title), size: TitleSize['2xl'] }, t('navigation.cloud_details')),\n                React.createElement(\"div\", { className: css(styles.nav) },\n                    React.createElement(TertiaryNav, { activeItem: \"aws\" /* aws */ })),\n                Boolean(showContent) && (React.createElement(GroupBy, { groupBy: groupBy, onItemClicked: onGroupByClicked }))),\n            Boolean(showContent) && (React.createElement(\"div\", { className: css(styles.cost) },\n                React.createElement(Title, { className: css(styles.costValue), size: \"4xl\" }, formatCurrency(report.meta.total.cost.value)),\n                React.createElement(\"div\", { className: css(styles.costLabel) },\n                    React.createElement(\"div\", { className: css(styles.costLabelUnit) }, t('aws_details.total_cost')),\n                    React.createElement(\"div\", { className: css(styles.costLabelDate) }, getSinceDateRangeString()))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryString = getQuery(baseQuery);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsHeader = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsHeaderBase));\nexport { DetailsHeader };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_2xl, global_spacer_lg } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        marginTop: global_spacer_2xl.value,\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getTags = () => {\n            const { report } = this.props;\n            const tags = [];\n            if (report) {\n                for (const tag of report.data) {\n                    for (const val of tag.values) {\n                        tags.push(`${tag.key}: ${val}`);\n                    }\n                }\n            }\n            return tags;\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const tags = this.getTags();\n        return tags.map((tag, index) => React.createElement(\"div\", { key: `tag-${index}` }, tag));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTagView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagViewBase));\nexport { DetailsTagView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsTagModal.styles';\nimport { DetailsTagView } from './detailsTagView';\nclass DetailsTagModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.tags_modal_title', {\n                groupBy,\n                name: item.label,\n            }), width: '50%' },\n            React.createElement(DetailsTagView, { account: item.label || item.id, groupBy: groupBy, item: item })));\n    }\n}\nconst DetailsTagModal = translate()(DetailsTagModalBase);\nexport { DetailsTagModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_lg, global_spacer_xl } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    mainContent: {\n        marginTop: global_spacer_xl.value,\n    },\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '700px',\n        width: '600px',\n    },\n    subTitle: {\n        textAlign: 'right',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__body {\n    margin-top: ${global_spacer_lg.value};\n  }\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Title } from '@patternfly/react-core';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue } from 'utils/formatValue';\nimport { formatCurrency } from 'utils/formatValue';\nimport { styles } from './detailsWidgetModal.styles';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetModalViewBase extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus, t } = this.props;\n        const cost = formatCurrency(report && report.meta && report.meta.total\n            ? report.meta.total.cost.value\n            : 0);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: styles.subTitle },\n                React.createElement(Title, { size: \"lg\" }, t('aws_details.cost_value', { value: cost }))),\n            React.createElement(\"div\", { className: styles.mainContent },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, report: report, status: reportFetchStatus }, ({ items }) => items.map(_item => (React.createElement(AwsReportSummaryItem, { key: _item.id, formatOptions: {}, formatValue: formatValue, label: _item.label ? _item.label.toString() : '', totalValue: report.meta.total.cost.value, units: _item.units, value: _item.cost })))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetModalView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetModalViewBase));\nexport { DetailsWidgetModalView };\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { modalOverride, styles } from './detailsWidgetModal.styles';\nimport { DetailsWidgetModalView } from './detailsWidgetModalView';\nclass DetailsWidgetModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { groupBy, isOpen, item, parentGroupBy, t } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.widget_modal_title', {\n                groupBy,\n                name: item.label,\n                parentGroupBy,\n            }) },\n            React.createElement(DetailsWidgetModalView, { groupBy: groupBy, item: item, parentGroupBy: parentGroupBy })));\n    }\n}\nconst DetailsWidgetModal = translate()(DetailsWidgetModalBase);\nexport { DetailsWidgetModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_sm, global_spacer_xl, global_spacer_xs, } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    form: {\n        marginLeft: global_spacer_sm.var,\n    },\n    modal: {\n        h2: {\n            marginBottom: global_spacer_xl.value,\n        },\n        input: {\n            marginRight: global_spacer_xs.var,\n        },\n        ul: {\n            marginLeft: global_spacer_sm.var,\n        },\n    },\n    title: {\n        paddingBottom: global_spacer_xl.var,\n    },\n});\n","import { Button, ButtonVariant, Form, FormGroup, Modal, Radio, Title, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport { tagKey } from 'api/query';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsExportActions, awsExportSelectors } from 'store/awsExport';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { sort } from 'utils/sort';\nimport { styles } from './exportModal.styles';\nconst resolutionOptions = [\n    { label: 'Daily', value: 'daily' },\n    { label: 'Monthly', value: 'monthly' },\n];\nexport class ExportModalBase extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            resolution: 'daily',\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getQueryString = () => {\n            const { groupBy, isAllItems, items, query } = this.props;\n            const { resolution } = this.state;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { group_by: undefined, order_by: undefined });\n            newQuery.filter.resolution = resolution;\n            let queryString = getQuery(newQuery);\n            if (isAllItems) {\n                queryString += `&group_by[${groupBy}]=*`;\n            }\n            else {\n                for (const item of items) {\n                    queryString += `&group_by[${groupBy}]=` + item.label;\n                }\n            }\n            return queryString;\n        };\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleFetchReport = () => {\n            const { exportReport } = this.props;\n            exportReport(\"cost\" /* cost */, this.getQueryString());\n        };\n        this.handleResolutionChange = (_, event) => {\n            this.setState({ resolution: event.currentTarget.value });\n        };\n        this.handleResolutionChange = this.handleResolutionChange.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchStatus, isOpen } = this.props;\n        if (isOpen && !prevProps.isOpen) {\n            this.setState(Object.assign({}, this.defaultState));\n        }\n        if (prevProps.export !== this.props.export &&\n            fetchStatus === 2 /* complete */) {\n            this.handleClose();\n        }\n    }\n    render() {\n        const { fetchStatus, groupBy, items, t } = this.props;\n        const { resolution } = this.state;\n        const sortedItems = [...items];\n        if (this.props.isOpen) {\n            sort(sortedItems, {\n                key: 'id',\n                direction: 0 /* asc */,\n            });\n        }\n        let selectedLabel = t('export.selected', { groupBy });\n        if (groupBy.indexOf(tagKey) !== -1) {\n            selectedLabel = t('export.selected_tags');\n        }\n        return (React.createElement(Modal, { className: css(styles.modal), isLarge: true, isOpen: this.props.isOpen, onClose: this.handleClose, title: t('export.title'), actions: [\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.cancel_btn), { key: \"cancel\", onClick: this.handleClose, variant: ButtonVariant.secondary }), t('export.cancel')),\n                React.createElement(Button, Object.assign({}, getTestProps(testIds.export.submit_btn), { isDisabled: fetchStatus === 1 /* inProgress */, key: \"confirm\", onClick: this.handleFetchReport, variant: ButtonVariant.primary }), t('export.confirm')),\n            ] },\n            React.createElement(Title, { className: css(styles.title), size: \"xl\" }, t('export.heading', { groupBy })),\n            React.createElement(Form, { className: css(styles.form) },\n                React.createElement(FormGroup, { label: t('export.aggregate_type'), fieldId: \"aggregate-type\" },\n                    React.createElement(React.Fragment, null, resolutionOptions.map((option, index) => (React.createElement(Radio, { key: index, id: `resolution-${index}`, isValid: option.value !== undefined, label: t(option.label), value: option.value, checked: resolution === option.value, name: \"resolution\", onChange: this.handleResolutionChange, \"aria-label\": t(option.label) }))))),\n                React.createElement(FormGroup, { label: selectedLabel, fieldId: \"selected-labels\" },\n                    React.createElement(\"ul\", null, sortedItems.map((groupItem, index) => {\n                        return React.createElement(\"li\", { key: index }, groupItem.label);\n                    }))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        error: awsExportSelectors.selectExportError(state),\n        export: awsExportSelectors.selectExport(state),\n        fetchStatus: awsExportSelectors.selectExportFetchStatus(state),\n    };\n});\nconst mapDispatchToProps = {\n    exportReport: awsExportActions.exportReport,\n};\nconst ExportModal = translate()(connect(mapStateToProps, mapDispatchToProps)(ExportModalBase));\nexport { ExportModal };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_lg, global_spacer_md, global_spacer_sm, } from '@patternfly/react-tokens';\nexport const chartStyles = {\n    chartHeight: 90,\n    chartContainerHeight: 215,\n};\nexport const styles = StyleSheet.create({\n    chartContainer: {\n        marginLeft: global_spacer_lg.value,\n    },\n    chartSkeleton: {\n        height: '125px',\n        marginBottom: global_spacer_md.value,\n        marginTop: global_spacer_3xl.value,\n    },\n    costChart: {\n        marginTop: global_spacer_sm.value,\n    },\n    instanceChart: {\n        marginTop: global_spacer_md.value,\n    },\n    legendSkeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    storageChart: {\n        marginTop: global_spacer_md.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { transformAwsReport, } from 'components/charts/commonChart/chartUtils';\nimport { HistoricalTrendChart } from 'components/charts/historicalTrendChart';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport * as awsReportsActions from 'store/awsReports/awsReportsActions';\nimport * as awsReportsSelectors from 'store/awsReports/awsReportsSelectors';\nimport { createMapStateToProps } from 'store/common';\nimport { formatValue, unitLookupKey } from 'utils/formatValue';\nimport { chartStyles, styles } from './historicalChart.styles';\nconst costReportType = \"cost\" /* cost */;\nconst instanceReportType = \"instance_type\" /* instanceType */;\nconst storageReportType = \"storage\" /* storage */;\nclass HistoricalModalBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getSkeleton = () => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(Skeleton, { className: css(styles.chartSkeleton), size: SkeletonSize.md }),\n                React.createElement(Skeleton, { className: css(styles.legendSkeleton), size: SkeletonSize.xs })));\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        fetchReport(costReportType, currentQueryString);\n        fetchReport(instanceReportType, currentQueryString);\n        fetchReport(storageReportType, currentQueryString);\n        fetchReport(costReportType, previousQueryString);\n        fetchReport(instanceReportType, previousQueryString);\n        fetchReport(storageReportType, previousQueryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, currentQueryString, previousQueryString } = this.props;\n        if (prevProps.currentQueryString !== currentQueryString) {\n            fetchReport(costReportType, currentQueryString);\n            fetchReport(instanceReportType, currentQueryString);\n            fetchReport(storageReportType, currentQueryString);\n        }\n        if (prevProps.previousQueryString !== previousQueryString) {\n            fetchReport(costReportType, previousQueryString);\n            fetchReport(instanceReportType, previousQueryString);\n            this.props.fetchReport(storageReportType, previousQueryString);\n        }\n    }\n    render() {\n        const { currentCostReport, currentCostReportFetchStatus, currentInstanceReport, currentInstanceReportFetchStatus, currentStorageReport, currentStorageReportFetchStatus, previousCostReport, previousCostReportFetchStatus, previousInstanceReport, previousInstanceReportFetchStatus, previousStorageReport, previousStorageReportFetchStatus, t, } = this.props;\n        // Cost data\n        const currentCostData = transformAwsReport(currentCostReport, 0 /* rolling */, 'date', 'cost');\n        const previousCostData = transformAwsReport(previousCostReport, 0 /* rolling */, 'date', 'cost');\n        // Instance data\n        const currentInstanceData = transformAwsReport(currentInstanceReport, 1 /* daily */, 'date', 'cost');\n        const previousInstanceData = transformAwsReport(previousInstanceReport, 1 /* daily */, 'date', 'cost');\n        // Storage data\n        const currentStorageData = transformAwsReport(currentStorageReport, 1 /* daily */, 'date', 'cost');\n        const previousStorageData = transformAwsReport(previousStorageReport, 1 /* daily */, 'date', 'cost');\n        const costUnits = currentCostReport &&\n            currentCostReport.meta &&\n            currentCostReport.meta.total &&\n            currentCostReport.meta.total.cost\n            ? currentCostReport.meta.total.cost.units\n            : 'USD';\n        return (React.createElement(\"div\", { className: css(styles.chartContainer) },\n            React.createElement(\"div\", { className: css(styles.costChart) }, currentCostReportFetchStatus === 1 /* inProgress */ &&\n                previousCostReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentCostData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousCostData, title: t('aws_details.historical.cost_title'), xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.cost_label', {\n                    units: t(`units.${unitLookupKey(costUnits)}`),\n                }) }))),\n            React.createElement(\"div\", { className: css(styles.instanceChart) }, currentInstanceReportFetchStatus === 1 /* inProgress */ &&\n                previousInstanceReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentInstanceData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousInstanceData, title: t('aws_details.historical.instance_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.instance_label') }))),\n            React.createElement(\"div\", { className: css(styles.storageChart) }, currentStorageReportFetchStatus === 1 /* inProgress */ &&\n                previousStorageReportFetchStatus === 1 /* inProgress */ ? (this.getSkeleton()) : (React.createElement(HistoricalTrendChart, { containerHeight: chartStyles.chartContainerHeight, currentData: currentStorageData, formatDatumValue: formatValue, formatDatumOptions: {}, height: chartStyles.chartHeight, previousData: previousStorageData, title: t('aws_details.historical.storage_title'), showUsageLegendLabel: true, xAxisLabel: t('aws_details.historical.day_of_month_label'), yAxisLabel: t('aws_details.historical.storage_label') })))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { currentQueryString, previousQueryString }) => {\n    // Current report\n    const currentCostReport = awsReportsSelectors.selectReport(state, costReportType, currentQueryString);\n    const currentCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, currentQueryString);\n    const currentInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, currentQueryString);\n    const currentInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, currentQueryString);\n    const currentStorageReport = awsReportsSelectors.selectReport(state, storageReportType, currentQueryString);\n    const currentStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, currentQueryString);\n    // Previous report\n    const previousCostReport = awsReportsSelectors.selectReport(state, costReportType, previousQueryString);\n    const previousCostReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, costReportType, previousQueryString);\n    const previousInstanceReport = awsReportsSelectors.selectReport(state, instanceReportType, previousQueryString);\n    const previousInstanceReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, instanceReportType, previousQueryString);\n    const previousStorageReport = awsReportsSelectors.selectReport(state, storageReportType, previousQueryString);\n    const previousStorageReportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, storageReportType, previousQueryString);\n    return {\n        currentCostReport,\n        currentCostReportFetchStatus,\n        currentInstanceReport,\n        currentInstanceReportFetchStatus,\n        currentStorageReport,\n        currentStorageReportFetchStatus,\n        previousCostReport,\n        previousCostReportFetchStatus,\n        previousInstanceReport,\n        previousInstanceReportFetchStatus,\n        previousStorageReport,\n        previousStorageReportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst HistoricalChart = translate()(connect(mapStateToProps, mapDispatchToProps)(HistoricalModalBase));\nexport { HistoricalChart };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    modal: {\n        // Workaround for isLarge not working properly\n        height: '900px',\n        width: '1200px',\n    },\n});\nexport const modalOverride = css `\n  & .pf-c-modal-box__footer {\n    display: none;\n  }\n`;\n","import { Modal } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsDashboardSelectors } from 'store/awsDashboard';\nimport { createMapStateToProps } from 'store/common';\nimport { HistoricalChart } from './historicalChart';\nimport { modalOverride, styles } from './historicalModal.styles';\nclass HistoricalModalBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = () => {\n            this.props.onClose(false);\n        };\n        this.handleClose = this.handleClose.bind(this);\n    }\n    componentDidMount() {\n        this.setState({});\n    }\n    shouldComponentUpdate(nextProps) {\n        const { isOpen, item } = this.props;\n        return nextProps.item !== item || nextProps.isOpen !== isOpen;\n    }\n    render() {\n        const { currentQueryString, groupBy, isOpen, item, previousQueryString, t, } = this.props;\n        return (React.createElement(Modal, { className: `${modalOverride} ${css(styles.modal)}`, isLarge: true, isOpen: isOpen, onClose: this.handleClose, title: t('aws_details.historical.modal_title', {\n                groupBy,\n                name: item.label,\n            }) },\n            React.createElement(HistoricalChart, { currentQueryString: currentQueryString, previousQueryString: previousQueryString })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item }) => {\n    const currentQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const currentQueryString = getQuery(currentQuery);\n    const previousQuery = {\n        filter: {\n            time_scope_units: 'month',\n            time_scope_value: -2,\n            resolution: 'daily',\n            limit: 3,\n        },\n        group_by: {\n            [groupBy]: item.label || item.id,\n        },\n    };\n    const previousQueryString = getQuery(previousQuery);\n    return {\n        currentQueryString,\n        previousQueryString,\n        widgets: awsDashboardSelectors.selectCurrentWidgets(state),\n    };\n});\nconst HistoricalModal = translate()(connect(mapStateToProps, {})(HistoricalModalBase));\nexport { HistoricalModal };\n","import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { DetailsTagModal } from './detailsTagModal';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nimport { ExportModal } from './exportModal';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsActionsBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isDropdownOpen: false,\n            isExportModalOpen: false,\n            isHistoricalModalOpen: false,\n            isTagModalOpen: false,\n            isWidgetModalOpen: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = () => {\n            const { groupBy, item, query } = this.props;\n            const { isExportModalOpen } = this.state;\n            return (React.createElement(ExportModal, { groupBy: groupBy, isOpen: isExportModalOpen, items: [item], onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getHistoricalModal = () => {\n            const { groupBy, item } = this.props;\n            const { isHistoricalModalOpen } = this.state;\n            return (React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose }));\n        };\n        this.getTagModal = () => {\n            const { groupBy, item } = this.props;\n            const { isTagModalOpen } = this.state;\n            return (React.createElement(DetailsTagModal, { account: item.label || item.id, groupBy: groupBy, isOpen: isTagModalOpen, item: item, onClose: this.handleTagModalClose }));\n        };\n        this.getWidgetModal = () => {\n            const { groupBy, item } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            return (React.createElement(DetailsWidgetModal, { groupBy: \"account\", isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: groupBy }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleTagModalClose = (isOpen) => {\n            this.setState({ isTagModalOpen: isOpen });\n        };\n        this.handleTagModalOpen = () => {\n            this.setState({ isTagModalOpen: true });\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = () => {\n            this.setState({ isWidgetModalOpen: true });\n        };\n        this.handleOnSelect = () => {\n            const { isDropdownOpen } = this.state;\n            this.setState({\n                isDropdownOpen: !isDropdownOpen,\n            });\n        };\n        this.handleOnToggle = (isDropdownOpen) => {\n            this.setState({ isDropdownOpen });\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n        this.handleTagModalClose = this.handleTagModalClose.bind(this);\n        this.handleTagModalOpen = this.handleTagModalOpen.bind(this);\n        this.handleWidgetModalClose = this.handleWidgetModalClose.bind(this);\n        this.handleWidgetModalOpen = this.handleWidgetModalOpen.bind(this);\n        this.handleOnToggle = this.handleOnToggle.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n    }\n    render() {\n        const { groupBy, t } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { onSelect: this.handleOnSelect, toggle: React.createElement(KebabToggle, { onToggle: this.handleOnToggle }), isOpen: this.state.isDropdownOpen, isPlain: true, position: \"right\", dropdownItems: [\n                    React.createElement(DropdownItem, { component: \"button\", key: \"historical-data-action\", onClick: this.handleHistoricalModalOpen }, t('aws_details.actions.historical_data')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"widget-action\", isDisabled: groupBy === 'account', onClick: this.handleWidgetModalOpen }, t('aws_details.actions.accounts')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"tag-action\", isDisabled: groupBy !== 'account', onClick: this.handleTagModalOpen }, t('aws_details.actions.tags')),\n                    React.createElement(DropdownItem, { component: \"button\", key: \"export-action\", onClick: this.handleExportModalOpen }, t('aws_details.actions.export')),\n                ] }),\n            this.getExportModal(),\n            this.getHistoricalModal(),\n            this.getTagModal(),\n            this.getWidgetModal()));\n    }\n}\nconst DetailsActions = translate()(DetailsActionsBase);\nexport { DetailsActions };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_BackgroundColor_light_100, global_danger_color_100, global_disabled_color_100, global_FontSize_xs, global_spacer_3xl, global_spacer_xs, global_success_color_100, } from '@patternfly/react-tokens';\nimport { css } from 'emotion';\nexport const styles = StyleSheet.create({\n    emptyState: {\n        backgroundColor: global_BackgroundColor_light_100.value,\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: global_spacer_3xl.value,\n        height: '35vh',\n        width: '100%',\n    },\n    infoArrow: {\n        position: 'relative',\n    },\n    infoArrowDesc: {\n        bottom: global_spacer_xs.value,\n    },\n    infoDescription: {\n        color: global_disabled_color_100.value,\n        fontSize: global_FontSize_xs.value,\n    },\n});\nexport const monthOverMonthOverride = css `\n  div {\n    display: block;\n    margin-right: 0;\n    margin-bottom: ${global_spacer_xs.value};\n    &.iconOverride {\n      &.decrease {\n        color: ${global_success_color_100.value};\n      }\n      &.increase {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-up,\n      .fa-sort-down {\n        margin-left: 10px;\n      }\n      .fa-sort-up::before {\n        color: ${global_danger_color_100.value};\n      }\n      .fa-sort-down::before {\n        color: ${global_success_color_100.value};\n      }\n      span {\n        margin-right: -17px !important;\n      }\n    }\n  }\n`;\nexport const tableOverride = css `\n  &.pf-c-table {\n    thead th + th {\n      .pf-c-button {\n        text-align: right;\n      }\n      text-align: right;\n    }\n    tbody td + td + td + td {\n      text-align: right;\n    }\n    td {\n      vertical-align: top;\n    }\n  }\n`;\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    clusterContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n    historicalContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: global_spacer_xl.value,\n    },\n    leftPane: {\n        marginRight: global_spacer_3xl.value,\n        paddingBottom: global_spacer_xl.value,\n        paddingRight: global_spacer_3xl.value,\n    },\n    rightPane: {\n        marginRight: global_spacer_xl.value,\n        paddingBottom: global_spacer_xl.value,\n    },\n    tagsContainer: {\n        marginBottom: global_spacer_xl.value,\n    },\n});\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_3xl, global_spacer_sm } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    tagsContainer: {\n        marginRight: global_spacer_3xl.value,\n        marginTop: global_spacer_sm.value,\n    },\n});\n","import { css } from '@patternfly/react-styles';\nimport { getQuery } from 'api/awsQuery';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTag.styles';\nimport { DetailsTagModal } from './detailsTagModal';\nconst reportType = \"tag\" /* tag */;\nclass DetailsTagBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultState = {\n            isOpen: false,\n            showAll: false,\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.handleClose = (isOpen) => {\n            this.setState({ isOpen });\n        };\n        this.handleOpen = event => {\n            this.setState({ isOpen: true });\n            event.preventDefault();\n            return false;\n        };\n        this.handleClose = this.handleClose.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { account, groupBy, id, item, report, t } = this.props;\n        const { isOpen, showAll } = this.state;\n        let charCount = 0;\n        const maxChars = 50;\n        const someTags = [];\n        const allTags = [];\n        if (report) {\n            for (const tag of report.data) {\n                for (const val of tag.values) {\n                    const prefix = someTags.length > 0 ? ', ' : '';\n                    const tagString = `${prefix}${tag.key}: ${val}`;\n                    if (showAll) {\n                        someTags.push(tagString);\n                    }\n                    else if (charCount <= maxChars) {\n                        if (charCount + tagString.length > maxChars) {\n                            someTags.push(tagString.slice(0, maxChars - charCount).concat('...'));\n                        }\n                        else {\n                            someTags.push(tagString);\n                        }\n                    }\n                    charCount += tagString.length;\n                    allTags.push(`${tag.key}: ${val}`);\n                }\n            }\n        }\n        return (React.createElement(\"div\", { className: css(styles.tagsContainer), id: id },\n            Boolean(someTags) &&\n                someTags.map((tag, tagIndex) => React.createElement(\"span\", { key: tagIndex }, tag)),\n            Boolean(someTags.length < allTags.length) && (React.createElement(\"a\", Object.assign({}, getTestProps(testIds.details.tag_lnk), { href: \"#/\", onClick: this.handleOpen }), t('aws_details.more_tags', {\n                value: allTags.length - someTags.length,\n            }))),\n            React.createElement(DetailsTagModal, { account: account, groupBy: groupBy, isOpen: isOpen, item: item, onClose: this.handleClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { account }) => {\n    const queryString = getQuery({\n        filter: {\n            account,\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        account,\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsTag = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsTagBase));\nexport { DetailsTag };\n","import { StyleSheet } from '@patternfly/react-styles';\nimport { global_spacer_md, global_spacer_xl } from '@patternfly/react-tokens';\nexport const styles = StyleSheet.create({\n    skeleton: {\n        marginTop: global_spacer_md.value,\n    },\n    tabs: {\n        marginTop: global_spacer_xl.value,\n    },\n    viewAllContainer: {\n        marginLeft: '-18px',\n        paddingTop: global_spacer_md.value,\n    },\n});\n","import { Button, ButtonType, ButtonVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Skeleton, SkeletonSize, } from '@redhat-cloud-services/frontend-components/components/Skeleton';\nimport { getQuery } from 'api/awsQuery';\nimport { AwsReportSummaryItem, AwsReportSummaryItems, } from 'components/reports/awsReportSummary';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { formatValue } from 'utils/formatValue';\nimport { getComputedAwsReportItems } from 'utils/getComputedAwsReportItems';\nimport { styles } from './detailsWidget.styles';\nimport { DetailsWidgetModal } from './detailsWidgetModal';\nconst reportType = \"cost\" /* cost */;\nclass DetailsWidgetViewBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isWidgetModalOpen: false,\n        };\n        this.getItems = () => {\n            const { groupBy, report } = this.props;\n            const computedItems = getComputedAwsReportItems({\n                report,\n                idKey: groupBy,\n            });\n            return computedItems;\n        };\n        this.getTabItem = reportItem => {\n            const { report } = this.props;\n            return (React.createElement(AwsReportSummaryItem, { key: `${reportItem.id}-item`, formatOptions: {}, formatValue: formatValue, label: reportItem.label ? reportItem.label.toString() : '', totalValue: reportType === \"cost\" /* cost */\n                    ? report.meta.total.cost.value\n                    : report.meta.total.usage.value, units: reportItem.units, value: reportType === \"cost\" /* cost */ ? reportItem.cost : reportItem.usage }));\n        };\n        this.getViewAll = () => {\n            const { groupBy, item, parentGroupBy, t } = this.props;\n            const { isWidgetModalOpen } = this.state;\n            const computedItems = this.getItems();\n            const otherIndex = computedItems.findIndex(i => {\n                const id = i.id;\n                if (id && id !== null) {\n                    return id.toString().includes('Other');\n                }\n            });\n            if (otherIndex !== -1) {\n                return (React.createElement(\"div\", { className: css(styles.viewAllContainer) },\n                    React.createElement(Button, Object.assign({}, getTestProps(testIds.details.view_all_btn), { onClick: this.handleWidgetModalOpen, type: ButtonType.button, variant: ButtonVariant.link }), t('aws_details.view_all', { value: groupBy })),\n                    React.createElement(DetailsWidgetModal, { groupBy: groupBy, isOpen: isWidgetModalOpen, item: item, onClose: this.handleWidgetModalClose, parentGroupBy: parentGroupBy })));\n            }\n            else {\n                return null;\n            }\n        };\n        this.handleWidgetModalClose = (isOpen) => {\n            this.setState({ isWidgetModalOpen: isOpen });\n        };\n        this.handleWidgetModalOpen = event => {\n            this.setState({ isWidgetModalOpen: true });\n            event.preventDefault();\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps) {\n        const { fetchReport, queryString } = this.props;\n        if (prevProps.queryString !== queryString) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, report, reportFetchStatus } = this.props;\n        return (React.createElement(React.Fragment, null, Boolean(reportFetchStatus === 1 /* inProgress */) ? (React.createElement(React.Fragment, null,\n            React.createElement(Skeleton, { size: SkeletonSize.md }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }),\n            React.createElement(Skeleton, { size: SkeletonSize.md, className: css(styles.skeleton) }))) : (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: css(styles.tabs) },\n                React.createElement(AwsReportSummaryItems, { idKey: groupBy, key: `${groupBy}-items`, report: report, status: reportFetchStatus }, ({ items }) => items.map(reportItem => this.getTabItem(reportItem)))),\n            this.getViewAll()))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, { groupBy, item, parentGroupBy }) => {\n    const query = {\n        filter: {\n            limit: 3,\n            time_scope_units: 'month',\n            time_scope_value: -1,\n            resolution: 'monthly',\n            [parentGroupBy]: item.label || item.id,\n        },\n        group_by: { [groupBy]: '*' },\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsWidgetView = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsWidgetViewBase));\nexport { DetailsWidgetView };\n","import { Tab, Tabs } from '@patternfly/react-core';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { DetailsWidgetView } from './detailsWidgetView';\nexport const getIdKeyForTab = (tab) => {\n    switch (tab) {\n        case \"accounts\" /* accounts */:\n            return 'account';\n        case \"regions\" /* regions */:\n            return 'region';\n        case \"services\" /* services */:\n            return 'service';\n    }\n};\nclass DetailsWidgetBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            activeTabKey: 0,\n        };\n        this.handleTabClick = (event, tabIndex) => {\n            this.setState({\n                activeTabKey: tabIndex,\n            });\n        };\n        this.getAvailableTabs = () => {\n            const { availableTabs, groupBy } = this.props;\n            const tabs = [];\n            availableTabs.forEach(tab => {\n                if (groupBy !== getIdKeyForTab(tab)) {\n                    tabs.push(tab);\n                }\n            });\n            return tabs;\n        };\n        this.getTab = (tab, index) => {\n            return (React.createElement(Tab, { eventKey: index, key: `${getIdKeyForTab(tab)}-tab`, title: this.getTabTitle(tab) }, this.getTabItem(tab)));\n        };\n        this.getTabItem = (tab) => {\n            const { groupBy, item } = this.props;\n            const { activeTabKey } = this.state;\n            const availableTabs = this.getAvailableTabs();\n            const activeTab = getIdKeyForTab(availableTabs[activeTabKey]);\n            const currentTab = getIdKeyForTab(tab);\n            if (activeTab === currentTab) {\n                return (React.createElement(DetailsWidgetView, { groupBy: currentTab, item: item, parentGroupBy: groupBy }));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabs = () => {\n            const availableTabs = this.getAvailableTabs();\n            if (availableTabs) {\n                return (React.createElement(Tabs, { isFilled: true, activeKey: this.state.activeTabKey, onSelect: this.handleTabClick }, availableTabs.map((tab, index) => this.getTab(tab, index))));\n            }\n            else {\n                return null;\n            }\n        };\n        this.getTabTitle = (tab) => {\n            const { t } = this.props;\n            const key = getIdKeyForTab(tab) || '';\n            return t('group_by.details', { groupBy: key });\n        };\n    }\n    render() {\n        return React.createElement(React.Fragment, null, this.getTabs());\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {\n        availableTabs: [\n            \"services\" /* services */,\n            \"accounts\" /* accounts */,\n            \"regions\" /* regions */,\n        ],\n    };\n});\nconst DetailsWidget = translate()(connect(mapStateToProps, {})(DetailsWidgetBase));\nexport { DetailsWidget };\n","import { Button, ButtonType, ButtonVariant, Form, FormGroup, Grid, GridItem, } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createMapStateToProps } from 'store/common';\nimport { getTestProps, testIds } from 'testIds';\nimport { styles } from './detailsTableItem.styles';\nimport { DetailsTag } from './detailsTag';\nimport { DetailsWidget } from './detailsWidget';\nimport { HistoricalModal } from './historicalModal';\nclass DetailsTableItemBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isHistoricalModalOpen: false,\n        };\n        this.handleHistoricalModalClose = (isOpen) => {\n            this.setState({ isHistoricalModalOpen: isOpen });\n        };\n        this.handleHistoricalModalOpen = () => {\n            this.setState({ isHistoricalModalOpen: true });\n        };\n        this.handleHistoricalModalClose = this.handleHistoricalModalClose.bind(this);\n        this.handleHistoricalModalOpen = this.handleHistoricalModalOpen.bind(this);\n    }\n    render() {\n        const { item, groupBy, t } = this.props;\n        const { isHistoricalModalOpen } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Grid, null,\n                React.createElement(GridItem, { sm: 12 },\n                    React.createElement(\"div\", { className: css(styles.historicalContainer) },\n                        React.createElement(Button, Object.assign({}, getTestProps(testIds.details.historical_data_btn), { onClick: this.handleHistoricalModalOpen, type: ButtonType.button, variant: ButtonVariant.secondary }), t('aws_details.historical.view_data')))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.leftPane) },\n                        React.createElement(DetailsWidget, { groupBy: groupBy, item: item }))),\n                React.createElement(GridItem, { lg: 12, xl: 6 },\n                    React.createElement(\"div\", { className: css(styles.rightPane) }, Boolean(groupBy === 'account') && (React.createElement(\"div\", { className: css(styles.tagsContainer) },\n                        React.createElement(Form, null,\n                            React.createElement(FormGroup, { label: t('aws_details.tags_label'), fieldId: \"tags\" },\n                                React.createElement(DetailsTag, { groupBy: groupBy, id: \"tags\", item: item, account: item.label || item.id })))))))),\n            React.createElement(HistoricalModal, { groupBy: groupBy, isOpen: isHistoricalModalOpen, item: item, onClose: this.handleHistoricalModalClose })));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    return {};\n});\nconst DetailsTableItem = translate()(connect(mapStateToProps, {})(DetailsTableItemBase));\nexport { DetailsTableItem };\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, } from '@patternfly/react-core';\nimport { CalculatorIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport { sortable, SortByDirection, Table, TableBody, TableHeader, } from '@patternfly/react-table';\nimport { getQuery } from 'api/awsQuery';\nimport { tagKey } from 'api/query';\nimport { EmptyFilterState } from 'components/state/emptyFilterState/emptyFilterState';\nimport { EmptyValueState } from 'components/state/emptyValueState/emptyValueState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { getForDateRangeString, getNoDataForDateRangeString, } from 'utils/dateRange';\nimport { formatCurrency } from 'utils/formatValue';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { DetailsActions } from './detailsActions';\nimport { monthOverMonthOverride, styles, tableOverride, } from './detailsTable.styles';\nimport { DetailsTableItem } from './detailsTableItem';\nclass DetailsTableBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [],\n            rows: [],\n        };\n        this.initDatum = () => {\n            const { query, report, t } = this.props;\n            if (!query || !report) {\n                return;\n            }\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            const total = formatCurrency(report && report.meta && report.meta.total\n                ? report.meta.total.cost.value\n                : 0);\n            const columns = groupByTagKey\n                ? [\n                    {\n                        title: t('ocp_details.tag_column_title'),\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title', { total }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ]\n                : [\n                    {\n                        orderBy: groupById === 'account' ? 'account_alias' : groupById,\n                        title: t('aws_details.name_column_title', { groupBy: groupById }),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: t('aws_details.change_column_title'),\n                    },\n                    {\n                        orderBy: 'cost',\n                        title: t('aws_details.cost_column_title'),\n                        transforms: [sortable],\n                    },\n                    {\n                        title: '',\n                    },\n                ];\n            const rows = [];\n            const computedItems = getUnsortedComputedAwsReportItems({\n                report,\n                idKey: groupByTagKey || groupById,\n            });\n            computedItems.map((item, index) => {\n                const label = item && item.label !== null ? item.label : '';\n                const monthOverMonth = this.getMonthOverMonthCost(item, index);\n                const cost = this.getTotalCost(item, index);\n                const actions = this.getActions(item, index);\n                rows.push({\n                    cells: [\n                        { title: React.createElement(\"div\", null, label) },\n                        { title: React.createElement(\"div\", null, monthOverMonth) },\n                        { title: React.createElement(\"div\", null, cost) },\n                        { title: React.createElement(\"div\", null, actions) },\n                    ],\n                    isOpen: false,\n                    item,\n                    tableItem: {\n                        groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById,\n                        index,\n                        item,\n                        query,\n                    },\n                }, {\n                    parent: index * 2,\n                    cells: [\n                        {\n                            title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')),\n                        },\n                    ],\n                });\n            });\n            this.setState({\n                columns,\n                rows,\n                sortBy: {},\n            });\n        };\n        this.getActions = (item, index) => {\n            const { groupBy, query } = this.props;\n            return React.createElement(DetailsActions, { groupBy: groupBy, item: item, query: query });\n        };\n        this.getEmptyState = () => {\n            const { query, t } = this.props;\n            for (const val of Object.values(query.group_by)) {\n                if (val !== '*') {\n                    return React.createElement(EmptyFilterState, { showMargin: false });\n                }\n            }\n            return (React.createElement(EmptyState, null,\n                React.createElement(EmptyStateIcon, { icon: CalculatorIcon }),\n                React.createElement(EmptyStateBody, null, t('ocp_cloud_details.empty_state'))));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTagKey;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTagKey = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTagKey;\n        };\n        this.getMonthOverMonthCost = (item, index) => {\n            const { t } = this.props;\n            const value = formatCurrency(Math.abs(item.cost - item.deltaValue));\n            const percentage = item.deltaPercent !== null ? Math.abs(item.deltaPercent).toFixed(2) : 0;\n            const showPercentage = !(percentage === 0 || percentage === '0.00');\n            const showValue = item.deltaPercent !== null; // Workaround for https://github.com/project-koku/koku/issues/1395\n            let iconOverride;\n            if (showPercentage) {\n                iconOverride = 'iconOverride';\n                if (item.deltaPercent !== null && item.deltaValue < 0) {\n                    iconOverride += ' decrease';\n                }\n                if (item.deltaPercent !== null && item.deltaValue > 0) {\n                    iconOverride += ' increase';\n                }\n            }\n            if (!showValue) {\n                return getNoDataForDateRangeString();\n            }\n            else {\n                return (React.createElement(\"div\", { className: monthOverMonthOverride },\n                    React.createElement(\"div\", { className: iconOverride, key: `month-over-month-cost-${index}` },\n                        Boolean(showPercentage) ? (t('percent', { value: percentage })) : (React.createElement(EmptyValueState, null)),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue > 0) && (React.createElement(\"span\", { className: css('fa fa-sort-up', styles.infoArrow), key: `month-over-month-icon-${index}` })),\n                        Boolean(showPercentage &&\n                            item.deltaPercent !== null &&\n                            item.deltaValue < 0) && (React.createElement(\"span\", { className: css('fa fa-sort-down', styles.infoArrow, styles.infoArrowDesc), key: `month-over-month-icon-${index}` }))),\n                    React.createElement(\"div\", { className: css(styles.infoDescription), key: `month-over-month-info-${index}` }, getForDateRangeString(value))));\n            }\n        };\n        this.getSortBy = () => {\n            const { query } = this.props;\n            const { columns } = this.state;\n            const groupByTagKey = this.getGroupByTagKey();\n            let index = -1;\n            let direction = SortByDirection.asc;\n            for (const key of Object.keys(query.order_by)) {\n                let c = 0;\n                for (const column of columns) {\n                    if (column.orderBy === key) {\n                        direction =\n                            query.order_by[key] === 'asc'\n                                ? SortByDirection.asc\n                                : SortByDirection.desc;\n                        index = c + (groupByTagKey ? 1 : 2);\n                        break;\n                    }\n                    c++;\n                }\n            }\n            return index > -1 ? { index, direction } : {};\n        };\n        this.getTableItem = (item, groupBy, query, index) => {\n            return (React.createElement(DetailsTableItem, { groupBy: groupBy, item: item, key: `table-item-${index}` }));\n        };\n        this.getTotalCost = (item, index) => {\n            const { report, t } = this.props;\n            const cost = report.meta.total.cost.value;\n            return (React.createElement(React.Fragment, null,\n                formatCurrency(item.cost),\n                React.createElement(\"div\", { className: css(styles.infoDescription), key: `total-cost-${index}` }, t('percent_of_cost', {\n                    value: ((item.cost / cost) * 100).toFixed(2),\n                }))));\n        };\n        this.handleOnCollapse = (event, rowId, isOpen) => {\n            const { t } = this.props;\n            const { rows } = this.state;\n            const { tableItem: { item, groupBy, query, index }, } = rows[rowId];\n            if (isOpen) {\n                rows[rowId + 1].cells = [\n                    { title: this.getTableItem(item, groupBy, query, index) },\n                ];\n            }\n            else {\n                rows[rowId + 1].cells = [\n                    { title: React.createElement(\"div\", { key: `${index * 2}-child` }, t('loading')) },\n                ];\n            }\n            rows[rowId].isOpen = isOpen;\n            this.setState({\n                rows,\n            });\n        };\n        this.handleOnSelect = (event, isSelected, rowId) => {\n            const { onSelected } = this.props;\n            let rows;\n            if (rowId === -1) {\n                rows = this.state.rows.map(row => {\n                    row.selected = isSelected;\n                    return row;\n                });\n            }\n            else {\n                rows = [...this.state.rows];\n                rows[rowId].selected = isSelected;\n            }\n            if (onSelected) {\n                const selectedItems = [];\n                for (const row of rows) {\n                    if (row.selected && row.item && !row.parent) {\n                        selectedItems.push(row.item);\n                    }\n                }\n                onSelected(selectedItems);\n            }\n            this.setState({ rows });\n        };\n        this.handleOnSort = (event, index, direction) => {\n            const { onSort } = this.props;\n            const { columns } = this.state;\n            if (onSort) {\n                const orderBy = columns[index - 2].orderBy;\n                const isSortAscending = direction === SortByDirection.asc;\n                onSort(orderBy, isSortAscending);\n            }\n        };\n        this.handleOnCollapse = this.handleOnCollapse.bind(this);\n        this.handleOnSelect = this.handleOnSelect.bind(this);\n        this.handleOnSort = this.handleOnSort.bind(this);\n    }\n    componentDidMount() {\n        this.initDatum();\n    }\n    componentDidUpdate(prevProps) {\n        const { query, report } = this.props;\n        const currentReport = report && report.data ? JSON.stringify(report.data) : '';\n        const previousReport = prevProps.report && prevProps.report.data\n            ? JSON.stringify(prevProps.report.data)\n            : '';\n        if (getQuery(prevProps.query) !== getQuery(query) ||\n            previousReport !== currentReport) {\n            this.initDatum();\n        }\n    }\n    render() {\n        const { columns, rows } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Table, { \"aria-label\": \"details-table\", cells: columns, className: tableOverride, onCollapse: this.handleOnCollapse, rows: rows, sortBy: this.getSortBy(), onSelect: this.handleOnSelect, onSort: this.handleOnSort, gridBreakPoint: \"grid-2xl\" },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null)),\n            Boolean(rows.length === 0) && (React.createElement(\"div\", { className: css(styles.emptyState) }, this.getEmptyState()))));\n    }\n}\nconst DetailsTable = translate()(connect()(DetailsTableBase));\nexport { DetailsTable };\n","import { getQuery } from 'api/awsQuery';\nimport { DetailsDataToolbar } from 'components/details/detailsDataToolbar';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { isEqual } from 'utils/equal';\nconst reportType = \"tag\" /* tag */;\nexport class DetailsToolbarBase extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getCategoryOptions = () => {\n            const { t } = this.props;\n            return [\n                { label: t('filter_by.values.account'), value: 'account' },\n                { label: t('filter_by.values.service'), value: 'service' },\n                { label: t('filter_by.values.region'), value: 'region' },\n                { label: t('filter_by.values.tag'), value: 'tag' },\n            ];\n        };\n    }\n    componentDidMount() {\n        const { fetchReport, queryString } = this.props;\n        fetchReport(reportType, queryString);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { fetchReport, query, queryString } = this.props;\n        if (query && !isEqual(query, prevProps.query)) {\n            fetchReport(reportType, queryString);\n        }\n    }\n    render() {\n        const { groupBy, isExportDisabled, onExportClicked, onFilterAdded, onFilterRemoved, pagination, query, report, } = this.props;\n        return (React.createElement(DetailsDataToolbar, { categoryOptions: this.getCategoryOptions(), groupBy: groupBy, isExportDisabled: isExportDisabled, onExportClicked: onExportClicked, onFilterAdded: onFilterAdded, onFilterRemoved: onFilterRemoved, pagination: pagination, query: query, report: report, showExport: true }));\n    }\n}\nconst mapStateToProps = createMapStateToProps(state => {\n    const queryString = getQuery({\n        filter: {\n            resolution: 'monthly',\n            time_scope_units: 'month',\n            time_scope_value: -1,\n        },\n    });\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    return {\n        queryString,\n        report,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nconst DetailsToolbar = translate()(connect(mapStateToProps, mapDispatchToProps)(DetailsToolbarBase));\nexport { DetailsToolbar };\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { getQuery, getQueryRoute, parseQuery } from 'api/awsQuery';\nimport { getProvidersQuery } from 'api/providersQuery';\nimport { tagKey } from 'api/query';\nimport { ErrorState } from 'components/state/errorState/errorState';\nimport { LoadingState } from 'components/state/loadingState/loadingState';\nimport { NoProvidersState } from 'components/state/noProvidersState/noProvidersState';\nimport React from 'react';\nimport { translate } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { awsReportsActions, awsReportsSelectors } from 'store/awsReports';\nimport { createMapStateToProps } from 'store/common';\nimport { awsProvidersQuery, providersSelectors } from 'store/providers';\nimport { getIdKeyForGroupBy, getUnsortedComputedAwsReportItems, } from 'utils/getComputedAwsReportItems';\nimport { styles } from './awsDetails.styles';\nimport { DetailsHeader } from './detailsHeader';\nimport { DetailsTable } from './detailsTable';\nimport { DetailsToolbar } from './detailsToolbar';\nimport { ExportModal } from './exportModal';\nconst reportType = \"cost\" /* cost */;\nconst baseQuery = {\n    delta: 'cost',\n    filter: {\n        limit: 10,\n        offset: 0,\n        resolution: 'monthly',\n        time_scope_units: 'month',\n        time_scope_value: -1,\n    },\n    filter_by: {},\n    group_by: {\n        account: '*',\n    },\n    order_by: {\n        cost: 'desc',\n    },\n};\nclass AwsDetails extends React.Component {\n    constructor(stateProps, dispatchProps) {\n        super(stateProps, dispatchProps);\n        this.defaultState = {\n            columns: [],\n            isExportModalOpen: false,\n            rows: [],\n            selectedItems: [],\n        };\n        this.state = Object.assign({}, this.defaultState);\n        this.getExportModal = (computedItems) => {\n            const { isExportModalOpen, selectedItems } = this.state;\n            const { query } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(ExportModal, { isAllItems: selectedItems.length === computedItems.length, groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isOpen: isExportModalOpen, items: selectedItems, onClose: this.handleExportModalClose, query: query }));\n        };\n        this.getGroupByTagKey = () => {\n            const { query } = this.props;\n            let groupByTag;\n            for (const groupBy of Object.keys(query.group_by)) {\n                const tagIndex = groupBy.indexOf(tagKey);\n                if (tagIndex !== -1) {\n                    groupByTag = groupBy.substring(tagIndex + tagKey.length);\n                    break;\n                }\n            }\n            return groupByTag;\n        };\n        this.getPagination = (isBottom = false) => {\n            const { report } = this.props;\n            const count = report && report.meta ? report.meta.count : 0;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = report && report.meta && report.meta.filter && report.meta.filter.offset\n                ? report.meta.filter.offset\n                : baseQuery.filter.offset;\n            const page = offset / limit + 1;\n            return (React.createElement(Pagination, { isCompact: true, itemCount: count, onPerPageSelect: this.handlePerPageSelect, onSetPage: this.handleSetPage, page: page, perPage: limit, variant: isBottom ? PaginationVariant.bottom : PaginationVariant.top, widgetId: \"`pagination${isBottom ? '-bottom' : ''}`\" }));\n        };\n        this.getTable = () => {\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsTable, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, onSelected: this.handleSelected, onSort: this.handleSort, query: query, report: report }));\n        };\n        this.getToolbar = () => {\n            const { selectedItems } = this.state;\n            const { query, report } = this.props;\n            const groupById = getIdKeyForGroupBy(query.group_by);\n            const groupByTagKey = this.getGroupByTagKey();\n            return (React.createElement(DetailsToolbar, { groupBy: groupByTagKey ? `${tagKey}${groupByTagKey}` : groupById, isExportDisabled: selectedItems.length === 0, onExportClicked: this.handleExportModalOpen, onFilterAdded: this.handleFilterAdded, onFilterRemoved: this.handleFilterRemoved, pagination: this.getPagination(), query: query, report: report }));\n        };\n        this.handleExportModalClose = (isOpen) => {\n            this.setState({ isExportModalOpen: isOpen });\n        };\n        this.handleExportModalOpen = () => {\n            this.setState({ isExportModalOpen: true });\n        };\n        this.handleFilterAdded = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            // Filter by * won't generate a new request if group_by * already exists\n            if (filterValue === '*' && newQuery.group_by[filterType] === '*') {\n                return;\n            }\n            if (newQuery.filter_by[filterType]) {\n                let found = false;\n                const filters = newQuery.filter_by[filterType];\n                if (!Array.isArray(filters)) {\n                    found = filterValue === newQuery.filter_by[filterType];\n                }\n                else {\n                    for (const filter of filters) {\n                        if (filter === filterValue) {\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n                if (!found) {\n                    newQuery.filter_by[filterType] = [\n                        newQuery.filter_by[filterType],\n                        filterValue,\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = [filterValue];\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleFilterRemoved = (filterType, filterValue) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            if (filterType === null) {\n                newQuery.filter_by = undefined; // Clear all\n            }\n            else if (filterValue === null) {\n                newQuery.filter_by[filterType] = undefined; // Clear all values\n            }\n            else if (Array.isArray(newQuery.filter_by[filterType])) {\n                const index = newQuery.filter_by[filterType].indexOf(filterValue);\n                if (index > -1) {\n                    newQuery.filter_by[filterType] = [\n                        ...query.filter_by[filterType].slice(0, index),\n                        ...query.filter_by[filterType].slice(index + 1),\n                    ];\n                }\n            }\n            else {\n                newQuery.filter_by[filterType] = undefined;\n            }\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleGroupByClick = groupBy => {\n            const { history, query } = this.props;\n            const groupByKey = groupBy;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)), { filter_by: undefined, group_by: {\n                    [groupByKey]: '*',\n                }, order_by: { cost: 'desc' } });\n            history.replace(this.getRouteForQuery(newQuery, true));\n            this.setState({ selectedItems: [] });\n        };\n        this.handlePerPageSelect = (_event, perPage) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { limit: perPage });\n            const filteredQuery = this.getRouteForQuery(newQuery, true);\n            history.replace(filteredQuery);\n        };\n        this.handleSelected = (selectedItems) => {\n            this.setState({ selectedItems });\n        };\n        this.handleSetPage = (event, pageNumber) => {\n            const { history, query, report } = this.props;\n            const limit = report && report.meta && report.meta.filter && report.meta.filter.limit\n                ? report.meta.filter.limit\n                : baseQuery.filter.limit;\n            const offset = pageNumber * limit - limit;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.filter = Object.assign({}, query.filter, { offset });\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.handleSort = (sortType, isSortAscending) => {\n            const { history, query } = this.props;\n            const newQuery = Object.assign({}, JSON.parse(JSON.stringify(query)));\n            newQuery.order_by = {};\n            newQuery.order_by[sortType] = isSortAscending ? 'asc' : 'desc';\n            const filteredQuery = this.getRouteForQuery(newQuery);\n            history.replace(filteredQuery);\n        };\n        this.updateReport = () => {\n            const { query, location, fetchReport, history, queryString } = this.props;\n            if (!location.search) {\n                history.replace(this.getRouteForQuery({\n                    filter_by: query.filter_by,\n                    group_by: query.group_by,\n                    order_by: { cost: 'desc' },\n                }));\n            }\n            else {\n                fetchReport(reportType, queryString);\n            }\n        };\n        this.handleExportModalClose = this.handleExportModalClose.bind(this);\n        this.handleExportModalOpen = this.handleExportModalOpen.bind(this);\n        this.handleFilterAdded = this.handleFilterAdded.bind(this);\n        this.handleFilterRemoved = this.handleFilterRemoved.bind(this);\n        this.handlePerPageSelect = this.handlePerPageSelect.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n        this.handleSetPage = this.handleSetPage.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n    componentDidMount() {\n        this.updateReport();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { location, report, reportError, queryString } = this.props;\n        const { selectedItems } = this.state;\n        const newQuery = prevProps.queryString !== queryString;\n        const noReport = !report && !reportError;\n        const noLocation = !location.search;\n        const newItems = prevState.selectedItems !== selectedItems;\n        if (newQuery || noReport || noLocation || newItems) {\n            this.updateReport();\n        }\n    }\n    getRouteForQuery(query, reset = false) {\n        // Reset pagination\n        if (reset) {\n            query.filter = Object.assign({}, query.filter, { offset: baseQuery.filter.offset });\n        }\n        return `/aws?${getQueryRoute(query)}`;\n    }\n    render() {\n        const { providers, providersError, providersFetchStatus, query, report, reportError, } = this.props;\n        const groupById = getIdKeyForGroupBy(query.group_by);\n        const groupByTag = this.getGroupByTagKey();\n        const computedItems = getUnsortedComputedAwsReportItems({\n            report,\n            idKey: groupByTag || groupById,\n        });\n        const error = providersError || reportError;\n        const isLoading = providersFetchStatus === 1 /* inProgress */;\n        const noProviders = providers !== undefined &&\n            providers.meta !== undefined &&\n            providers.meta.count === 0 &&\n            providersFetchStatus === 2 /* complete */;\n        return (React.createElement(\"div\", { className: css(styles.awsDetails) },\n            React.createElement(DetailsHeader, { groupBy: groupById, onGroupByClicked: this.handleGroupByClick }),\n            Boolean(error) ? (React.createElement(ErrorState, { error: error })) : Boolean(noProviders) ? (React.createElement(NoProvidersState, null)) : Boolean(isLoading) ? (React.createElement(LoadingState, null)) : (React.createElement(\"div\", { className: css(styles.content) },\n                this.getToolbar(),\n                this.getExportModal(computedItems),\n                React.createElement(\"div\", { className: css(styles.tableContainer) }, this.getTable()),\n                React.createElement(\"div\", { className: css(styles.paginationContainer) },\n                    React.createElement(\"div\", { className: css(styles.pagination) }, this.getPagination(true)))))));\n    }\n}\nconst mapStateToProps = createMapStateToProps((state, props) => {\n    const queryFromRoute = parseQuery(location.search);\n    const query = {\n        delta: 'cost',\n        filter: Object.assign({}, baseQuery.filter, queryFromRoute.filter),\n        filter_by: queryFromRoute.filter_by || baseQuery.filter_by,\n        group_by: queryFromRoute.group_by || baseQuery.group_by,\n        order_by: queryFromRoute.order_by || baseQuery.order_by,\n    };\n    const queryString = getQuery(query);\n    const report = awsReportsSelectors.selectReport(state, reportType, queryString);\n    const reportError = awsReportsSelectors.selectReportError(state, reportType, queryString);\n    const reportFetchStatus = awsReportsSelectors.selectReportFetchStatus(state, reportType, queryString);\n    const providersQueryString = getProvidersQuery(awsProvidersQuery);\n    const providers = providersSelectors.selectProviders(state, \"aws\" /* aws */, providersQueryString);\n    const providersError = providersSelectors.selectProvidersError(state, \"aws\" /* aws */, providersQueryString);\n    const providersFetchStatus = providersSelectors.selectProvidersFetchStatus(state, \"aws\" /* aws */, providersQueryString);\n    return {\n        providers,\n        providersError,\n        providersFetchStatus,\n        query,\n        queryString,\n        report,\n        reportError,\n        reportFetchStatus,\n    };\n});\nconst mapDispatchToProps = {\n    fetchReport: awsReportsActions.fetchReport,\n};\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(AwsDetails));\n","import AwsDetails from './awsDetails';\nexport default AwsDetails;\n"],"sourceRoot":""}